{"version":3,"sources":["container/email/HeaderFooterEdit.js","apollo/email/index.js"],"names":["Quill","register","ImageResize","htmlEditButton","modules","toolbar","font","header","color","background","script","list","indent","align","imageResize","parchment","import","okText","msg","HeaderFooterEdit","viewPermission","TextArea","params","useParams","history","useHistory","token","useSelector","state","auth","useState","isLoading","setIsLoading","content","setContent","htmlContent","setHTMLContent","customHtmlSwitch","setCustomHtmlSwitch","data","loading","error","singleHeaderFooter","setSingleHeaderFooter","useForm","form","useEffect","parseInt","id","apolloClient","query","EmailTemplateQuery","SINGLE_EMAIL_TEMPLATE_HEADER_FOOTER","variables","context","headers","TENANTID","process","Authorization","fetchPolicy","then","res","getSingleEmailTempHeaderFooter","status","setFieldsValue","name","type","layout_type","catch","err","console","log","title","gutter","sm","xs","headless","style","textAlign","tip","width","onFinish","values","customVer","mutate","mutation","EMAIL_TEMPLATE_HEADER_FOOTER_UPDATE","refetchQueries","GET_EMAIL_HEADER_FOOTER_LIST","updateEmailTempHeaderFooter","toast","setTimeout","push","success","message","finally","onFinishFailed","errorInfo","labelCol","span","Item","rules","required","max","label","placeholder","optionLabelProp","Option","value","className","checked","onChange","e","theme","defaultValue","target","display","justifyContent","size","htmlType","raised","to","marginLeft","gql","ADD_EMAIL_TEMPLATE_HEADER_FOOTER","GET_EMAIL_TEMPLATE_LIST","ADD_EMAIL_TEMPLATE_LIST","SINGLE_EMAIL_TEMPLATE_LIST","UPDATE_EMAIL_TEMPLATE_LIST","CREATE_EMAIL_TEMPLATE","GET_EMAIL_TEMPLATE_CONTENT_LIST","GET_SINGLE_EMAIL_CONTENT_TEMPLATE","UPDATE_EMAIL_TEMPLATE_CONTENT","GET_EMAIL_TEMPLATE_PREVIEW"],"mappings":"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","file":"static/js/37.0585ca7b.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Row, Col, Form, Input, Select, Spin, Switch } from 'antd';\nimport { PageHeader } from '../../components/page-headers/page-headers';\nimport { Main } from '../styled';\nimport { Cards } from '../../components/cards/frame/cards-frame';\nimport { Button } from '../../components/buttons/buttons';\nimport { Link, useHistory, useParams } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport apolloClient from '../../apollo';\nimport { viewPermission } from '../../utility/utility';\nimport ReactQuill, { Quill } from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport { EmailTemplateQuery } from '../../apollo/email';\nimport { useEffect } from 'react';\nimport ImageResize from 'quill-image-resize-module-react';\nimport htmlEditButton from 'quill-html-edit-button';\nQuill.register('modules/imageResize', ImageResize);\nQuill.register('modules/htmlEditButton', htmlEditButton);\n\nconst modules = {\n  toolbar: [\n    [{ font: [] }],\n    [{ header: [1, 2, 3, 4, 5, 6, false] }],\n    ['bold', 'italic', 'underline', 'strike'],\n    [{ color: [] }, { background: [] }],\n    [{ script: 'sub' }, { script: 'super' }],\n    ['blockquote', 'code-block'],\n    [{ list: 'ordered' }, { list: 'bullet' }],\n    [{ indent: '-1' }, { indent: '+1' }, { align: [] }],\n    ['link', 'image', 'video'],\n    ['clean'],\n  ],\n  imageResize: {\n    parchment: Quill.import('parchment'),\n    modules: ['Resize', 'DisplaySize'],\n  },\n  htmlEditButton: {\n    okText: 'Save',\n    msg: 'Edit HTML here, when you click \"Save\" the quill editor\\'s contents will be replaced',\n  },\n};\n\nconst HeaderFooterEdit = () => {\n  viewPermission('email-template');\n  const { TextArea } = Input;\n  const params = useParams();\n  const history = useHistory();\n  const token = useSelector(state => state.auth.token);\n  const [isLoading, setIsLoading] = useState(false);\n  const [content, setContent] = useState('');\n  const [htmlContent, setHTMLContent] = useState('');\n  const [customHtmlSwitch, setCustomHtmlSwitch] = useState(false);\n  const [singleHeaderFooter, setSingleHeaderFooter] = useState({ data: {}, loading: true, error: '' });\n  const [form] = Form.useForm();\n\n  //Submit Form\n  const handleSubmit = values => {\n    setIsLoading(true);\n    let customVer;\n    if (customHtmlSwitch) customVer = { layout_type: 'custom', content: htmlContent };\n    else customVer = { layout_type: 'dynamic', content };\n    apolloClient\n      .mutate({\n        mutation: EmailTemplateQuery.EMAIL_TEMPLATE_HEADER_FOOTER_UPDATE,\n        variables: { data: { ...values, id: parseInt(params?.id), ...customVer } },\n        refetchQueries: [\n          {\n            query: EmailTemplateQuery.GET_EMAIL_HEADER_FOOTER_LIST,\n            context: {\n              headers: {\n                TENANTID: process.env.REACT_APP_TENANTID,\n                Authorization: token,\n              },\n            },\n            fetchPolicy: 'network-only',\n          },\n          ['getEmailTempHeaderFooterList'],\n        ],\n        context: {\n          headers: {\n            TENANTID: process.env.REACT_APP_TENANTID,\n            Authorization: token,\n          },\n        },\n      })\n      .then(res => {\n        const data = res?.data?.updateEmailTempHeaderFooter;\n        if (!data?.status) return toast.error('Something Went wrong !!');\n        setTimeout(() => {\n          history.push('/admin/email/header-footer/list');\n        }, 1000);\n        toast.success(data?.message);\n      })\n      .catch(err => {\n        toast.error('Something Went wrong !!');\n      })\n      .finally(() => setIsLoading(false));\n  };\n\n  useEffect(() => {\n    if(!parseInt(params?.id)) return;\n    apolloClient\n      .query({\n        query: EmailTemplateQuery.SINGLE_EMAIL_TEMPLATE_HEADER_FOOTER,\n        variables: {\n          query: {\n            id: parseInt(params?.id),\n          },\n        },\n        context: {\n          headers: {\n            TENANTID: process.env.REACT_APP_TENANTID,\n            Authorization: token,\n          },\n        },\n        fetchPolicy: 'network-only',\n      })\n      .then(res => {\n        const data = res?.data?.getSingleEmailTempHeaderFooter;\n        if (!data.status) return;\n        setSingleHeaderFooter({ data: data?.data, loading: false, error: '' });\n        form.setFieldsValue({\n          name: data?.data?.name,\n          type: data?.data?.type,\n        });\n        setHTMLContent(data?.data?.content);\n        setContent(data?.data?.content);\n        setCustomHtmlSwitch(data?.data?.layout_type === \"custom\");\n      })\n      .catch(err => {\n        console.log(err);\n        setSingleHeaderFooter({ data: {}, loading: false, error: 'Something went worng' });\n      });\n  }, [params?.id]);\n\n  return (\n    <>\n      <PageHeader\n        title={`Manage Email Header/Footer | Edit Email Header/Footer ${\n          singleHeaderFooter?.data?.name ? `(${singleHeaderFooter?.data?.name})` : ''\n        }`}\n      />\n\n      <Main>\n        <Row gutter={25}>\n          <Col sm={24} xs={24}>\n            <Cards headless>\n              {singleHeaderFooter.loading ? (\n                <div style={{ textAlign: 'center' }}>\n                  <Spin tip=\"processing...\" />\n                </div>\n              ) : (\n                <Form\n                  style={{ width: '100%' }}\n                  form={form}\n                  name=\"editEmailHeaderFooter\"\n                  onFinish={handleSubmit}\n                  onFinishFailed={errorInfo => console.log('form error info:\\n', errorInfo)}\n                  labelCol={{ span: 4 }}\n                >\n                  <Form.Item\n                    rules={[{ required: true, max: 100, message: 'Please Enter Email Header/Footer Name' }]}\n                    name=\"name\"\n                    label=\"Name\"\n                  >\n                    <Input placeholder=\"Enter Header/Footer Name\" />\n                  </Form.Item>\n                  <Form.Item name=\"type\" label=\"Type\" required>\n                    <Select style={{ width: '100%' }} placeholder=\"Select Header/Footer Type\" optionLabelProp=\"label\">\n                      <Select.Option value=\"header\" label=\"Header\">\n                        <div className=\"demo-option-label-item\">Header</div>\n                      </Select.Option>\n                      <Select.Option value=\"footer\" label=\"Footer\">\n                        <div className=\"demo-option-label-item\">Footer</div>\n                      </Select.Option>\n                    </Select>\n                  </Form.Item>\n\n                  <Form.Item label=\"Custom HTML\">\n                    <Switch checked={customHtmlSwitch} onChange={e => setCustomHtmlSwitch(e)} />\n                  </Form.Item>\n                  {!customHtmlSwitch && (\n                    <Form.Item label=\"Content\">\n                      <ReactQuill\n                        theme=\"snow\"\n                        value={content}\n                        modules={modules}\n                        placeholder=\"Content goes here...\"\n                        onChange={setContent}\n                      />\n                    </Form.Item>\n                  )}\n\n                  {customHtmlSwitch && (\n                    <Form.Item label=\"Custom HTML\">\n                      <TextArea\n                        defaultValue={htmlContent}\n                        onChange={e => setHTMLContent(e.target.value)}\n                        placeholder=\"Paste your HTML Code Here...\"\n                      />\n                    </Form.Item>\n                  )}\n\n                  <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\n                    <Form.Item>\n                      <Button loading={isLoading} size=\"default\" htmlType=\"submit\" type=\"primary\" raised>\n                        {isLoading ? 'Processing' : 'Save'}\n                      </Button>\n                      <Link to=\"/admin/email/header-footer/list\">\n                        <Button style={{ marginLeft: 10 }} type=\"light\" size=\"default\">\n                          Cancel\n                        </Button>\n                      </Link>\n                    </Form.Item>\n                  </div>\n                </Form>\n              )}\n            </Cards>\n          </Col>\n        </Row>\n      </Main>\n    </>\n  );\n};\n\nexport default HeaderFooterEdit;\n","import { gql } from '@apollo/client';\n\nexport const EmailTemplateQuery = {\n  GET_EMAIL_HEADER_FOOTER_LIST: gql`\n    query getEmailTempHeaderFooterList {\n      getEmailTempHeaderFooterList {\n        message\n        status\n        data {\n          id\n          name\n          slug\n          content\n          type\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  `,\n  ADD_EMAIL_TEMPLATE_HEADER_FOOTER: gql`\n    mutation addEmailTempHeaderFooter($data: AddEmailTempHFInput) {\n      addEmailTempHeaderFooter(data: $data) {\n        message\n        status\n      }\n    }\n  `,\n  SINGLE_EMAIL_TEMPLATE_HEADER_FOOTER: gql`\n    query getSingleEmailTempHeaderFooter($query: GetSingleEmailHeaderFooterInput) {\n      getSingleEmailTempHeaderFooter(query: $query) {\n        message\n        status\n        data {\n          id\n          name\n          slug\n          content\n          layout_type\n          type\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  `,\n  EMAIL_TEMPLATE_HEADER_FOOTER_UPDATE: gql`\n    mutation updateEmailTempHeaderFooter($data: UpdateEmailTempHFInput) {\n      updateEmailTempHeaderFooter(data: $data) {\n        message\n        status\n      }\n    }\n  `,\n  GET_EMAIL_TEMPLATE_LIST: gql`\n    query getAllEmailTemplateList {\n      getAllEmailTemplateList {\n        message\n        status\n        data {\n          id\n          email_template_id\n          name\n          slug\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  `,\n  ADD_EMAIL_TEMPLATE_LIST: gql`\n    mutation addEmailTemplateOnList($data: AddEmailTemplateListInput) {\n      addEmailTemplateOnList(data: $data) {\n        message\n        status\n      }\n    }\n  `,\n  SINGLE_EMAIL_TEMPLATE_LIST: gql`\n    query getSingleEmailTemplateList($query: GetSingleEmailTemplateListInput) {\n      getSingleEmailTemplateList(query: $query) {\n        message\n        status\n        data {\n          id\n          email_template_id\n          name\n          slug\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  `,\n  UPDATE_EMAIL_TEMPLATE_LIST: gql`\n    mutation updateEmailTemplateOnList($data: UpdateEmailTemplateListInput) {\n      updateEmailTemplateOnList(data: $data) {\n        message\n        status\n      }\n    }\n  `,\n  CREATE_EMAIL_TEMPLATE: gql`\n    mutation createEmailTemplate($data: addEmailTemplateInput) {\n      createEmailTemplate(data: $data) {\n        message\n        status\n      }\n    }\n  `,\n  GET_EMAIL_TEMPLATE_CONTENT_LIST: gql`\n    query getEmailTemplateList {\n      getEmailTemplateList {\n        message\n        status\n        data {\n          id\n          name\n          slug\n          createdAt\n          updatedAt\n          emailHeader {\n            id\n            name\n            slug\n          }\n          emailFooter {\n            id\n            name\n            slug\n          }\n        }\n      }\n    }\n  `,\n  GET_SINGLE_EMAIL_CONTENT_TEMPLATE: gql`\n    query getSingleEmailTemplate($query: GetSingleEmailTemplateInput) {\n      getSingleEmailTemplate(query: $query) {\n        message\n        status\n        data {\n          id\n          name\n          slug\n          content\n          layout_type\n          createdAt\n          updatedAt\n          emailHeader {\n            id\n            name\n            slug\n            content\n            type\n            createdAt\n            updatedAt\n          }\n          emailFooter {\n            id\n            name\n            slug\n            content\n            type\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n  `,\n  UPDATE_EMAIL_TEMPLATE_CONTENT: gql`\n    mutation updateEmailTemplate($data: updateEmailTemplateInput) {\n      updateEmailTemplate(data: $data) {\n        message\n        status\n      }\n    }\n  `,\n  GET_EMAIL_TEMPLATE_PREVIEW: gql`\n    query getEmailTemplatePreview($query: GetEmailTemplatePreviewInput) {\n      getEmailTemplatePreview(query: $query) {\n        message\n        status\n        tenant_id\n        data\n      }\n    }\n  `,\n};\n"],"sourceRoot":""}