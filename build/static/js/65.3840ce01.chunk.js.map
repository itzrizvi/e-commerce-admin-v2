{"version":3,"sources":["container/products/AttributeGroup.js"],"names":["AttributeGroup","viewPermission","useState","data","isLoading","attributeGroups","setAttributeGroups","filteredAttributeGroups","setFilteredAttributeGroups","searchText","setSearchText","useEffect","apolloClient","query","attributeQuery","GET_ALL_ATTR_GROUPS","context","headers","TENANTID","process","Authorization","Cookies","get","then","res","getAllAttrGroups","status","s","error","catch","err","finally","columns","title","dataIndex","key","sorter","a","b","attr_group_name","toUpperCase","attrgroup_sortorder","align","attrgroup_status","filters","text","value","onFilter","record","render","defaultChecked","onChange","checked","handleStatusChange","width","to","name","style","margin","variables","attr_group_id","id","console","log","mutate","mutation","attributeMutation","UPDATE_ATTR_GROUP","updateAttrGroup","toast","message","success","buttons","className","size","type","icon","gutter","sm","xs","headless","placeholder","prefix","e","target","filter","attr","g_n","toLowerCase","includes","rowKey","dataSource","rowClassName","index"],"mappings":"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","file":"static/js/65.3840ce01.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Row, Col, Input, Table, Spin, Switch } from 'antd';\nimport FeatherIcon from 'feather-icons-react';\nimport { SearchOutlined } from '@ant-design/icons';\nimport { PageHeader } from '../../components/page-headers/page-headers';\nimport { Main } from '../styled';\nimport { Cards } from '../../components/cards/frame/cards-frame';\nimport { Button } from '../../components/buttons/buttons';\nimport { Link } from 'react-router-dom';\nimport FontAwesome from 'react-fontawesome';\nimport apolloClient, { attributeMutation, attributeQuery } from '../../utility/apollo';\nimport Cookies from 'js-cookie';\nimport { toast } from 'react-toastify';\nimport { viewPermission } from '../../utility/utility';\n\nconst AttributeGroup = () => {\n    viewPermission('attribute-group');\n    // const dummyData = [...Array(10).keys()].map(i => ({ g_n: `Group ${i + 1}`, g_s: i + 1 }))\n    const [attributeGroups, setAttributeGroups] = useState({ data: [], isLoading: true })\n    const [filteredAttributeGroups, setFilteredAttributeGroups] = useState([])\n    const [searchText, setSearchText] = useState('')\n\n    useEffect(() => {\n        apolloClient.query({\n            query: attributeQuery.GET_ALL_ATTR_GROUPS,\n            context: {\n                headers: {\n                    TENANTID: process.env.REACT_APP_TENANTID,\n                    Authorization: Cookies.get('psp_t')\n                }\n            }\n        }).then(res => {\n\n            const data = res?.data?.getAllAttrGroups\n\n            if (!data?.status) return\n            setAttributeGroups(s => ({ ...s, data: data?.data, error: '' }))\n\n        }).catch(err => {\n            setAttributeGroups(s => ({ ...s, error: 'Something went Wrong.!! ' }))\n        }).finally(() => {\n            setAttributeGroups(s => ({ ...s, isLoading: false }))\n        })\n\n    }, []);\n\n\n\n\n    const columns = [\n        {\n            title: 'Group Name',\n            dataIndex: 'attr_group_name',\n            key: 'attr_group_name',\n            sorter: (a, b) => a.attr_group_name.toUpperCase() > b.attr_group_name.toUpperCase() ? 1 : -1,\n        },\n        {\n            title: 'Sort Order',\n            dataIndex: 'attrgroup_sortorder',\n            key: 'attrgroup_sortorder',\n            sorter: (a, b) => (a.attrgroup_sortorder === b.attrgroup_sortorder) ? 0 : a.attrgroup_sortorder ? -1 : 1,\n        },\n        {\n            title: 'Status',\n            dataIndex: 'attrgroup_status',\n            key: 'attrgroup_status',\n            align: 'right',\n            sorter: (a, b) => (a.attrgroup_status === b.attrgroup_status) ? 0 : a.attrgroup_status ? -1 : 1,\n            filters: [\n                {\n                    text: 'Active',\n                    value: true,\n                },\n                {\n                    text: 'Inactive',\n                    value: false,\n                }\n            ],\n            onFilter: (value, record) => record.attrgroup_status === value,\n            render: (value, record) => (\n                <Switch\n                    defaultChecked={value} title='Status'\n                    onChange={checked => handleStatusChange(record, checked)}\n                />\n            )\n        },\n\n        {\n            title: 'Action',\n            dataIndex: 'id',\n            key: 'id',\n            width: 70,\n            align: 'right',\n            render: (value, record) => (\n                <>\n                    <Link to={`/admin/attributes/add-group?id=${value}`}>\n                        {/* <Button size=\"default\" type=\"white\" title='Edit'> */}\n                        <FontAwesome name=\"edit\" style={{ margin: \".5em 1em\" }} />\n                        {/* </Button> */}\n                    </Link>\n                </>\n            ),\n        },\n    ]\n\n    const onChangeSearch = e => {\n        const value = e.target.value\n        setSearchText(value)\n        setFilteredAttributeGroups(attributeGroups.data.filter(attr => attr?.g_n.toLowerCase().includes(value.toLowerCase())))\n    }\n\n    const handleStatusChange = (record, checked) => {\n        const variables = { data: { attr_group_id: record.id, attrgroup_status: checked } }\n        console.log(variables)\n        // return;\n        apolloClient.mutate({\n            mutation: attributeMutation.UPDATE_ATTR_GROUP,\n            variables,\n            context: {\n                headers: {\n                    TENANTID: process.env.REACT_APP_TENANTID,\n                    Authorization: Cookies.get('psp_t')\n                },\n            },\n\n        }).then(res => {\n            const data = res?.data?.updateAttrGroup\n            if (!data.status) return toast.error(data.message);\n            toast.success(`${record.attr_group_name} status updated successfully`);\n\n        }).catch(err => {\n            console.log(\"got error on status update\", err)\n            return toast.error('Something Went wrong !!')\n        })\n\n    }\n\n\n    return (\n        <>\n            <PageHeader\n                title=\"Attribute Groups\"\n                buttons={[\n                    <div key=\"1\" className=\"page-header-actions\">\n                        <Link to=\"/admin/attributes/add-group\">\n                            <Button size=\"small\" title=\"Add Attribute Group\" type=\"primary\">\n                                <FeatherIcon icon=\"file-plus\" />\n                            </Button>\n                        </Link>\n                    </div>\n                ]}\n            />\n            <Main>\n                <Row gutter={25}>\n                    <Col sm={24} xs={24}>\n                        <Cards headless>\n                            {attributeGroups.isLoading ?\n                                <div className=\"spin\">\n                                    <Spin />\n                                </div>\n                                :\n                                <>\n                                    <Input placeholder=\"Search Attribute Groups...\" prefix={<SearchOutlined />} onChange={onChangeSearch} />\n                                    <br /><br />\n\n                                    <span className={\"psp_list\"} >\n                                        <Table\n                                            className=\"table-responsive\"\n                                            columns={columns}\n                                            rowKey={'g_s'}\n                                            size=\"small\"\n                                            dataSource={searchText ? filteredAttributeGroups : attributeGroups.data}\n                                            rowClassName={(record, index) => (index % 2 === 0 ? \"\" : \"altTableClass\")}\n                                        // pagination={false}\n                                        // pagination={{\n                                        //     defaultPageSize: config.PERMISSIONS_PER_PAGE,\n                                        //     total: searchText ? filteredPermissions.length : permissions.length,\n                                        //     showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} items`,\n                                        // }}\n                                        />\n                                    </span>\n\n\n\n                                </>\n\n                            }\n\n\n\n                        </Cards>\n                    </Col>\n                </Row>\n            </Main>\n        </>\n    );\n};\n\nexport default AttributeGroup;\n"],"sourceRoot":""}