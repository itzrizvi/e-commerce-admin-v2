{"version":3,"sources":["container/email/EditContent.js","apollo/email/index.js"],"names":["Quill","register","ImageResize","htmlEditButton","modules","toolbar","font","header","color","background","script","list","indent","align","imageResize","parchment","import","okText","msg","AddContent","viewPermission","TextArea","history","useHistory","params","useParams","token","useSelector","state","auth","useState","isLoading","setIsLoading","content","setContent","useForm","form","setHeader","footer","setFooter","htmlContent","setHTMLContent","customHtmlSwitch","setCustomHtmlSwitch","data","loading","error","singleTemplate","setSingleTemplate","useEffect","apolloClient","query","EmailTemplateQuery","GET_SINGLE_EMAIL_CONTENT_TEMPLATE","variables","id","parseInt","context","headers","TENANTID","process","Authorization","fetchPolicy","then","res","getSingleEmailTemplate","status","setFieldsValue","name","header_id","emailHeader","footer_id","emailFooter","layout_type","catch","err","console","log","GET_EMAIL_HEADER_FOOTER_LIST","getEmailTempHeaderFooterList","filter","item","type","title","gutter","sm","xs","headless","style","textAlign","tip","width","onFinish","values","customVer","mutate","mutation","UPDATE_EMAIL_TEMPLATE_CONTENT","refetchQueries","GET_EMAIL_TEMPLATE_CONTENT_LIST","updateEmailTemplate","toast","setTimeout","push","success","message","finally","onFinishFailed","errorInfo","labelCol","span","Item","rules","required","max","label","placeholder","optionLabelProp","map","Option","value","className","checked","onChange","e","theme","defaultValue","target","display","justifyContent","size","htmlType","raised","to","marginLeft","gql","ADD_EMAIL_TEMPLATE_HEADER_FOOTER","SINGLE_EMAIL_TEMPLATE_HEADER_FOOTER","EMAIL_TEMPLATE_HEADER_FOOTER_UPDATE","GET_EMAIL_TEMPLATE_LIST","ADD_EMAIL_TEMPLATE_LIST","SINGLE_EMAIL_TEMPLATE_LIST","UPDATE_EMAIL_TEMPLATE_LIST","CREATE_EMAIL_TEMPLATE","GET_EMAIL_TEMPLATE_PREVIEW"],"mappings":"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","file":"static/js/34.6cff0028.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Row, Col, Form, Input, Select, Spin, Switch } from 'antd';\nimport { PageHeader } from '../../components/page-headers/page-headers';\nimport { Main } from '../styled';\nimport { Cards } from '../../components/cards/frame/cards-frame';\nimport { Button } from '../../components/buttons/buttons';\nimport { Link, useHistory, useParams } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport apolloClient from '../../apollo';\nimport { viewPermission } from '../../utility/utility';\nimport ReactQuill, { Quill } from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport { EmailTemplateQuery } from '../../apollo/email';\nimport ImageResize from 'quill-image-resize-module-react';\nimport htmlEditButton from 'quill-html-edit-button';\nimport { useEffect } from 'react';\nQuill.register('modules/imageResize', ImageResize);\nQuill.register('modules/htmlEditButton', htmlEditButton);\n\nconst modules = {\n  toolbar: [\n    [{ font: [] }],\n    [{ header: [1, 2, 3, 4, 5, 6, false] }],\n    ['bold', 'italic', 'underline', 'strike'],\n    [{ color: [] }, { background: [] }],\n    [{ script: 'sub' }, { script: 'super' }],\n    ['blockquote', 'code-block'],\n    [{ list: 'ordered' }, { list: 'bullet' }],\n    [{ indent: '-1' }, { indent: '+1' }, { align: [] }],\n    ['link', 'image', 'video'],\n    ['clean'],\n  ],\n  imageResize: {\n    parchment: Quill.import('parchment'),\n    modules: ['Resize', 'DisplaySize'],\n  },\n  htmlEditButton: {\n    okText: 'Save',\n    msg: 'Edit HTML here, when you click \"Save\" the quill editor\\'s contents will be replaced',\n  },\n};\n\nconst AddContent = () => {\n  viewPermission('email-template');\n  const { TextArea } = Input;\n  const history = useHistory();\n  const params = useParams();\n  const token = useSelector(state => state.auth.token);\n  const [isLoading, setIsLoading] = useState(false);\n  const [content, setContent] = useState('');\n  const [form] = Form.useForm();\n  const [header, setHeader] = useState([]);\n  const [footer, setFooter] = useState([]);\n  const [htmlContent, setHTMLContent] = useState('');\n  const [customHtmlSwitch, setCustomHtmlSwitch] = useState(false);\n  const [singleTemplate, setSingleTemplate] = useState({ data: {}, loading: true, error: '' });\n\n  //Submit Form\n  const handleSubmit = values => {\n    setIsLoading(true);\n    let customVer;\n    if (customHtmlSwitch) customVer = { layout_type: 'custom', content: htmlContent };\n    else customVer = { layout_type: 'dynamic', content };\n    apolloClient\n      .mutate({\n        mutation: EmailTemplateQuery.UPDATE_EMAIL_TEMPLATE_CONTENT,\n        variables: { data: { ...values, ...customVer, id: parseInt(params?.id) } },\n        refetchQueries: [\n          {\n            query: EmailTemplateQuery.GET_EMAIL_TEMPLATE_CONTENT_LIST,\n            context: {\n              headers: {\n                TENANTID: process.env.REACT_APP_TENANTID,\n                Authorization: token,\n              },\n            },\n            fetchPolicy: 'network-only',\n          },\n          ['getEmailTemplateList'],\n        ],\n        context: {\n          headers: {\n            TENANTID: process.env.REACT_APP_TENANTID,\n            Authorization: token,\n          },\n        },\n      })\n      .then(res => {\n        const data = res?.data?.updateEmailTemplate;\n        if (!data?.status) return toast.error('Something Went wrong !!');\n        setTimeout(() => {\n          history.push('/admin/email/content/list');\n        }, 1000);\n        toast.success(data?.message);\n      })\n      .catch(err => {\n        toast.error('Something Went wrong !!');\n      })\n      .finally(() => setIsLoading(false));\n  };\n\n  useEffect(() => {\n    apolloClient\n      .query({\n        query: EmailTemplateQuery.GET_SINGLE_EMAIL_CONTENT_TEMPLATE,\n        variables: {\n          query: {\n            id: parseInt(params?.id),\n          },\n        },\n        context: {\n          headers: {\n            TENANTID: process.env.REACT_APP_TENANTID,\n            Authorization: token,\n          },\n        },\n        fetchPolicy: 'network-only',\n      })\n      .then(res => {\n        const data = res?.data?.getSingleEmailTemplate;\n        if (!data.status) return;\n        setSingleTemplate({ data: data, loading: false, error: '' });\n        form.setFieldsValue({\n          name: data?.data?.name,\n          header_id: data?.data?.emailHeader?.id,\n          footer_id: data?.data?.emailFooter?.id,\n        });\n        setHTMLContent(data?.data?.content);\n        setContent(data?.data?.content);\n        setCustomHtmlSwitch(data?.data?.layout_type);\n      })\n      .catch(err => {\n        console.log(err);\n        setSingleTemplate({ data: {}, loading: false, error: 'Something went wrong' });\n      });\n    apolloClient\n      .query({\n        query: EmailTemplateQuery.GET_EMAIL_HEADER_FOOTER_LIST,\n        context: {\n          headers: {\n            TENANTID: process.env.REACT_APP_TENANTID,\n            Authorization: token,\n          },\n        },\n      })\n      .then(res => {\n        const data = res?.data?.getEmailTempHeaderFooterList;\n        setHeader(data?.data?.filter(item => item.type === 'header'));\n        setFooter(data?.data?.filter(item => item.type === 'footer'));\n      });\n  }, []);\n\n  return (\n    <>\n      <PageHeader\n        title={`Manage Email Content | Edit Email Content ${\n          singleTemplate?.data?.data?.name ? `(${singleTemplate?.data?.data?.name})` : ''\n        }`}\n      />\n      <Main>\n        <Row gutter={25}>\n          <Col sm={24} xs={24}>\n            <Cards headless>\n              {singleTemplate.loading ? (\n                <div style={{ textAlign: 'center' }}>\n                  <Spin tip=\"processing...\" />\n                </div>\n              ) : (\n                <Form\n                  style={{ width: '100%' }}\n                  form={form}\n                  name=\"editEmailContent\"\n                  onFinish={handleSubmit}\n                  onFinishFailed={errorInfo => console.log('form error info:\\n', errorInfo)}\n                  labelCol={{ span: 4 }}\n                >\n                  <Form.Item\n                    rules={[{ required: true, max: 100, message: 'Please Enter Email Content Name' }]}\n                    name=\"name\"\n                    label=\"Name\"\n                  >\n                    <Input placeholder=\"Enter Email Content Name\" />\n                  </Form.Item>\n                  <Form.Item\n                    name=\"header_id\"\n                    label=\"Header\"\n                    rules={[{ required: true, message: 'Please Select Header' }]}\n                  >\n                    <Select style={{ width: '100%' }} placeholder=\"Select Content Header\" optionLabelProp=\"label\">\n                      {header?.map(item => (\n                        <Select.Option value={item.id} label={item.name}>\n                          <div className=\"demo-option-label-item\">{item.name}</div>\n                        </Select.Option>\n                      ))}\n                    </Select>\n                  </Form.Item>\n                  <Form.Item\n                    name=\"footer_id\"\n                    label=\"Footer\"\n                    rules={[{ required: true, message: 'Please Select Footer' }]}\n                  >\n                    <Select style={{ width: '100%' }} placeholder=\"Select Content Footer\" optionLabelProp=\"label\">\n                      {footer?.map(item => (\n                        <Select.Option value={item.id} label={item.name}>\n                          <div className=\"demo-option-label-item\">{item.name}</div>\n                        </Select.Option>\n                      ))}\n                    </Select>\n                  </Form.Item>\n                  <Form.Item label=\"Custom HTML\">\n                    <Switch checked={customHtmlSwitch} onChange={e => setCustomHtmlSwitch(e)} />\n                  </Form.Item>\n                  {!customHtmlSwitch && (\n                    <Form.Item label=\"Body\">\n                      <ReactQuill\n                        theme=\"snow\"\n                        value={content}\n                        modules={modules}\n                        placeholder=\"Content goes here...\"\n                        onChange={setContent}\n                      />\n                    </Form.Item>\n                  )}\n\n                  {customHtmlSwitch && (\n                    <Form.Item label=\"Custom HTML\">\n                      <TextArea\n                        defaultValue={htmlContent}\n                        onChange={e => setHTMLContent(e.target.value)}\n                        placeholder=\"Paste your HTML Code Here...\"\n                      />\n                    </Form.Item>\n                  )}\n\n                  <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\n                    <Form.Item>\n                      <Button loading={isLoading} size=\"default\" htmlType=\"submit\" type=\"primary\" raised>\n                        {isLoading ? 'Processing' : 'Save'}\n                      </Button>\n                      <Link to=\"/admin/email/content/list\">\n                        <Button style={{ marginLeft: 10 }} type=\"light\" size=\"default\">\n                          Cancel\n                        </Button>\n                      </Link>\n                    </Form.Item>\n                  </div>\n                </Form>\n              )}\n            </Cards>\n          </Col>\n        </Row>\n      </Main>\n    </>\n  );\n};\n\nexport default AddContent;\n","import { gql } from '@apollo/client';\n\nexport const EmailTemplateQuery = {\n  GET_EMAIL_HEADER_FOOTER_LIST: gql`\n    query getEmailTempHeaderFooterList {\n      getEmailTempHeaderFooterList {\n        message\n        status\n        data {\n          id\n          name\n          slug\n          content\n          type\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  `,\n  ADD_EMAIL_TEMPLATE_HEADER_FOOTER: gql`\n    mutation addEmailTempHeaderFooter($data: AddEmailTempHFInput) {\n      addEmailTempHeaderFooter(data: $data) {\n        message\n        status\n      }\n    }\n  `,\n  SINGLE_EMAIL_TEMPLATE_HEADER_FOOTER: gql`\n    query getSingleEmailTempHeaderFooter($query: GetSingleEmailHeaderFooterInput) {\n      getSingleEmailTempHeaderFooter(query: $query) {\n        message\n        status\n        data {\n          id\n          name\n          slug\n          content\n          layout_type\n          type\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  `,\n  EMAIL_TEMPLATE_HEADER_FOOTER_UPDATE: gql`\n    mutation updateEmailTempHeaderFooter($data: UpdateEmailTempHFInput) {\n      updateEmailTempHeaderFooter(data: $data) {\n        message\n        status\n      }\n    }\n  `,\n  GET_EMAIL_TEMPLATE_LIST: gql`\n    query getAllEmailTemplateList {\n      getAllEmailTemplateList {\n        message\n        status\n        data {\n          id\n          email_template_id\n          name\n          slug\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  `,\n  ADD_EMAIL_TEMPLATE_LIST: gql`\n    mutation addEmailTemplateOnList($data: AddEmailTemplateListInput) {\n      addEmailTemplateOnList(data: $data) {\n        message\n        status\n      }\n    }\n  `,\n  SINGLE_EMAIL_TEMPLATE_LIST: gql`\n    query getSingleEmailTemplateList($query: GetSingleEmailTemplateListInput) {\n      getSingleEmailTemplateList(query: $query) {\n        message\n        status\n        data {\n          id\n          email_template_id\n          name\n          slug\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  `,\n  UPDATE_EMAIL_TEMPLATE_LIST: gql`\n    mutation updateEmailTemplateOnList($data: UpdateEmailTemplateListInput) {\n      updateEmailTemplateOnList(data: $data) {\n        message\n        status\n      }\n    }\n  `,\n  CREATE_EMAIL_TEMPLATE: gql`\n    mutation createEmailTemplate($data: addEmailTemplateInput) {\n      createEmailTemplate(data: $data) {\n        message\n        status\n      }\n    }\n  `,\n  GET_EMAIL_TEMPLATE_CONTENT_LIST: gql`\n    query getEmailTemplateList {\n      getEmailTemplateList {\n        message\n        status\n        data {\n          id\n          name\n          slug\n          createdAt\n          updatedAt\n          emailHeader {\n            id\n            name\n            slug\n          }\n          emailFooter {\n            id\n            name\n            slug\n          }\n        }\n      }\n    }\n  `,\n  GET_SINGLE_EMAIL_CONTENT_TEMPLATE: gql`\n    query getSingleEmailTemplate($query: GetSingleEmailTemplateInput) {\n      getSingleEmailTemplate(query: $query) {\n        message\n        status\n        data {\n          id\n          name\n          slug\n          content\n          layout_type\n          createdAt\n          updatedAt\n          emailHeader {\n            id\n            name\n            slug\n            content\n            type\n            createdAt\n            updatedAt\n          }\n          emailFooter {\n            id\n            name\n            slug\n            content\n            type\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n  `,\n  UPDATE_EMAIL_TEMPLATE_CONTENT: gql`\n    mutation updateEmailTemplate($data: updateEmailTemplateInput) {\n      updateEmailTemplate(data: $data) {\n        message\n        status\n      }\n    }\n  `,\n  GET_EMAIL_TEMPLATE_PREVIEW: gql`\n    query getEmailTemplatePreview($query: GetEmailTemplatePreviewInput) {\n      getEmailTemplatePreview(query: $query) {\n        message\n        status\n        tenant_id\n        data\n      }\n    }\n  `,\n};\n"],"sourceRoot":""}