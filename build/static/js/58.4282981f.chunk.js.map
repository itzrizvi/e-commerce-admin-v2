{"version":3,"sources":["container/customers/CustomerGroups.js"],"names":["CustomerGroups","viewPermission","useState","data","isLoading","customerGroups","setCustomerGroups","filteredCustomerGroups","setFilteredCustomerGroups","searchText","setSearchText","columns","title","dataIndex","key","sorter","a","b","customer_group_name","toUpperCase","ellipsis","customergroup_description","width","align","customergroup_sortorder","customergroup_status","filters","text","value","onFilter","record","render","defaultChecked","onChange","checked","variables","id","apolloClient","mutate","mutation","customerMutation","UPDATE_CUSTOMER_GROUP","context","headers","TENANTID","process","Authorization","Cookies","get","then","res","updateCustomerGroup","status","toast","error","message","success","catch","err","console","log","handleStatusChange","to","name","style","margin","useEffect","query","customerQuery","GET_ALL_CUSTOMER_GROUPS","getAllCustomerGroups","s","finally","buttons","className","size","type","icon","gutter","sm","xs","headless","placeholder","prefix","e","target","filter","group","toLowerCase","includes","rowKey","dataSource","rowClassName","index","pagination","defaultPageSize","config","CUSTOMER_GROUPS_PER_PAGE","total","length","showTotal","range"],"mappings":"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","file":"static/js/58.4282981f.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Row, Col, Spin, Input, Table, Switch } from 'antd';\nimport FeatherIcon from 'feather-icons-react';\nimport { PageHeader } from '../../components/page-headers/page-headers';\nimport { Main } from '../styled';\nimport { Cards } from '../../components/cards/frame/cards-frame';\nimport { Button } from '../../components/buttons/buttons';\nimport { Link } from 'react-router-dom';\nimport FontAwesome from 'react-fontawesome';\nimport { SearchOutlined } from '@ant-design/icons';\nimport config from '../../config/config';\nimport apolloClient, { customerMutation, customerQuery } from '../../utility/apollo';\nimport Cookies from 'js-cookie';\nimport { toast } from 'react-toastify';\nimport { viewPermission } from '../../utility/utility';\n\n\nconst CustomerGroups = () => {\n    viewPermission('customer-group');\n\n    const [customerGroups, setCustomerGroups] = useState({ data: [], isLoading: true })\n\n    const [filteredCustomerGroups, setFilteredCustomerGroups] = useState([])\n    const [searchText, setSearchText] = useState('')\n\n    const handleStatusChange = (record, checked) => {\n        const variables = {\n            data: {\n                id: record.id,\n                customergroup_status: checked,\n            }\n        }\n        apolloClient.mutate({\n            mutation: customerMutation.UPDATE_CUSTOMER_GROUP,\n            variables,\n            context: {\n                headers: {\n                    TENANTID: process.env.REACT_APP_TENANTID,\n                    Authorization: Cookies.get('psp_t')\n                },\n            },\n\n        }).then(res => {\n            const data = res?.data?.updateCustomerGroup\n            if (!data.status) return toast.error(data.message);\n            toast.success(`${record.customer_group_name} Group Status Updated successfully`);\n        }).catch(err => {\n            console.log(\"got error on updateStatus\", err)\n            return toast.error('Something Went wrong !!')\n        })\n\n    }\n\n    const columns = [\n        {\n            title: 'Group Name',\n            dataIndex: 'customer_group_name',\n            key: 'customer_group_name',\n            sorter: (a, b) => a.customer_group_name.toUpperCase() > b.customer_group_name.toUpperCase() ? 1 : -1,\n        },\n        {\n            title: 'Group Description',\n            dataIndex: 'customergroup_description',\n            key: 'customergroup_description',\n            // width: 200,\n            ellipsis: true,\n            sorter: (a, b) => a.customergroup_description.toUpperCase() > b.customergroup_description.toUpperCase() ? 1 : -1,\n        },\n        {\n            title: 'Sort Order',\n            dataIndex: 'customergroup_sortorder',\n            key: 'customergroup_sortorder',\n            width: 100,\n            align: 'center',\n            sorter: (a, b) => (a.customergroup_sortorder === b.customergroup_sortorder) ? 0 : a.customergroup_sortorder ? -1 : 1,\n        },\n        {\n            title: 'Status',\n            dataIndex: 'customergroup_status',\n            key: 'customergroup_status',\n            align: 'center',\n            width: 100,\n            sorter: (a, b) => (a.customergroup_status === b.customergroup_status) ? 0 : a.customergroup_status ? -1 : 1,\n            filters: [\n                {\n                    text: 'Active',\n                    value: true,\n                },\n                {\n                    text: 'Inactive',\n                    value: false,\n                }\n            ],\n            onFilter: (value, record) => record.customergroup_status === value,\n            render: (value, record) => (\n                <Switch defaultChecked={value} title='Status' onChange={checked => handleStatusChange(record, checked)} />\n            )\n        },\n\n        {\n            title: 'Action',\n            dataIndex: 'action',\n            width: 70,\n            align: 'right',\n            render: (text, record) => (\n                <>\n                    <Link to={`/admin/customers/add-group?id=${record.id}`}>\n                        {/* <Button size=\"default\" type=\"white\" title='Edit'> */}\n                        <FontAwesome name=\"edit\" style={{ margin: \".5em 1em\" }} />\n                        {/* </Button> */}\n                    </Link>\n                </>\n            ),\n            key: 'last_name',\n        },\n    ]\n\n\n    // LOAD CUSTOMER GROUPS\n    useEffect(() => {\n        apolloClient.query({\n            query: customerQuery.GET_ALL_CUSTOMER_GROUPS,\n            context: {\n                headers: {\n                    TENANTID: process.env.REACT_APP_TENANTID,\n                    Authorization: Cookies.get('psp_t')\n                }\n            }\n        }).then(res => {\n            const data = res?.data?.getAllCustomerGroups\n\n            if (!data?.status) return\n            setCustomerGroups(s => ({ ...s, data: data?.data, error: '' }))\n        }).catch(err => {\n            setCustomerGroups(s => ({ ...s, error: 'Something went Wrong.!! ' }))\n        }).finally(() => {\n            setCustomerGroups(s => ({ ...s, isLoading: false }))\n        })\n\n    }, []);\n\n\n\n\n    const onChangeSearch = e => {\n        const value = e.target.value\n        setSearchText(value)\n        setFilteredCustomerGroups(customerGroups.data.filter(group => (group?.customer_group_name + group?.customergroup_description + group.customergroup_sortorder).toLowerCase().includes(value.toLowerCase())))\n    }\n\n\n    return (\n        <>\n            <PageHeader\n                title=\"Customers Group\"\n                buttons={[\n                    <div key=\"1\" className=\"page-header-actions\">\n                        <Link to=\"/admin/customers/add-group\">\n                            <Button size=\"small\" title=\"Add Customer Groups\" type=\"primary\">\n                                <FeatherIcon icon=\"user-plus\" />\n                            </Button>\n                        </Link>\n                    </div>\n                ]}\n            />\n            <Main>\n                <Row gutter={25}>\n                    <Col sm={24} xs={24}>\n                        <Cards headless>\n\n                            {customerGroups.isLoading ?\n                                <div className=\"spin\">\n                                    <Spin />\n                                </div>\n                                :\n                                <>\n                                    <Input placeholder=\"Search Group...\" prefix={<SearchOutlined />} onChange={onChangeSearch} />\n                                    <br /><br />\n\n                                    <span className={\"psp_list\"} >\n                                        <Table\n                                            className=\"table-responsive\"\n                                            columns={columns}\n                                            rowKey={'g_s'}\n                                            size=\"small\"\n                                            dataSource={searchText ? filteredCustomerGroups : customerGroups.data}\n                                            rowClassName={(record, index) => (index % 2 === 0 ? \"\" : \"altTableClass\")}\n                                            // pagination={false}\n                                            pagination={{\n                                                defaultPageSize: config.CUSTOMER_GROUPS_PER_PAGE,\n                                                total: searchText ? filteredCustomerGroups.length : customerGroups.data.length,\n                                                showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} items`,\n                                            }}\n                                        />\n                                    </span>\n\n\n\n                                </>\n\n                            }\n\n\n\n                        </Cards>\n                    </Col>\n                </Row>\n            </Main>\n        </>\n    );\n};\n\nexport default CustomerGroups;\n"],"sourceRoot":""}