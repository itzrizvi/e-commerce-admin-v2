{"version":3,"sources":["container/brand/ListBrand.js","apollo/brand/index.js"],"names":["ListBrand","viewPermission","useState","data","loading","error","brand","setBrand","filteredBrand","setFilteredBrand","isFilter","setIsFilter","token","useSelector","state","auth","useEffect","apolloClient","query","brandQuery","GET_ALL_BRAND","context","headers","TENANTID","process","Authorization","then","res","getAllBrands","s","catch","err","finally","columns","title","dataIndex","key","width","ellipsis","sorter","a","b","id","toUpperCase","brand_name","align","render","text","record","effect","height","src","renderImage","image","onError","errorImageSrc","onL","alt","brand_slug","defaultChecked","onChange","checked","variables","brand_id","brand_status","mutate","mutation","BRAND_UPDATE","updateBrand","status","toast","message","success","console","log","handleStatusChange","filters","value","onFilter","className","format","parseInt","to","name","buttons","size","type","icon","gutter","sm","xs","headless","placeholder","prefix","e","target","filter","toLowerCase","includes","pagination","defaultPageSize","config","BRAND_PER_PAGE","total","length","showTotal","range","rowKey","dataSource","rowClassName","index","gql","GET_ALL_BRAND_WITH_CATEGORY","GET_CATEGORIES","GET_SINGLE_BRAND","BRAND_UPDATE_WI","BRAND_ADD","BRAND_ADD_WI"],"mappings":"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","file":"static/js/25.c815f809.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { SearchOutlined } from '@ant-design/icons';\nimport { Row, Col, Spin, Input, Table, Switch } from 'antd';\nimport FeatherIcon from 'feather-icons-react';\nimport { PageHeader } from '../../components/page-headers/page-headers';\nimport { Main } from '../styled';\nimport { Cards } from '../../components/cards/frame/cards-frame';\nimport { Button } from '../../components/buttons/buttons';\nimport { Link } from 'react-router-dom';\nimport FontAwesome from 'react-fontawesome';\nimport apolloClient from '../../apollo';\nimport { brandQuery } from '../../apollo/brand';\nimport { useSelector } from 'react-redux';\nimport Moment from 'react-moment';\nimport { toast } from 'react-toastify';\nimport { errorImageSrc, renderImage } from '../../utility/images';\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\nimport { viewPermission } from '../../utility/utility';\nimport config from '../../config/config';\n\n\n\nconst ListBrand = () => {\n    viewPermission('manufacture');\n    const [brand, setBrand] = useState({ data: [], loading: true, error: '' })\n    const [filteredBrand, setFilteredBrand] = useState([]);\n    const [isFilter, setIsFilter] = useState(false)\n    const token = useSelector(state => state.auth.token);\n\n    useEffect(() => {\n        apolloClient.query({\n            query: brandQuery.GET_ALL_BRAND,\n            context: {\n                headers: {\n                    TENANTID: process.env.REACT_APP_TENANTID,\n                    Authorization: token\n                }\n            }\n        }).then(res => {\n            const data = res?.data?.getAllBrands\n            setBrand(s => ({ ...s, data: data?.data, error: '' }))\n        }).catch(err => {\n            setBrand(s => ({ ...s, error: 'Something went Wrong.!! ' }))\n        }).finally(() => {\n            setBrand(s => ({ ...s, loading: false }))\n        })\n\n    }, []);\n\n    const handleStatusChange = (record, checked) => {\n        const variables = { data: { brand_id: record.id, brand_status: checked } }\n\n        apolloClient.mutate({\n            mutation: brandQuery.BRAND_UPDATE,\n            variables,\n            context: {\n                headers: {\n                    TENANTID: process.env.REACT_APP_TENANTID,\n                    Authorization: token\n                }\n            }\n        }).then(res => {\n            const status = res?.data?.updateBrand?.status\n            if (!status) return toast.error(res?.data?.updateBrand?.message)\n            toast.success(`${record.brand_name} Status updated.`)\n        }).catch(err => {\n            console.log(err);\n            toast.error(`Something went wrong!!`)\n        })\n\n    }\n\n    const columns = [\n        {\n            title: 'ID',\n            dataIndex: 'id',\n            key: 'id',\n            width: 120,\n            ellipsis: true,\n            sorter: (a, b) => a.id.toUpperCase() > b.id.toUpperCase() ? 1 : -1,\n        },\n        {\n            title: 'Name',\n            dataIndex: 'brand_name',\n            key: 'brand_name',\n            width: 120,\n            ellipsis: true,\n            sorter: (a, b) => a.brand_name.toUpperCase() > b.brand_name.toUpperCase() ? 1 : -1,\n        },\n        {\n            title: 'Image',\n            dataIndex: 'image',\n            key: 'image',\n            width: 150,\n            align: 'center',\n            render: (text, record) => (<LazyLoadImage effect=\"blur\" height=\"32\" src={renderImage(record.id, record.image, 'brand', '', true)} onError={errorImageSrc} onL alt={record.brand_name} />),\n        },\n        {\n            title: 'Alias',\n            dataIndex: 'brand_slug',\n            key: 'brand_slug',\n            width: 120,\n            ellipsis: true,\n            sorter: (a, b) => a.brand_slug.toUpperCase() > b.brand_slug.toUpperCase() ? 1 : -1,\n        },\n        {\n            title: 'Description',\n            dataIndex: 'brand_description',\n            key: 'brand_description',\n            width: 200,\n            ellipsis: true\n        },\n        {\n            title: 'Status',\n            dataIndex: 'brand_status',\n            key: 'brand_status',\n            align: 'right',\n            width: 120,\n            render: (text, record) => (\n                <Switch defaultChecked={text} title='Status' onChange={checked => handleStatusChange(record, checked)} />\n            ),\n            filters: [\n                {\n                    text: \"Enable\",\n                    value: true,\n                },\n                {\n                    text: 'Disable',\n                    value: false,\n                }\n            ],\n            onFilter: (value, record) => record.brand_status === value,\n            sorter: (a, b) => a.brand_status - b.brand_status,\n        },\n        {\n            title: 'Date',\n            dataIndex: 'createdAt',\n            key: 'createdAt',\n            align: 'center',\n            width: 120,\n            render: (text, record) => (\n                <span className={\"status-text\"}>{<Moment format=\"DD MMMM YYYY\">{parseInt(text)}</Moment>}</span>\n            )\n        },\n        {\n            title: 'Action',\n            dataIndex: 'action',\n            align: 'right',\n            key: 'action',\n            width: 80,\n            render: (text, record) => (\n                <>\n                    <Link to={`/admin/brand/edit?id=${record.id}`}>\n                        <FontAwesome name=\"edit\" />\n                    </Link>\n                </>\n            ),\n        },\n    ]\n\n    const onChangeSearch = e => {\n        const value = e.target.value\n        setIsFilter(value)\n        setFilteredBrand(brand.data.filter(brand => (brand?.brand_name + brand?.brand_slug + brand?.id).toLowerCase().includes(value.toLowerCase())))\n    }\n\n\n    return (\n        <>\n            <PageHeader\n                title=\"Manufacture\"\n                buttons={[\n                    <div key=\"1\" className=\"page-header-actions\">\n                        <Link to=\"/admin/brand/add\">\n                            <Button size=\"small\" title=\"Add Manufacture\" type=\"primary\">\n                                <FeatherIcon icon=\"plus\" />\n                            </Button>\n                        </Link>\n                    </div>\n                ]}\n            />\n            <Main>\n                <Row gutter={25}>\n                    <Col sm={24} xs={24}>\n                        <Cards headless>\n                            {brand.loading ?\n                                <div className=\"spin\">\n                                    <Spin />\n                                </div>\n                                :\n                                brand.error ?\n                                    <p>{brand.error}</p>\n                                    :\n                                    <>\n                                        <Input placeholder=\"Search in Manufacture...\" prefix={<SearchOutlined />} onChange={onChangeSearch} />\n                                        <br /><br />\n\n                                        <span className={\"psp_list\"} >\n                                            <Table\n                                                className=\"table-responsive\"\n                                                columns={columns}\n                                                pagination={{\n                                                    defaultPageSize: config.BRAND_PER_PAGE,\n                                                    total: isFilter ? brand?.data?.length : brand?.data?.length,\n                                                    showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} items`,\n                                                }}\n                                                rowKey={'id'}\n                                                size=\"small\"\n                                                dataSource={isFilter ? filteredBrand : brand.data}\n                                                rowClassName={(record, index) => (index % 2 === 0 ? \"\" : \"altTableClass\")}\n                                            />\n                                        </span>\n                                    </>\n                            }\n\n                        </Cards>\n                    </Col>\n                </Row>\n            </Main>\n        </>\n    );\n};\n\nexport default ListBrand;\n","import { gql } from \"@apollo/client\";\n\nexport const brandQuery = {\n  GET_ALL_BRAND: gql`\n  query getAllBrands {\n  getAllBrands {\n    message\n    status\n    data {\n      id\n      brand_name\n      brand_slug\n      brand_description\n      brand_status\n      image\n      brand_sort_order\n      createdAt\n    }\n  }\n}`,\n  GET_ALL_BRAND_WITH_CATEGORY: gql`\nquery getAllBrands {\n  getAllBrands {\n    message\n    status\n    data {\n      id\n      brand_name\n      brand_slug\n      brand_status\n      brand_description\n      image\n      createdAt\n      updatedAt\n      categories {\n        id\n        cat_name\n        cat_slug\n        cat_status\n        subcategories {\n          id\n          cat_name\n          cat_slug\n          cat_status\n          subsubcategories {\n            id\n            cat_name\n            cat_slug\n            cat_status\n          }\n        }\n      }\n    }\n  }\n}\n\n`,\n  GET_CATEGORIES: gql`\n  query getParentCategories {\n    getParentCategories {\n      message\n      status\n      categories {\n        id\n        cat_name\n      }\n    }\n  }\n`,\n  GET_SINGLE_BRAND: gql`\n  query getSingleBrand($query: GetSingleBrandInput){\n    getSingleBrand(query: $query) {\n      message\n      status\n      data {\n        brand_name\n        brand_description\n        brand_status\n        brand_sort_order\n        image\n        categories {\n          id\n          cat_name\n        }\n      }\n    }\n  }\n`,\n  BRAND_UPDATE: gql`\n  mutation updateBrand($data: UpdateBrandInput, $file:Upload){\n    updateBrand(data:$data, file: $file){\n      message\n      status\n    }\n  }`,\n  BRAND_UPDATE_WI: gql`\n  mutation updateBrand($data: UpdateBrandInput){\n    updateBrand(data:$data){\n      message\n      status\n    }\n  }`,\n  BRAND_ADD: gql`\n    mutation createBrand($data: BrandCreateInput, $file:Upload) {\n      createBrand(data: $data, file:$file) {\n        message\n        status\n      }\n    }`,\n  BRAND_ADD_WI: gql`\n      mutation createBrand($data: BrandCreateInput) {\n        createBrand(data: $data) {\n          message\n          status\n        }\n     }`\n}\n"],"sourceRoot":""}