{"version":3,"sources":["container/products/quote/QuoteList.js","apollo/quote/index.js"],"names":["RangePicker","checkPoint","QuoteList","viewPermission","useState","data","loading","error","quote","setQuote","isFilter","setIsFilter","token","useSelector","state","auth","searchButton","setSearchButton","isLoading","quoteStatus","setQuoteStatus","dateRange","setChangeDateRange","searchDisable","setSearchDisable","status","startDate","endDate","minAmount","maxAmount","searchQuery","filterDate","setFilterDate","useEffect","apolloClient","query","quoteQuery","GET_ALL_QUOTE_STATUS","context","headers","TENANTID","process","Authorization","Cookies","get","then","res","getQuoteStatusList","length","columns","title","dataIndex","key","width","ellipsis","render","text","record","quotedby","last_name","sorter","a","b","email","grand_total","align","val","style","borderRadius","padding","note","className","format","parseInt","to","id","margin","color","name","returnMomentDateRange","start","finish","moment","buttons","size","type","onClick","icon","gutter","sm","xs","headless","span","height","placeholder","prefix","value","onChange","e","persist","target","s","disabled","GET_ALL_QUOTE","variables","statuses","quoteEntryStartDate","quoteEntryEndDate","parseFloat","getSubmittedQuoteList","catch","err","finally","marginBottom","mode","onDeselect","prev","filter","item","onSelect","concat","options","map","label","slug","allowClear","picker","_d","Group","compact","pagination","defaultPageSize","config","QUOTE_PER_PAGE","total","showTotal","range","rowKey","dataSource","gql","GET_SINGLE_QUOTE","REMOVE_QUOTE_ITEM","SUBMIT_QUOTE"],"mappings":"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","file":"static/js/47.b60c1cc4.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { RetweetOutlined, SearchOutlined } from '@ant-design/icons';\nimport { Row, Col, Spin, Input, Table, Button, Select, DatePicker } from 'antd';\nimport { PageHeader } from '../../../components/page-headers/page-headers';\nimport { Main } from '../../styled';\nimport { Cards } from '../../../components/cards/frame/cards-frame';\nimport { Link } from 'react-router-dom';\nimport FontAwesome from 'react-fontawesome';\nimport apolloClient from '../../../apollo';\nimport { quoteQuery } from '../../../apollo/quote';\nimport { useSelector } from 'react-redux';\nimport Moment from 'react-moment';\nimport FeatherIcon from 'feather-icons-react';\nconst { RangePicker } = DatePicker;\nimport { viewPermission } from '../../../utility/utility';\nimport config from '../../../config/config';\nimport Cookies from 'js-cookie';\nimport moment from 'moment';\n\nlet checkPoint = false;\n\nconst QuoteList = () => {\n  viewPermission('quote');\n  const [quote, setQuote] = useState({ data: [], loading: false, error: '' });\n  const [isFilter, setIsFilter] = useState(false);\n  const token = useSelector(state => state.auth.token);\n  const [searchButton, setSearchButton] = useState(false);\n  const [quoteStatus, setQuoteStatus] = useState({ data: [], isLoading: true });\n  const [dateRange, setChangeDateRange] = useState(null);\n  const [searchDisable, setSearchDisable] = useState(true);\n  const [filterDate, setFilterDate] = useState({\n    status: [],\n    startDate: '',\n    endDate: '',\n    minAmount: '',\n    maxAmount: '',\n    searchQuery: ''\n  });\n\n\n  // Load Quote Status List\n  useEffect(() => {\n    apolloClient\n      .query({\n        query: quoteQuery.GET_ALL_QUOTE_STATUS,\n        context: {\n          headers: {\n            TENANTID: process.env.REACT_APP_TENANTID,\n            Authorization: Cookies.get('psp_t'),\n          },\n        },\n      })\n      .then(res => {\n        const data = res?.data?.getQuoteStatusList;\n        if (!data.status) return;\n        setQuoteStatus({ data: data.data, isLoading: false });\n      });\n\n  }, []);\n\n\n  useEffect(() => {\n    if (checkPoint) {\n      if (filterDate.status.length > 0 ||\n        filterDate.searchQuery !== '' ||\n        filterDate.endDate !== '' ||\n        filterDate.startDate !== '' ||\n        filterDate.minAmount !== '' ||\n        filterDate.maxAmount !== '') {\n        setSearchDisable(false)\n      } else {\n        setSearchDisable(true)\n      }\n    }\n    checkPoint = true;\n  }, [filterDate]);\n\n\n  const searchQuoteAdmin = () => {\n    setQuote(s => ({ ...s, loading: true }));\n    // return\n    apolloClient\n      .query({\n        query: quoteQuery.GET_ALL_QUOTE,\n        variables: {\n          query: {\n            searchQuery: filterDate.searchQuery ?? '',\n            statuses: filterDate.status ?? null,\n            quoteEntryStartDate: filterDate.startDate ?? '',\n            quoteEntryEndDate: filterDate.endDate ?? '',\n            minAmount: parseFloat(filterDate.minAmount) ?? null,\n            maxAmount: parseFloat(filterDate.maxAmount) ?? null\n          }\n        },\n        context: {\n          headers: {\n            TENANTID: process.env.REACT_APP_TENANTID,\n            Authorization: token,\n          },\n        },\n      })\n      .then(res => {\n        const data = res?.data?.getSubmittedQuoteList;\n        if (!data?.status) return;\n        setQuote(data);\n      })\n      .catch(err => {\n        setQuote(s => ({ ...s, error: 'Something went Wrong.!! ' }));\n      })\n      .finally(() => {\n        setQuote(s => ({ ...s, loading: false }));\n        setSearchButton(!searchButton)\n      });\n  }\n\n\n  const columns = [\n    {\n      title: 'Quoted By',\n      dataIndex: ['quotedby', 'first_name'],\n      key: 'first_name',\n      width: 100,\n      ellipsis: true,\n      render: (text, record) => `${text} ${record.quotedby.last_name}`\n    },\n    {\n      title: 'Email',\n      dataIndex: ['quotedby', 'email'],\n      key: 'email',\n      width: 150,\n      ellipsis: true,\n      sorter: (a, b) => (a.email > b.email ? 1 : -1),\n    },\n    {\n      title: 'Total',\n      dataIndex: 'grand_total',\n      key: 'grand_total',\n      width: 100,\n      ellipsis: true,\n      sorter: (a, b) => (a.grand_total > b.grand_total ? 1 : -1),\n    },\n    {\n      title: 'Status',\n      dataIndex: 'status',\n      key: 'status',\n      align: 'left',\n      width: 150,\n      render: val => (\n        <span\n          style={{\n            borderRadius: '.5em',\n            padding: '.5em 2.5em',\n          }}\n        >\n          {val}\n        </span>\n      ),\n      sorter: (a, b) => (a.status > b.status ? 1 : -1),\n    },\n    {\n      title: 'Note',\n      dataIndex: 'note',\n      key: 'note',\n      width: 250,\n      ellipsis: true,\n      sorter: (a, b) => (a.note > b.note ? 1 : -1),\n    },\n    {\n      title: 'Date',\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      width: 120,\n      align: 'center',\n      render: (text, record) => (\n        <span className={'status-text'}>{<Moment format=\"DD-MMM-YYYY\">{parseInt(text)}</Moment>}</span>\n      ),\n    },\n    {\n      title: 'Action',\n      dataIndex: 'action',\n      align: 'right',\n      key: 'action',\n      width: 100,\n      render: (text, record) => (\n        <>\n          <Link to={`/admin/products/quote/edit/${record.id}`} style={{ margin: '.5em', color: \"#096dd9\" }} >\n            <FontAwesome name=\"edit\" style={{ color: \"#5F63F2\" }} />\n          </Link>\n        </>\n      ),\n    },\n  ];\n\n\n  const onDateRangeChange = dateRange => {\n    if (dateRange) {\n      setFilterDate(s => ({ ...s, startDate: dateRange[0]._d ?? '', endDate: dateRange[1]._d ?? '' }))\n      setChangeDateRange(returnMomentDateRange(dateRange[0], dateRange[1]));\n    } else {\n      setChangeDateRange(null);\n    }\n  };\n  const returnMomentDateRange = (start, finish) => {\n    return [moment(start, \"YYYY-MM-DD\"), moment(finish, \"YYYY-MM-DD\")];\n  };\n\n  return (\n    <>\n      <PageHeader\n        title=\"Quote List\"\n        buttons={[\n          <div key=\"1\" className=\"page-header-actions\">\n            <Button size=\"small\" type=\"white\" onClick={() => setIsFilter(state => !state)}>\n              <FeatherIcon icon=\"filter\" />\n              Filter\n            </Button>\n            <Button size=\"small\" type=\"white\" onClick={() => {\n              setChangeDateRange(null)\n              setSearchDisable(true)\n              setFilterDate({\n                status: [],\n                startDate: '',\n                endDate: '',\n                minAmount: '',\n                maxAmount: '',\n                searchQuery: ''\n              })\n            }}>\n              <RetweetOutlined />\n              Reset Filter\n            </Button>\n          </div>,\n        ]}\n      />\n      <Main>\n        <Row gutter={25}>\n          <Col sm={24} xs={24}>\n            <Cards headless>\n              {quote.loading ? (\n                <div className=\"spin\">\n                  <Spin />\n                </div>\n              ) : quote.error ? (\n                <p>{quote.error}</p>\n              ) : (\n                <>\n                  <Row gutter={25}>\n                    <Col span={18}>\n                      <Input\n                        style={{ height: \"42px\" }}\n                        placeholder=\"Search Quotes...\"\n                        prefix={<SearchOutlined />}\n                        value={filterDate?.searchQuery}\n                        onChange={e => {\n                          e.persist()\n                          const value = e.target.value;\n                          setFilterDate(s => ({ ...s, searchQuery: value }));\n                        }}\n                      />\n                    </Col>\n                    <Col span={6}>\n                      <Button\n                        size=\"large\"\n                        type=\"primary\"\n                        disabled={searchDisable}\n                        onClick={searchQuoteAdmin}\n                      >\n                        Search\n                      </Button>\n                    </Col>\n                  </Row>\n                  <br />\n                  {isFilter && (\n                    <div style={{ marginBottom: '2.5em' }}>\n                      <Row gutter={16}>\n                        <Col span={8}>\n                          Status: <br />\n                          <Select\n                            style={{ width: '100%' }}\n                            placeholder=\"Select status\"\n                            size=\"middle\"\n                            mode=\"multiple\"\n                            value={filterDate?.status}\n                            onDeselect={(val) => setFilterDate(prev => ({ ...prev, status: prev.status.filter(item => item !== val) }))}\n                            onSelect={val => {\n                              setFilterDate(s => ({ ...s, status: filterDate.status.concat(val) }));\n                            }}\n                            options={quoteStatus?.data.map(item => ({\n                              label: item.name,\n                              value: item.slug,\n                            }))}\n                          />\n                        </Col>\n\n                        <Col span={8}>\n                          Date: <br />\n                          <RangePicker\n                            style={{ height: '40px', width: '100%' }}\n                            size=\"middle\"\n                            allowClear={true}\n                            picker=\"date\"\n                            value={dateRange !== \"\" ? dateRange : \"\"}\n                            onChange={onDateRangeChange}\n                          />\n                        </Col>\n\n                        <Col span={8}>\n                          Amount: <br />\n                          <Input.Group compact size=\"default\">\n                            <Input\n                              type=\"text\"\n                              placeholder=\"Min Amount\"\n                              style={{ width: '50%', height: '40px' }}\n                              value={filterDate?.minAmount ?? ''}\n                              onChange={e => {\n                                e.persist()\n                                setFilterDate(s => ({ ...s, minAmount: e?.target?.value }));\n                              }}\n                            />\n                            <Input\n                              type=\"text\"\n                              placeholder=\"Max Ampunt\"\n                              style={{ width: '50%', height: '40px' }}\n                              value={filterDate?.maxAmount ?? ''}\n                              onChange={e => {\n                                e.persist()\n                                setFilterDate(s => ({ ...s, maxAmount: e?.target?.value }));\n                              }}\n                            />\n                          </Input.Group>\n                        </Col>\n                      </Row>\n                    </div>\n                  )}\n\n                  <span className={'psp_list'}>\n                    <Table\n                      className=\"table-responsive\"\n                      columns={columns}\n                      pagination={{\n                        defaultPageSize: config.QUOTE_PER_PAGE,\n                        total: quote.data ? quote.data.length : 0,\n                        showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} items`,\n                      }}\n                      rowKey={'id'}\n                      size=\"small\"\n                      dataSource={quote.data ? quote.data : []}\n                    />\n                  </span>\n                </>\n              )}\n            </Cards>\n          </Col>\n        </Row>\n      </Main>\n    </>\n  );\n};\n\nexport default QuoteList;\n","import { gql } from '@apollo/client';\n\nexport const quoteQuery = {\n  GET_ALL_QUOTE_STATUS: gql`\n    query getQuoteStatusList {\n    getQuoteStatusList {\n      message\n      status\n      tenant_id\n      data {\n        id\n        name\n        slug\n        status\n      }\n    }\n  }`,\n  GET_ALL_QUOTE: gql`\n    query getSubmittedQuoteList($query:SubmittedQuoteListInput) {\n      getSubmittedQuoteList(query:$query) {\n        message\n        status\n        data {\n          id\n          status\n          grand_total\n          note\n          createdAt\n          updatedAt\n          quotedby {\n            id\n            first_name\n            last_name\n            email\n          }\n        }\n      }\n    }\n  `,\n  GET_SINGLE_QUOTE: gql`\n    query getSingleSubmittedQuote($query: GetSingleSubmittedQuoteInput) {\n      getSingleSubmittedQuote(query: $query) {\n        message\n        status\n        data {\n          id\n          status\n          grand_total\n          note\n          createdAt\n          submittedquoteitems {\n            id\n            submittedquote_id\n            price\n            quantity\n            total_price\n            product {\n              id\n              prod_name\n              prod_slug\n              prod_sku\n              prod_partnum\n              createdAt\n            }\n            createdAt\n          }\n        }\n      }\n    }\n  `,\n  REMOVE_QUOTE_ITEM: gql`\n    mutation quoteItemDelete($data: QuoteItemDeleteInput) {\n      quoteItemDelete(data: $data) {\n        message\n        status\n      }\n    }\n  `,\n  SUBMIT_QUOTE: gql`\n    mutation updateSubmittedQuote($data: SubmittedQuoteUpdateInput) {\n      updateSubmittedQuote(data: $data) {\n        message\n        status\n      }\n    }\n  `,\n};\n"],"sourceRoot":""}