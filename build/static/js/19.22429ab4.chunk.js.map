{"version":3,"sources":["container/products/quote/EditQuote.js","apollo/quote/index.js"],"names":["EditQuote","viewPermission","params","useParams","history","useHistory","token","useSelector","state","auth","useState","isLoading","setIsLoading","useForm","form","quoteData","setQuoteData","data","loading","error","singleQuote","setSingleQuote","quoteStatus","setQuoteStatus","total_price","setTotalPrice","useEffect","apolloClient","query","quoteQuery","GET_SINGLE_QUOTE","variables","id","parseInt","context","headers","TENANTID","process","Authorization","then","res","getSingleSubmittedQuote","status","newQuiteData","submittedquoteitems","map","item","price","quantity","prod_name","product","product_id","prod_sku","prod_partnum","setFieldsValue","catch","err","console","log","GET_ALL_QUOTE_STATUS","Cookies","get","getQuoteStatusList","column","title","dataIndex","key","width","ellipsis","render","text","record","type","min","defaultValue","placeholder","onChange","e","persist","prevState","target","value","parseFloat","onClick","filter","size","icon","forEach","gutter","sm","xs","headless","className","style","name","onFinish","values","new_product","products","mutate","mutation","SUBMIT_QUOTE","refetchQueries","GET_ALL_QUOTE","updateSubmittedQuote","toast","message","success","setTimeout","push","onFinishFailed","errorInfo","Item","label","options","slug","columns","pagination","rowKey","dataSource","display","justifyContent","marginTop","marginBottom","total","note","htmlType","raised","to","marginLeft","gql","REMOVE_QUOTE_ITEM"],"mappings":"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","file":"static/js/19.22429ab4.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Row, Col, Form, Input, Spin, Table, Select } from 'antd';\nimport { PageHeader } from '../../../components/page-headers/page-headers';\nimport { Main } from '../../../container/styled';\nimport { Cards } from '../../../components/cards/frame/cards-frame';\nimport { Button } from '../../../components/buttons/buttons';\nimport { Link, useHistory, useParams } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport apolloClient from '../../../apollo';\nimport FeatherIcon from 'feather-icons-react';\nimport { viewPermission } from '../../../utility/utility';\nimport 'react-lazy-load-image-component/src/effects/blur.css';\nimport { quoteQuery } from '../../../apollo/quote';\nimport Cookies from 'js-cookie';\n\nconst EditQuote = () => {\n  viewPermission('quote');\n  const params = useParams();\n  const history = useHistory();\n  const token = useSelector(state => state.auth.token);\n  const [isLoading, setIsLoading] = useState(false);\n  const [form] = Form.useForm();\n  const [quoteData, setQuoteData] = useState([]);\n  const [singleQuote, setSingleQuote] = useState({ data: {}, loading: true, error: '' });\n  const [quoteStatus, setQuoteStatus] = useState({ data: [], isLoading: true });\n  const [total_price, setTotalPrice] = useState(0);\n\n  useEffect(() => {\n    apolloClient\n      .query({\n        query: quoteQuery.GET_SINGLE_QUOTE,\n        variables: {\n          query: {\n            id: parseInt(params.id),\n          },\n        },\n        context: {\n          headers: {\n            TENANTID: process.env.REACT_APP_TENANTID,\n            Authorization: token,\n          },\n        },\n      })\n      .then(res => {\n        const data = res?.data?.getSingleSubmittedQuote;\n        if (!data.status) return;\n        setSingleQuote({ data: data?.data, loading: false, error: '' });\n        const newQuiteData = data?.data?.submittedquoteitems.map(item => {\n          return {\n            id: item.id,\n            price: item.price,\n            quantity: item.quantity,\n            total_price: item.total_price,\n            prod_name: item.product.prod_name,\n            product_id: item.product.id,\n            prod_sku: item.product.prod_sku,\n            prod_partnum: item.product.prod_partnum,\n          };\n        });\n        setQuoteData(newQuiteData);\n        form.setFieldsValue({\n          status: data?.data?.status,\n        });\n      })\n      .catch(err => {\n        console.log(err);\n        setSingleQuote({ data: {}, loading: false, error: 'Something went wrong' });\n      });\n\n\n    apolloClient\n      .query({\n        query: quoteQuery.GET_ALL_QUOTE_STATUS,\n        context: {\n          headers: {\n            TENANTID: process.env.REACT_APP_TENANTID,\n            Authorization: Cookies.get('psp_t'),\n          },\n        },\n      })\n      .then(res => {\n        const data = res?.data?.getQuoteStatusList;\n        if (!data.status) return;\n        setQuoteStatus({ data: data.data, isLoading: false });\n      });\n\n\n  }, []);\n\n  //Submit Form\n  const handleSubmit = values => {\n    const new_product = quoteData.map(item => {\n      return {\n        product_id: item.product_id,\n        price: item.price,\n        quantity: item.quantity,\n      };\n    });\n\n    setIsLoading(true);\n    const data = { status: values.status, id: singleQuote?.data?.id, products: new_product };\n    apolloClient\n      .mutate({\n        mutation: quoteQuery.SUBMIT_QUOTE,\n        variables: { data },\n        context: {\n          headers: {\n            TENANTID: process.env.REACT_APP_TENANTID,\n            Authorization: token,\n          },\n        },\n        refetchQueries: [\n          {\n            query: quoteQuery.GET_ALL_QUOTE,\n            context: {\n              headers: {\n                TENANTID: process.env.REACT_APP_TENANTID,\n                Authorization: token,\n              },\n            },\n          },\n          {\n            query: quoteQuery.GET_SINGLE_QUOTE,\n            variables: {\n              query: {\n                id: parseInt(params.id),\n              },\n            },\n            context: {\n              headers: {\n                TENANTID: process.env.REACT_APP_TENANTID,\n                Authorization: token,\n              },\n            },\n          },\n        ],\n      })\n      .then(res => {\n        const data = res?.data?.updateSubmittedQuote;\n        if (!data.status) toast.error(data.message);\n        setIsLoading(false);\n        toast.success(data.message);\n        setTimeout(() => {\n          history.push('/admin/products/quote');\n        }, 2000);\n      })\n      .catch(err => {\n        toast.error('Something Went wrong !!!');\n      });\n  };\n\n  // List For Table Column\n  const column = [\n    {\n      title: 'Name',\n      dataIndex: 'prod_name',\n      key: 'prod_name',\n      width: 400,\n      ellipsis: true,\n    },\n    {\n      title: 'SKU',\n      dataIndex: 'prod_sku',\n      key: 'prod_sku',\n      width: 150,\n    },\n    {\n      title: 'Part Number',\n      dataIndex: 'prod_partnum',\n      key: 'prod_partnum',\n      width: 150,\n    },\n    {\n      title: 'Price',\n      dataIndex: 'price',\n      key: 'price',\n      width: 100,\n      render: (text, record) => (\n        <Input\n          type=\"number\"\n          min={0}\n          defaultValue={record.price}\n          placeholder=\"Price\"\n          onChange={e => {\n            e.persist();\n            setQuoteData(prevState =>\n              prevState.map(item => {\n                if (item.id === record.id) {\n                  return {\n                    ...item,\n                    price: e.target.value,\n                  };\n                } else {\n                  return item;\n                }\n              }),\n            );\n          }}\n        />\n      ),\n    },\n    {\n      title: 'Quantity',\n      dataIndex: 'quantity',\n      key: 'quantity',\n      width: 100,\n      render: (text, record) => (\n        <Input\n          defaultValue={record.quantity}\n          type=\"number\"\n          min={0}\n          placeholder=\"Quantity\"\n          onChange={e => {\n            e.persist();\n            setQuoteData(prevState =>\n              prevState.map(item => {\n                if (item.id === record.id) {\n                  return {\n                    ...item,\n                    quantity: e.target.value,\n                  };\n                } else {\n                  return item;\n                }\n              }),\n            );\n          }}\n        />\n      ),\n    },\n    {\n      title: 'Total Price',\n      dataIndex: 'total_price',\n      key: 'total_price',\n      width: 150,\n      render: (text, record) => `$ ${parseInt(record.quantity) * parseFloat(record.price)}`,\n    },\n    {\n      title: 'Action',\n      dataIndex: 'action',\n      key: 'action',\n      render: (text, record) => (\n        <Button\n          onClick={() => setQuoteData(prevState => prevState.filter(value => value.product_id !== record.product_id))}\n          size=\"small\"\n          title=\"Remove\"\n          type=\"danger\"\n        >\n          <FeatherIcon icon=\"minus\" />\n        </Button>\n      ),\n    },\n  ];\n\n  // Adding new row on table\n  // const addNewRow = () => {\n  //   const newData = {\n  //     id: new Date().getTime(),\n  //     price: '',\n  //     quantity: '',\n  //     total_price: '',\n  //     prod_name: '',\n  //     prod_sku: '',\n  //     prod_partnum: '',\n  //   };\n  //   setQuoteData(prevState => [...prevState, newData]);\n  // };\n\n  useEffect(() => {\n    let price = 0;\n    quoteData.forEach(item => {\n      price += parseInt(item.quantity) * parseFloat(item.price);\n    });\n    setTotalPrice(price);\n  }, [quoteData]);\n\n  return (\n    <>\n      <PageHeader title={`Manage Quote | Edit Quote ${singleQuote?.data?.id ? `(${singleQuote?.data?.id})` : ''}`} />\n\n      <Main>\n        <Row gutter={25}>\n          <Col sm={24} xs={24}>\n            <Cards headless>\n              {singleQuote?.loading ? (\n                <div className=\"spin\">\n                  <Spin />\n                </div>\n              ) : (\n                <Form\n                  style={{ width: '100%' }}\n                  form={form}\n                  name=\"edit-quote\"\n                  onFinish={handleSubmit}\n                  onFinishFailed={errorInfo => console.log('form error info:\\n', errorInfo)}\n                // labelCol={{ span: 4 }}\n                >\n                  <Form.Item name=\"status\" label=\"Status\">\n                    <Select\n                      defaultValue={singleQuote?.data?.status}\n                      style={{ width: '180px' }}\n                      options={quoteStatus?.data.map(item => ({\n                        label: item.name,\n                        value: item.slug,\n                      }))}\n                    />\n                  </Form.Item>\n\n                  <Table\n                    className=\"table-responsive\"\n                    columns={column}\n                    pagination={false}\n                    rowKey={'banner_id'}\n                    size=\"small\"\n                    dataSource={quoteData}\n                  />\n\n                  <div\n                    style={{\n                      display: 'flex',\n                      justifyContent: 'space-between',\n                      marginTop: '10px',\n                      marginBottom: '10px',\n                    }}\n                  >\n                    <Table\n                      className=\"table-responsive\"\n                      style={{ width: '100%', marginTop: '20px', marginBottom: '20px' }}\n                      columns={[\n                        { key: 'total', title: 'Total', dataIndex: 'total', render: text => '$ ' + text, width: 100 },\n                        { key: 'note', title: 'Note', dataIndex: 'note', width: 300 },\n                      ]}\n                      dataSource={[\n                        {\n                          key: 1,\n                          total: total_price,\n                          note: singleQuote?.data?.note,\n                        },\n                      ]}\n                      pagination={false}\n                    />\n                    {/* <Button onClick={addNewRow} size=\"small\" title=\"Add Banner\" htmlType=\"button\" type=\"primary\">\n                      <FeatherIcon icon=\"plus\" />\n                    </Button> */}\n                  </div>\n\n                  <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\n                    <Form.Item>\n                      <Button loading={isLoading} size=\"default\" htmlType=\"submit\" type=\"primary\" raised>\n                        {isLoading ? 'Processing' : 'Save'}\n                      </Button>\n                      <Link to=\"/admin/products/quote\">\n                        <Button style={{ marginLeft: 10 }} type=\"light\" size=\"default\">\n                          Cancel\n                        </Button>\n                      </Link>\n                    </Form.Item>\n                  </div>\n\n\n\n\n                </Form>\n              )}\n            </Cards>\n          </Col>\n        </Row>\n      </Main>\n    </>\n  );\n};\n\nexport default EditQuote;\n","import { gql } from '@apollo/client';\n\nexport const quoteQuery = {\n  GET_ALL_QUOTE_STATUS: gql`\n    query getQuoteStatusList {\n    getQuoteStatusList {\n      message\n      status\n      tenant_id\n      data {\n        id\n        name\n        slug\n        status\n      }\n    }\n  }`,\n  GET_ALL_QUOTE: gql`\n    query getSubmittedQuoteList($query:SubmittedQuoteListInput) {\n      getSubmittedQuoteList(query:$query) {\n        message\n        status\n        data {\n          id\n          status\n          grand_total\n          note\n          createdAt\n          updatedAt\n          quotedby {\n            id\n            first_name\n            last_name\n            email\n          }\n        }\n      }\n    }\n  `,\n  GET_SINGLE_QUOTE: gql`\n    query getSingleSubmittedQuote($query: GetSingleSubmittedQuoteInput) {\n      getSingleSubmittedQuote(query: $query) {\n        message\n        status\n        data {\n          id\n          status\n          grand_total\n          note\n          createdAt\n          submittedquoteitems {\n            id\n            submittedquote_id\n            price\n            quantity\n            total_price\n            product {\n              id\n              prod_name\n              prod_slug\n              prod_sku\n              prod_partnum\n              createdAt\n            }\n            createdAt\n          }\n        }\n      }\n    }\n  `,\n  REMOVE_QUOTE_ITEM: gql`\n    mutation quoteItemDelete($data: QuoteItemDeleteInput) {\n      quoteItemDelete(data: $data) {\n        message\n        status\n      }\n    }\n  `,\n  SUBMIT_QUOTE: gql`\n    mutation updateSubmittedQuote($data: SubmittedQuoteUpdateInput) {\n      updateSubmittedQuote(data: $data) {\n        message\n        status\n      }\n    }\n  `,\n};\n"],"sourceRoot":""}