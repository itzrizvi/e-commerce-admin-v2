{"version":3,"sources":["container/productAvailabilityStatus/AddProductAvailabilityStatus.js","apollo/productAvailabilityStatus/index.js"],"names":["AddProductAvailabilityStatus","viewPermission","history","useHistory","token","useSelector","state","auth","useState","loading","setLoading","useForm","form","title","gutter","sm","xs","headless","style","width","name","onFinish","values","apolloClient","mutate","mutation","productAvailabilityStatusQuery","AVAILABILITY_STATUS_ADD","variables","refetchQueries","query","GET_ALL_AVAILABILITY_STATUS","context","headers","TENANTID","process","Authorization","then","res","data","addProductAvailabilityStatus","status","toast","error","setTimeout","push","success","message","catch","err","finally","onFinishFailed","errorInfo","console","log","labelCol","span","Item","rules","required","max","label","placeholder","display","justifyContent","size","htmlType","type","raised","to","marginLeft","gql","AVAILABILITY_STATUS_UPDATE","GET_SINGLE_AVAILABILITY_STATUS"],"mappings":"yTAyGeA,UA5FsB,WACnCC,YAAe,+BACf,IAAMC,EAAUC,uBACVC,EAAQC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,SAC9C,EAA8BI,oBAAS,GAAM,mBAAtCC,EAAO,KAAEC,EAAU,KAE1B,EAAe,IAAKC,UAAbC,EAAsB,iBAAlB,GA0CX,OACE,oCACE,kBAAC,IAAU,CAACC,MAAM,oCAElB,kBAAC,IAAI,KACH,uBAAKC,OAAQ,IACX,uBAAKC,GAAI,GAAIC,GAAI,IACf,kBAAC,IAAK,CAACC,UAAQ,GACb,uBACEC,MAAO,CAAEC,MAAO,QAChBP,KAAMA,EACNQ,KAAK,+BACLC,SAnDO,SAAAC,GACnBZ,GAAW,GACXa,IACGC,OAAO,CACNC,SAAUC,IAA+BC,wBACzCC,UAAW,CAAER,KAAME,EAAOF,MAC1BS,eAAgB,CACd,CACEC,MAAOJ,IAA+BK,4BACtCC,QAAS,CACPC,QAAS,CACPC,SAAUC,SACVC,cAAehC,KAIrB,CAAC,oCAEH4B,QAAS,CACPC,QAAS,CACPC,SAAUC,SACVC,cAAehC,MAIpBiC,MAAK,SAAAC,GAAQ,IAAD,EACLC,EAAU,OAAHD,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKC,YAAI,WAAN,EAAH,EAAWC,6BACxB,KAAS,OAAJD,QAAI,IAAJA,OAAI,EAAJA,EAAME,QAAQ,OAAOC,IAAMC,MAAM,2BACtCC,YAAW,WACT1C,EAAQ2C,KAAK,6CACZ,KACHH,IAAMI,QAAY,OAAJP,QAAI,IAAJA,OAAI,EAAJA,EAAMQ,YAErBC,OAAM,SAAAC,GACLP,IAAMC,MAAM,8BAEbO,SAAQ,kBAAMxC,GAAW,OAgBhByC,eAAgB,SAAAC,GAAS,OAAIC,QAAQC,IAAI,qBAAsBF,IAC/DG,SAAU,CAAEC,KAAM,IAElB,sBAAMC,KAAI,CACRC,MAAO,CAAC,CAAEC,UAAU,EAAMC,IA5DxB,GA4DwCb,QAAS,kDACnD3B,KAAK,OACLyC,MAAM,QAEN,uBAAOC,YAAY,4CAErB,yBAAK5C,MAAO,CAAE6C,QAAS,OAAQC,eAAgB,aAC7C,sBAAMP,KAAI,KACR,kBAAC,IAAM,CAAChD,QAASA,EAASwD,KAAK,UAAUC,SAAS,SAASC,KAAK,UAAUC,QAAM,GAC7E3D,EAAU,aAAe,QAE5B,kBAAC,IAAI,CAAC4D,GAAG,2CACP,kBAAC,IAAM,CAACnD,MAAO,CAAEoD,WAAY,IAAMH,KAAK,QAAQF,KAAK,WAAS,qB,8FCxFvEvC,EAAiC,CAE9CC,wBAAyB4C,YAAG,uOAQ1BC,2BAA4BD,YAAG,gQAQ/BxC,4BAA6BwC,YAAG,qUAchCE,+BAAgCF,YAAG","file":"static/js/41.5c22c4a2.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Row, Col, Form, Input, Switch, Select, Upload, InputNumber, Spin } from 'antd';\nimport { PageHeader } from '../../components/page-headers/page-headers';\nimport { Main } from '../styled';\nimport { Cards } from '../../components/cards/frame/cards-frame';\nimport { Button } from '../../components/buttons/buttons';\nimport { Link, useHistory } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport apolloClient from '../../apollo';\nimport { viewPermission } from '../../utility/utility';\nimport { productAvailabilityStatusQuery } from '../../apollo/productAvailabilityStatus';\n\nconst AddProductAvailabilityStatus = () => {\n  viewPermission('product-availability-status');\n  const history = useHistory();\n  const token = useSelector(state => state.auth.token);\n  const [loading, setLoading] = useState(false);\n  const maxLength = 30;\n  const [form] = Form.useForm();\n\n  //Submit Form\n  const handleSubmit = values => {\n    setLoading(true);\n    apolloClient\n      .mutate({\n        mutation: productAvailabilityStatusQuery.AVAILABILITY_STATUS_ADD,\n        variables: { name: values.name },\n        refetchQueries: [\n          {\n            query: productAvailabilityStatusQuery.GET_ALL_AVAILABILITY_STATUS,\n            context: {\n              headers: {\n                TENANTID: process.env.REACT_APP_TENANTID,\n                Authorization: token,\n              },\n            },\n          },\n          ['getAllProductAvailabilityStatus'],\n        ],\n        context: {\n          headers: {\n            TENANTID: process.env.REACT_APP_TENANTID,\n            Authorization: token,\n          },\n        },\n      })\n      .then(res => {\n        const data = res?.data?.addProductAvailabilityStatus;\n        if (!data?.status) return toast.error('Something Went wrong !!');\n        setTimeout(() => {\n          history.push('/admin/product-availability-status/list');\n        }, 1000);\n        toast.success(data?.message);\n      })\n      .catch(err => {\n        toast.error('Something Went wrong !!');\n      })\n      .finally(() => setLoading(false));\n  };\n\n  return (\n    <>\n      <PageHeader title=\"Add Product Availability Status\" />\n\n      <Main>\n        <Row gutter={25}>\n          <Col sm={24} xs={24}>\n            <Cards headless>\n              <Form\n                style={{ width: '100%' }}\n                form={form}\n                name=\"addProductAvailabilityStatus\"\n                onFinish={handleSubmit}\n                onFinishFailed={errorInfo => console.log('form error info:\\n', errorInfo)}\n                labelCol={{ span: 4 }}\n              >\n                <Form.Item\n                  rules={[{ required: true, max: maxLength, message: 'Please Enter Product Availability Status Name' }]}\n                  name=\"name\"\n                  label=\"Name\"\n                >\n                  <Input placeholder=\"Enter Product Availability Status Name\" />\n                </Form.Item>\n                <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\n                  <Form.Item>\n                    <Button loading={loading} size=\"default\" htmlType=\"submit\" type=\"primary\" raised>\n                      {loading ? 'Processing' : 'Save'}\n                    </Button>\n                    <Link to=\"/admin/product-availability-status/list\">\n                      <Button style={{ marginLeft: 10 }} type=\"light\" size=\"default\">\n                        Cancel\n                      </Button>\n                    </Link>\n                  </Form.Item>\n                </div>\n              </Form>\n            </Cards>\n          </Col>\n        </Row>\n      </Main>\n    </>\n  );\n};\n\nexport default AddProductAvailabilityStatus;\n","import { gql } from \"@apollo/client\";\n\nexport const productAvailabilityStatusQuery = {\n\nAVAILABILITY_STATUS_ADD: gql`\n    mutation addProductAvailabilityStatus($name: String!){\n        addProductAvailabilityStatus(data: { name: $name }) {\n            message\n            status\n            tenant_id\n        }\n    }`,\n  AVAILABILITY_STATUS_UPDATE: gql`\n    mutation updateProductAvailabilityStatus($data: UpdateProductAvailabilityStatusInput){\n        updateProductAvailabilityStatus(data: $data) {\n            message\n            status\n            tenant_id\n        }\n    }`,\n  GET_ALL_AVAILABILITY_STATUS: gql`\n    query getAllProductAvailabilityStatus{\n        getAllProductAvailabilityStatus {\n            message\n            status\n            data {\n                id\n                name\n                slug\n                createdAt\n                updatedAt\n            }\n        }\n    }`,\n  GET_SINGLE_AVAILABILITY_STATUS: gql`\n    query getSingleProductAvailabilityStatus($query : GetSingleProductAvailabilityStatusInput){\n        getSingleProductAvailabilityStatus(query: $query) {\n            message\n            status\n            data {\n                id\n                name\n                slug\n                createdAt\n                updatedAt\n            }\n        }\n  }`\n}\n"],"sourceRoot":""}