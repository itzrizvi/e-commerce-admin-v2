{"version":3,"sources":["container/profile/settings/overview/Passwoard.js"],"names":["Password","useForm","form","user","useSelector","state","auth","useState","isLoading","setIsLoading","title","className","as","justify","lg","sm","xs","name","onFinish","values","variables","data","uid","console","log","newPassword","match","toast","warning","apolloClient","mutate","mutation","authMutation","ADMIN_PASSWORD_CHANGE","context","headers","TENANTID","process","Authorization","Cookies","get","then","res","adminPasswordChange","status","error","message","success","catch","err","finally","Item","label","rules","required","htmlType","type","loading","style","marginLeft","size","onClick","e","preventDefault","resetFields"],"mappings":"gUAkGeA,UAvFE,WACf,MAAe,IAAKC,UAAbC,EAAsB,iBAAlB,GACLC,EAAOC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,QAC7C,EAAkCI,oBAAS,GAAM,mBAA1CC,EAAS,KAAEC,EAAY,KAoC9B,OACE,kBAAC,IAAqB,KACpB,kBAAC,IAAK,CACJC,MACE,yBAAKC,UAAU,sBACb,kBAAC,IAAO,CAACC,GAAG,MAAI,qBAChB,yEAIJ,uBAAKC,QAAQ,UACX,uBAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IACvB,kBAAC,IAAgB,KACf,uBAAMd,KAAMA,EAAMe,KAAK,iBAAiBC,SA/C/B,SAAAC,GACnB,IAAMC,EAAY,CAAEC,KAAK,2BAAMF,GAAM,IAAEG,IAAKnB,EAAKmB,OAIjD,GAHAC,QAAQC,IAAIJ,IAEED,EAAOM,YAAYC,MAAM,wBAC3B,OAAOC,IAAMC,QAAQ,iEAGjCnB,GAAa,GACboB,IAAaC,OAAO,CAClBC,SAAUC,IAAaC,sBACvBb,YACAc,QAAS,CACPC,QAAS,CACPC,SAAUC,SACVC,cAAeC,IAAQC,IAAI,aAG9BC,MAAK,SAAAC,GACN,IAAMrB,EAAOqB,EAAIrB,KAAKsB,oBACtB,IAAKtB,EAAKuB,OAAQ,OAAOjB,IAAMkB,MAAMxB,EAAKyB,SAC1CnB,IAAMoB,QAAQ1B,EAAKyB,YAClBE,OAAM,SAAAC,GACPtB,IAAMkB,MAAM,6BACXK,SAAQ,WACTzC,GAAa,QAuBH,sBAAM0C,KAAI,CAAClC,KAAK,cAAcmC,MAAM,eAClCC,MAAO,CAAC,CAAEC,UAAU,EAAMR,QAAS,+BAEnC,6BAEF,sBAAMK,KAAI,CAAClC,KAAK,cAAcmC,MAAM,eAClCC,MAAO,CAAC,CAAEC,UAAU,EAAMR,QAAS,iCAEnC,sBAAO9C,SAAQ,OAEjB,uBAAGW,UAAU,iBAAe,mCAE5B,sBAAMwC,KAAI,KACR,yBAAKxC,UAAU,wBACb,uBAAQ4C,SAAS,SAASC,KAAK,UAC7BC,QAASjD,GAAU,mBAGZ,YAET,uBAAQkD,MAAO,CAAEC,WAAY,IAAMH,KAAK,QAAQI,KAAK,UAAUC,QAvC5D,SAAAC,GACnBA,EAAEC,iBACF7D,EAAK8D,gBAqCgG","file":"static/js/71.50e09a33.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Row, Col, Form, Input, Button } from 'antd';\nimport { ChangePasswordWrapper } from './style';\nimport { Cards } from '../../../../components/cards/frame/cards-frame';\nimport { BasicFormWrapper } from '../../../styled';\nimport Heading from '../../../../components/heading/heading';\nimport apolloClient, { authMutation } from '../../../../utility/apollo';\nimport Cookies from 'js-cookie';\nimport { useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\n\nconst Password = () => {\n  const [form] = Form.useForm();\n  const user = useSelector(state => state.auth.user);\n  const [isLoading, setIsLoading] = useState(false)\n\n  const handleSubmit = values => {\n    const variables = { data: { ...values, uid: user.uid } }\n    console.log(variables);\n\n    const check = values.newPassword.match(\"(?=.{6,})(?=.*[0-9])\")\n    if (!check) return toast.warning(\"Password should contain 6 character,  \\n And At List 1 number\")\n\n    // return\n    setIsLoading(true)\n    apolloClient.mutate({\n      mutation: authMutation.ADMIN_PASSWORD_CHANGE,\n      variables,\n      context: {\n        headers: {\n          TENANTID: process.env.REACT_APP_TENANTID,\n          Authorization: Cookies.get('psp_t')\n        }\n      }\n    }).then(res => {\n      const data = res.data.adminPasswordChange\n      if (!data.status) return toast.error(data.message)\n      toast.success(data.message)\n    }).catch(err => {\n      toast.error(`Something went wrong.!`)\n    }).finally(() => {\n      setIsLoading(false)\n    })\n\n  };\n  const handleCancel = e => {\n    e.preventDefault();\n    form.resetFields();\n  };\n\n  return (\n    <ChangePasswordWrapper>\n      <Cards\n        title={\n          <div className=\"setting-card-title\">\n            <Heading as=\"h4\">Password Settings</Heading>\n            <span>Change or reset your account password</span>\n          </div>\n        }\n      >\n        <Row justify=\"center\">\n          <Col lg={12} sm={20} xs={24}>\n            <BasicFormWrapper>\n              <Form form={form} name=\"changePassword\" onFinish={handleSubmit}>\n                <Form.Item name=\"oldPassword\" label=\"Old Password\"\n                  rules={[{ required: true, message: \"Please enter Old password\" }]}\n                >\n                  <Input />\n                </Form.Item>\n                <Form.Item name=\"newPassword\" label=\"New Password\"\n                  rules={[{ required: true, message: \"Please enter a new password\" }]}\n                >\n                  <Input.Password />\n                </Form.Item>\n                <p className=\"input-message\">Minimum 6 characters & 1 number</p>\n\n                <Form.Item>\n                  <div className=\"setting-form-actions\">\n                    <Button htmlType=\"submit\" type=\"primary\"\n                      loading={isLoading}\n                    >\n                      Change Password\n                    </Button>\n                    &nbsp; &nbsp;\n                    <Button style={{ marginLeft: 10 }} type=\"light\" size=\"default\" onClick={handleCancel} >\n                      Cancel\n                    </Button>\n                  </div>\n                </Form.Item>\n              </Form>\n            </BasicFormWrapper>\n          </Col>\n        </Row>\n      </Cards>\n    </ChangePasswordWrapper>\n  );\n};\n\nexport default Password;\n"],"sourceRoot":""}