{"version":3,"sources":["container/email/ListTemplate.js","apollo/email/index.js"],"names":["ListTemplate","viewPermission","useState","data","loading","error","email","setEmail","filteredEmail","setFilteredEmail","isFilter","setIsFilter","token","useSelector","state","auth","modalOpen","setModalOpen","modalContent","setModalContent","useEffect","apolloClient","query","EmailTemplateQuery","GET_EMAIL_TEMPLATE_LIST","context","headers","TENANTID","process","Authorization","then","res","getAllEmailTemplateList","s","catch","err","finally","columns","title","dataIndex","key","width","ellipsis","sorter","a","b","id","toUpperCase","email_template_id","render","text","name","slug","align","record","className","format","parseInt","to","shape","onClick","handlePreview","GET_EMAIL_TEMPLATE_PREVIEW","variables","templatelist_id","getEmailTemplatePreview","buttons","size","type","icon","gutter","sm","xs","headless","placeholder","prefix","onChange","e","value","target","filter","toLowerCase","includes","pagination","defaultPageSize","config","EMAIL_TEMPLATE_PER_PAGE","total","length","showTotal","range","rowKey","dataSource","rowClassName","index","centered","open","onOk","onCancel","dangerouslySetInnerHTML","__html","GET_EMAIL_HEADER_FOOTER_LIST","gql","ADD_EMAIL_TEMPLATE_HEADER_FOOTER","SINGLE_EMAIL_TEMPLATE_HEADER_FOOTER","EMAIL_TEMPLATE_HEADER_FOOTER_UPDATE","ADD_EMAIL_TEMPLATE_LIST","SINGLE_EMAIL_TEMPLATE_LIST","UPDATE_EMAIL_TEMPLATE_LIST","CREATE_EMAIL_TEMPLATE","GET_EMAIL_TEMPLATE_CONTENT_LIST","GET_SINGLE_EMAIL_CONTENT_TEMPLATE","UPDATE_EMAIL_TEMPLATE_CONTENT"],"mappings":"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","file":"static/js/40.282ef196.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { SearchOutlined } from '@ant-design/icons';\nimport { Row, Col, Spin, Input, Table, Modal } from 'antd';\nimport FeatherIcon from 'feather-icons-react';\nimport { PageHeader } from '../../components/page-headers/page-headers';\nimport { Main } from '../styled';\nimport { Cards } from '../../components/cards/frame/cards-frame';\nimport { Button } from '../../components/buttons/buttons';\nimport { Link } from 'react-router-dom';\nimport FontAwesome from 'react-fontawesome';\nimport apolloClient from '../../apollo';\nimport { useSelector } from 'react-redux';\nimport Moment from 'react-moment';\nimport { viewPermission } from '../../utility/utility';\nimport config from '../../config/config';\nimport { EmailTemplateQuery } from '../../apollo/email';\n\nconst ListTemplate = () => {\n  viewPermission('email-template');\n  const [email, setEmail] = useState({ data: [], loading: true, error: '' });\n  const [filteredEmail, setFilteredEmail] = useState([]);\n  const [isFilter, setIsFilter] = useState(false);\n  const token = useSelector(state => state.auth.token);\n  const [modalOpen, setModalOpen] = useState(false);\n  const [modalContent, setModalContent] = useState('');\n\n  useEffect(() => {\n    apolloClient\n      .query({\n        query: EmailTemplateQuery.GET_EMAIL_TEMPLATE_LIST,\n        context: {\n          headers: {\n            TENANTID: process.env.REACT_APP_TENANTID,\n            Authorization: token,\n          },\n        },\n      })\n      .then(res => {\n        const data = res?.data?.getAllEmailTemplateList;\n        setEmail(s => ({ ...s, data: data?.data, error: '' }));\n      })\n      .catch(err => {\n        setEmail(s => ({ ...s, error: 'Something went Wrong.!! ' }));\n      })\n      .finally(() => {\n        setEmail(s => ({ ...s, loading: false }));\n      });\n  }, []);\n\n  const columns = [\n    {\n      title: 'ID',\n      dataIndex: 'id',\n      key: 'id',\n      width: 40,\n      ellipsis: true,\n      sorter: (a, b) => (a.id.toUpperCase() > b.id.toUpperCase() ? 1 : -1),\n    },\n    {\n      title: 'Email Template ID',\n      dataIndex: 'email_template_id',\n      key: 'email_template_id',\n      width: 200,\n      ellipsis: true,\n      sorter: (a, b) => (a.email_template_id.toUpperCase() > b.email_template_id.toUpperCase() ? 1 : -1),\n      render: text => text ?? 'Not Used!',\n    },\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      key: 'name',\n      width: 200,\n      ellipsis: true,\n      sorter: (a, b) => (a.name.toUpperCase() > b.name.toUpperCase() ? 1 : -1),\n    },\n    {\n      title: 'Alias',\n      dataIndex: 'slug',\n      key: 'slug',\n      width: 200,\n      ellipsis: true,\n      sorter: (a, b) => (a.slug.toUpperCase() > b.slug.toUpperCase() ? 1 : -1),\n    },\n    {\n      title: 'Date',\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      align: 'center',\n      width: 120,\n      render: (text, record) => (\n        <span className={'status-text'}>{<Moment format=\"DD MMMM YYYY\">{parseInt(text)}</Moment>}</span>\n      ),\n    },\n    {\n      title: 'Action',\n      dataIndex: 'action',\n      align: 'right',\n      key: 'action',\n      width: 80,\n      render: (text, record) => (\n        <>\n          <Link to={`/admin/email/template/edit/${record.id}`}>\n            <FontAwesome name=\"edit\" />\n          </Link>\n          <Button shape=\"circle\" onClick={() => handlePreview(record.id)}>\n            <FontAwesome name=\"eye\" />\n          </Button>\n        </>\n      ),\n    },\n  ];\n\n  const onChangeSearch = e => {\n    const value = e.target.value;\n    setIsFilter(value);\n    setFilteredEmail(\n      email.data.filter(email =>\n        (email?.email_template_id + email?.name + email?.slug).toLowerCase().includes(value.toLowerCase()),\n      ),\n    );\n  };\n\n  const handlePreview = id => {\n    setEmail(s => ({ ...s, loading: true }));\n    apolloClient\n      .query({\n        query: EmailTemplateQuery.GET_EMAIL_TEMPLATE_PREVIEW,\n        variables: {\n          query: {\n            templatelist_id: id,\n          },\n        },\n        context: {\n          headers: {\n            TENANTID: process.env.REACT_APP_TENANTID,\n            Authorization: token,\n          },\n        },\n      })\n      .then(res => {\n        const data = res?.data?.getEmailTemplatePreview;\n        setModalContent(data?.data);\n        setModalOpen(true);\n      })\n      .catch(err => {\n        setEmail(s => ({ ...s, error: 'Something went Wrong.!! ' }));\n      })\n      .finally(() => {\n        setEmail(s => ({ ...s, loading: false }));\n      });\n  };\n\n  return (\n    <>\n      <PageHeader\n        title=\"Email Template\"\n        buttons={[\n          <div key=\"email-template\" className=\"page-header-actions\">\n            <Link to=\"/admin/email/template/add\">\n              <Button size=\"small\" title=\"Add Email Template\" type=\"primary\">\n                <FeatherIcon icon=\"plus\" />\n              </Button>\n            </Link>\n          </div>,\n        ]}\n      />\n      <Main>\n        <Row gutter={25}>\n          <Col sm={24} xs={24}>\n            <Cards headless>\n              {email.loading ? (\n                <div className=\"spin\">\n                  <Spin />\n                </div>\n              ) : email.error ? (\n                <p>{email.error}</p>\n              ) : (\n                <>\n                  <Input\n                    placeholder=\"Search in Email Template...\"\n                    prefix={<SearchOutlined />}\n                    onChange={onChangeSearch}\n                  />\n                  <br />\n                  <br />\n\n                  <span className={'psp_list'}>\n                    <Table\n                      className=\"table-responsive\"\n                      columns={columns}\n                      pagination={{\n                        defaultPageSize: config.EMAIL_TEMPLATE_PER_PAGE,\n                        total: isFilter ? email?.data?.length : email?.data?.length,\n                        showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} items`,\n                      }}\n                      rowKey={'id'}\n                      size=\"small\"\n                      dataSource={isFilter ? filteredEmail : email.data}\n                      rowClassName={(record, index) => (index % 2 === 0 ? '' : 'altTableClass')}\n                    />\n                  </span>\n                </>\n              )}\n            </Cards>\n            <Modal\n              title=\"Template Preview\"\n              centered\n              open={modalOpen}\n              onOk={() => setModalOpen(false)}\n              onCancel={() => setModalOpen(false)}\n              width={800}\n            >\n              <div dangerouslySetInnerHTML={{ __html: modalContent }}></div>\n            </Modal>\n          </Col>\n        </Row>\n      </Main>\n    </>\n  );\n};\n\nexport default ListTemplate;\n","import { gql } from '@apollo/client';\n\nexport const EmailTemplateQuery = {\n  GET_EMAIL_HEADER_FOOTER_LIST: gql`\n    query getEmailTempHeaderFooterList {\n      getEmailTempHeaderFooterList {\n        message\n        status\n        data {\n          id\n          name\n          slug\n          content\n          type\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  `,\n  ADD_EMAIL_TEMPLATE_HEADER_FOOTER: gql`\n    mutation addEmailTempHeaderFooter($data: AddEmailTempHFInput) {\n      addEmailTempHeaderFooter(data: $data) {\n        message\n        status\n      }\n    }\n  `,\n  SINGLE_EMAIL_TEMPLATE_HEADER_FOOTER: gql`\n    query getSingleEmailTempHeaderFooter($query: GetSingleEmailHeaderFooterInput) {\n      getSingleEmailTempHeaderFooter(query: $query) {\n        message\n        status\n        data {\n          id\n          name\n          slug\n          content\n          layout_type\n          type\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  `,\n  EMAIL_TEMPLATE_HEADER_FOOTER_UPDATE: gql`\n    mutation updateEmailTempHeaderFooter($data: UpdateEmailTempHFInput) {\n      updateEmailTempHeaderFooter(data: $data) {\n        message\n        status\n      }\n    }\n  `,\n  GET_EMAIL_TEMPLATE_LIST: gql`\n    query getAllEmailTemplateList {\n      getAllEmailTemplateList {\n        message\n        status\n        data {\n          id\n          email_template_id\n          name\n          slug\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  `,\n  ADD_EMAIL_TEMPLATE_LIST: gql`\n    mutation addEmailTemplateOnList($data: AddEmailTemplateListInput) {\n      addEmailTemplateOnList(data: $data) {\n        message\n        status\n      }\n    }\n  `,\n  SINGLE_EMAIL_TEMPLATE_LIST: gql`\n    query getSingleEmailTemplateList($query: GetSingleEmailTemplateListInput) {\n      getSingleEmailTemplateList(query: $query) {\n        message\n        status\n        data {\n          id\n          email_template_id\n          name\n          slug\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  `,\n  UPDATE_EMAIL_TEMPLATE_LIST: gql`\n    mutation updateEmailTemplateOnList($data: UpdateEmailTemplateListInput) {\n      updateEmailTemplateOnList(data: $data) {\n        message\n        status\n      }\n    }\n  `,\n  CREATE_EMAIL_TEMPLATE: gql`\n    mutation createEmailTemplate($data: addEmailTemplateInput) {\n      createEmailTemplate(data: $data) {\n        message\n        status\n      }\n    }\n  `,\n  GET_EMAIL_TEMPLATE_CONTENT_LIST: gql`\n    query getEmailTemplateList {\n      getEmailTemplateList {\n        message\n        status\n        data {\n          id\n          name\n          slug\n          createdAt\n          updatedAt\n          emailHeader {\n            id\n            name\n            slug\n          }\n          emailFooter {\n            id\n            name\n            slug\n          }\n        }\n      }\n    }\n  `,\n  GET_SINGLE_EMAIL_CONTENT_TEMPLATE: gql`\n    query getSingleEmailTemplate($query: GetSingleEmailTemplateInput) {\n      getSingleEmailTemplate(query: $query) {\n        message\n        status\n        data {\n          id\n          name\n          slug\n          content\n          layout_type\n          createdAt\n          updatedAt\n          emailHeader {\n            id\n            name\n            slug\n            content\n            type\n            createdAt\n            updatedAt\n          }\n          emailFooter {\n            id\n            name\n            slug\n            content\n            type\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n  `,\n  UPDATE_EMAIL_TEMPLATE_CONTENT: gql`\n    mutation updateEmailTemplate($data: updateEmailTemplateInput) {\n      updateEmailTemplate(data: $data) {\n        message\n        status\n      }\n    }\n  `,\n  GET_EMAIL_TEMPLATE_PREVIEW: gql`\n    query getEmailTemplatePreview($query: GetEmailTemplatePreviewInput) {\n      getEmailTemplatePreview(query: $query) {\n        message\n        status\n        tenant_id\n        data\n      }\n    }\n  `,\n};\n"],"sourceRoot":""}