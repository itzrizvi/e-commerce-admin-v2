{"version":3,"sources":["container/banner/ListBanner.js","apollo/banner/index.js"],"names":["ListBanner","viewPermission","useState","data","loading","error","banner","setBanner","filteredBanner","setFilteredBanner","isFilter","setIsFilter","token","useSelector","state","auth","useEffect","apolloClient","query","bannerQuery","GET_ALL_BANNER","context","headers","TENANTID","process","Authorization","then","res","getAllBanners","s","catch","err","finally","columns","title","dataIndex","key","width","ellipsis","sorter","a","b","id","toUpperCase","name","slug","align","render","text","record","className","format","parseInt","to","buttons","size","type","icon","gutter","sm","xs","headless","placeholder","prefix","onChange","e","value","target","filter","toLowerCase","includes","pagination","defaultPageSize","config","BANNER_PER_PAGE","total","length","showTotal","range","rowKey","dataSource","rowClassName","index","BANNER_ADD","gql","GET_SINGLE_BANNER","BANNER_UPDATE"],"mappings":"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","file":"static/js/23.fad329d3.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { SearchOutlined } from '@ant-design/icons';\nimport { Row, Col, Spin, Input, Table } from 'antd';\nimport FeatherIcon from 'feather-icons-react';\nimport { PageHeader } from '../../components/page-headers/page-headers';\nimport { Main } from '../styled';\nimport { Cards } from '../../components/cards/frame/cards-frame';\nimport { Button } from '../../components/buttons/buttons';\nimport { Link } from 'react-router-dom';\nimport FontAwesome from 'react-fontawesome';\nimport apolloClient from '../../apollo';\nimport { bannerQuery } from '../../apollo/banner';\nimport { useSelector } from 'react-redux';\nimport Moment from 'react-moment';\nimport { viewPermission } from '../../utility/utility';\nimport config from '../../config/config';\n\nconst ListBanner = () => {\n  viewPermission('banner');\n  const [banner, setBanner] = useState({ data: [], loading: true, error: '' });\n  const [filteredBanner, setFilteredBanner] = useState([]);\n  const [isFilter, setIsFilter] = useState(false);\n  const token = useSelector(state => state.auth.token);\n\n  useEffect(() => {\n    apolloClient\n      .query({\n        query: bannerQuery.GET_ALL_BANNER,\n        context: {\n          headers: {\n            TENANTID: process.env.REACT_APP_TENANTID,\n            Authorization: token,\n          },\n        },\n      })\n      .then(res => {\n        const data = res?.data?.getAllBanners;\n        // console.log(data);\n        setBanner(s => ({ ...s, data: data?.data, error: '' }));\n      })\n      .catch(err => {\n        setBanner(s => ({ ...s, error: 'Something went Wrong.!! ' }));\n      })\n      .finally(() => {\n        setBanner(s => ({ ...s, loading: false }));\n      });\n  }, []);\n\n  const columns = [\n    {\n      title: 'ID',\n      dataIndex: 'id',\n      key: 'id',\n      width: 80,\n      ellipsis: true,\n      sorter: (a, b) => (a.id.toUpperCase() > b.id.toUpperCase() ? 1 : -1),\n    },\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      key: 'name',\n      width: 250,\n      ellipsis: true,\n      sorter: (a, b) => (a.name.toUpperCase() > b.name.toUpperCase() ? 1 : -1),\n    },\n    {\n      title: 'Alias',\n      dataIndex: 'slug',\n      key: 'slug',\n      width: 250,\n      ellipsis: true,\n      sorter: (a, b) => (a.slug.toUpperCase() > b.slug.toUpperCase() ? 1 : -1),\n    },\n    {\n      title: 'Date',\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      width: 120,\n      align: 'center',\n      render: (text, record) => (\n        <span className={'status-text'}>{<Moment format=\"DD MMMM YYYY\">{parseInt(text)}</Moment>}</span>\n      ),\n    },\n    {\n      title: 'Action',\n      dataIndex: 'action',\n      align: 'right',\n      key: 'action',\n      width: 100,\n      render: (text, record) => (\n        <>\n          <Link to={`/admin/banner/edit/${record.id}`}>\n            <FontAwesome name=\"edit\" />\n          </Link>\n        </>\n      ),\n    },\n  ];\n\n  const onChangeSearch = e => {\n    const value = e.target.value;\n    setIsFilter(value);\n    setFilteredBanner(\n      banner.data.filter(banner =>\n        (banner?.name + banner?.slug + banner?.id).toLowerCase().includes(value.toLowerCase()),\n      ),\n    );\n  };\n\n  return (\n    <>\n      <PageHeader\n        title=\"Banner List\"\n        buttons={[\n          <div key=\"1\" className=\"page-header-actions\">\n            <Link to=\"/admin/banner/add\">\n              <Button size=\"small\" title=\"Add Banner\" type=\"primary\">\n                <FeatherIcon icon=\"plus\" />\n              </Button>\n            </Link>\n          </div>,\n        ]}\n      />\n      <Main>\n        <Row gutter={25}>\n          <Col sm={24} xs={24}>\n            <Cards headless>\n              {banner.loading ? (\n                <div className=\"spin\">\n                  <Spin />\n                </div>\n              ) : banner.error ? (\n                <p>{banner.error}</p>\n              ) : (\n                <>\n                  <Input placeholder=\"Search in Banner...\" prefix={<SearchOutlined />} onChange={onChangeSearch} />\n                  <br />\n                  <br />\n\n                  <span className={'psp_list'}>\n                    <Table\n                      className=\"table-responsive\"\n                      columns={columns}\n                      pagination={{\n                        defaultPageSize: config.BANNER_PER_PAGE,\n                        total: isFilter ? banner?.data?.length : banner?.data?.length,\n                        showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} items`,\n                      }}\n                      rowKey={'id'}\n                      size=\"small\"\n                      dataSource={isFilter ? filteredBanner : banner.data}\n                      rowClassName={(record, index) => (index % 2 === 0 ? '' : 'altTableClass')}\n                    />\n                  </span>\n                </>\n              )}\n            </Cards>\n          </Col>\n        </Row>\n      </Main>\n    </>\n  );\n};\n\nexport default ListBanner;\n","import { gql } from '@apollo/client';\n\nexport const bannerQuery = {\n  BANNER_ADD: gql`\n    mutation addBanner($data: BannerInput) {\n      addBanner(data: $data) {\n        message\n        status\n        id\n      }\n    }\n  `,\n  GET_ALL_BANNER: gql`\n    query getAllBanners {\n      getAllBanners {\n        message\n        status\n        data {\n          id\n          name\n          slug\n          content\n          status\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  `,\n  GET_SINGLE_BANNER: gql`\n    query getSingleBanner($banner_id: Int!) {\n      getSingleBanner(query: { banner_id: $banner_id }) {\n        message\n        status\n        data {\n          id\n          name\n          slug\n          content\n          layout_type\n          status\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  `,\n  BANNER_UPDATE: gql`\n    mutation updateBanner($data: UpdateBannerInput) {\n      updateBanner(data: $data) {\n        message\n        status\n      }\n    }\n  `,\n};\n"],"sourceRoot":""}