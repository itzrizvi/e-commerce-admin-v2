{"version":3,"sources":["container/permission/AddPermission.js"],"names":["AddPermission","viewPermission","search","useLocation","params","queryString","parse","history","useHistory","useForm","form","useState","permissionStatus","setPermissionStatus","isLoading","setIsLoading","data","singlePermission","setSinglePermission","useEffect","id","apolloClient","query","authQuery","GET_SINGLE_ROLES_PERMISSION","variables","parseInt","context","headers","TENANTID","process","Authorization","Cookies","get","then","res","getSingleRolesPermission","roles_permission_status","catch","err","console","log","title","roles_permission_name","gutter","sm","xs","headless","style","textAlign","tip","width","name","onFinish","values","permissionName","mutate","mutation","authMutation","UPDATE_ROLES_PERMISSION","refetchQueries","GET_ALL_ROLES_PERMISSION","updateRolesPermission","status","toast","error","message","setTimeout","push","success","finally","CREATE_ROLES_PERMISSION","createRolesPermission","onFinishFailed","errorInfo","labelCol","span","Item","rules","required","max","label","initialValue","placeholder","checked","onChange","display","justifyContent","marginTop","loading","size","htmlType","type","raised","to","marginLeft"],"mappings":"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","file":"static/js/59.37c741a4.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Row, Col, Form, Input, Switch, Spin } from 'antd';\nimport { PageHeader } from '../../components/page-headers/page-headers';\nimport { Main } from '../styled';\nimport { Cards } from '../../components/cards/frame/cards-frame';\nimport { Button } from '../../components/buttons/buttons';\nimport { Link, useLocation, useHistory } from 'react-router-dom';\nimport apolloClient, { authMutation, authQuery } from '../../utility/apollo';\nimport Cookies from 'js-cookie';\nimport { toast } from 'react-toastify';\nimport queryString from 'query-string';\nimport { viewPermission } from '../../utility/utility';\n\nconst AddPermission = () => {\n  viewPermission('permission');\n  const { search } = useLocation();\n  const params = queryString.parse(search);\n  const history = useHistory();\n\n  const [form] = Form.useForm();\n  const maxLength = 30;\n  const [permissionStatus, setPermissionStatus] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n  const [singlePermission, setSinglePermission] = useState({ data: [], isLoading: true });\n\n  useEffect(() => {\n    if (!params.id) return;\n    apolloClient\n      .query({\n        query: authQuery.GET_SINGLE_ROLES_PERMISSION,\n        variables: {\n          query: {\n            id: parseInt(params.id),\n          },\n        },\n        context: {\n          headers: {\n            TENANTID: process.env.REACT_APP_TENANTID,\n            Authorization: Cookies.get('psp_t'),\n          },\n        },\n      })\n      .then(res => {\n        const data = res?.data?.getSingleRolesPermission;\n        setSinglePermission({ data: data.data, isLoading: false });\n        setPermissionStatus(data.data.roles_permission_status);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }, []);\n\n  const handleSubmit = values => {\n    console.log(values);\n    setIsLoading(true);\n\n    // Add Permission START -------\n    if (!params.id) {\n      apolloClient\n        .mutate({\n          mutation: authMutation.CREATE_ROLES_PERMISSION,\n          variables: { data: { ...values, permissionStatus } },\n          context: {\n            headers: {\n              TENANTID: process.env.REACT_APP_TENANTID,\n              Authorization: Cookies.get('psp_t'),\n            },\n          },\n          refetchQueries: [\n            {\n              query: authQuery.GET_ALL_ROLES_PERMISSION,\n              context: {\n                headers: {\n                  TENANTID: process.env.REACT_APP_TENANTID,\n                  Authorization: Cookies.get('psp_t'),\n                },\n              },\n            },\n            ['getAllRolesPermission'],\n          ],\n        })\n        .then(res => {\n          const data = res?.data?.createRolesPermission;\n          if (!data.status) return toast.error(data.message);\n          setTimeout(() => {\n            history.push('/admin/permission/list');\n          }, 1000);\n          toast.success(`${values.permissionName} added successfully`);\n        })\n        .catch(err => {\n          console.log('got error on addPermission', err);\n          return toast.error('Soemthing Went wrong !!');\n        })\n        .finally(() => {\n          setIsLoading(false);\n        });\n    }\n    // Add Permission END -------\n\n    // Update Permission START -------\n    else {\n      const variables = {\n        data: {\n          id: parseInt(params.id),\n          roles_permission_name: values.permissionName,\n          roles_permission_status: permissionStatus,\n        },\n      };\n      apolloClient\n        .mutate({\n          mutation: authMutation.UPDATE_ROLES_PERMISSION,\n          variables,\n          context: {\n            headers: {\n              TENANTID: process.env.REACT_APP_TENANTID,\n              Authorization: Cookies.get('psp_t'),\n            },\n          },\n          refetchQueries: [\n            {\n              query: authQuery.GET_ALL_ROLES_PERMISSION,\n              context: {\n                headers: {\n                  TENANTID: process.env.REACT_APP_TENANTID,\n                  Authorization: Cookies.get('psp_t'),\n                },\n              },\n            },\n            ['getAllRolesPermission'],\n          ],\n        })\n        .then(res => {\n          const data = res?.data?.updateRolesPermission;\n          if (!data.status) return toast.error(data.message);\n          setTimeout(() => {\n            history.push('/admin/permission/list');\n          }, 1000);\n          toast.success(`${values.permissionName} updated successfully`);\n        })\n        .catch(err => {\n          console.log('got error on update Permission', err);\n          return toast.error('Soemthing Went wrong !!');\n        })\n        .finally(() => {\n          setIsLoading(false);\n        });\n    }\n    // Update Permission END -------\n  };\n\n  return (\n    <>\n      <PageHeader\n        title={\n          params.id\n            ? `Manage Permission | Edit Permission ${singlePermission.isLoading ? '' : `(${singlePermission.data.roles_permission_name})`\n            }`\n            : 'Add Permission'\n        }\n      />\n      <Main>\n        <Row gutter={25}>\n          <Col sm={24} xs={24}>\n            <Cards headless>\n              {params.id && singlePermission.isLoading ? (\n                <div style={{ textAlign: 'center' }}>\n                  <Spin tip=\"processing...\" />\n                </div>\n              ) : (\n                <Form\n                  style={{ width: '100%' }}\n                  form={form}\n                  name=\"addRole\"\n                  onFinish={handleSubmit}\n                  onFinishFailed={errorInfo => console.log('form error info:\\n', errorInfo)}\n                  labelCol={{ span: 4 }}\n                >\n                  <Row gutter={25}>\n                    <Col span={10}>\n                      <Form.Item\n                        rules={[{ required: true, max: maxLength, message: 'Please enter Role Name' }]}\n                        name=\"permissionName\"\n                        label=\"Name\"\n                        initialValue={params.id ? singlePermission.data.roles_permission_name : ''}\n                        labelCol={{ style: { width: \"40%\" } }}\n                      >\n                        <Row>\n                          <Col span={22}>\n                            <Input placeholder=\"Enter Permission Name\" />\n                          </Col>\n                        </Row>\n                      </Form.Item>\n                    </Col>\n                  </Row>\n\n\n                  <Form.Item name=\"permissionStatus\" label=\"Status\">\n                    <Switch checked={permissionStatus} onChange={checked => setPermissionStatus(checked)} />\n                  </Form.Item>\n\n                  <div\n                    style={{\n                      display: 'flex',\n                      justifyContent: 'flex-end',\n                      marginTop: '3em',\n                    }}\n                  >\n                    <Form.Item>\n                      <Button loading={isLoading} size=\"default\" htmlType=\"submit\" type=\"primary\" raised>\n                        {isLoading ? 'Processing' : 'Save'}\n                      </Button>\n                      <Link to=\"/admin/permission/list\">\n                        <Button style={{ marginLeft: 10 }} type=\"light\" size=\"default\">\n                          Cancel\n                        </Button>\n                      </Link>\n                    </Form.Item>\n                  </div>\n                </Form>\n              )}\n            </Cards>\n          </Col>\n        </Row>\n      </Main>\n    </>\n  );\n};\n\nexport default AddPermission;\n"],"sourceRoot":""}