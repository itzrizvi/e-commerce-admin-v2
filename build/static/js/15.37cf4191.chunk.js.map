{"version":3,"sources":["container/banner/AddBanner.js","apollo/banner/index.js"],"names":["AddBanner","viewPermission","history","useHistory","token","useSelector","state","auth","useState","isLoading","setIsLoading","bannerStatus","setBannerStatus","image","setImage","useForm","form","initialData","id","Date","getTime","title","link","sort_order","sub_title","button_text","option_1","option_2","price","sale_price","action","bannerData","setBannerData","beforeImageUpload","file","isLt2M","size","toast","error","uploadButton","style","marginTop","setImageInObject","e","target","data_id","getAttribute","map","ele","column","dataIndex","key","width","render","text","record","type","placeholder","onChange","value","name","listType","data-id","className","showUploadList","beforeUpload","event","fileList","src","URL","createObjectURL","onError","errorImageSrc","alt","effect","visibleByDefault","ellipsis","parseInt","onClick","removeRow","icon","prevState","filter","gutter","sm","xs","headless","onFinish","values","check_point","forEach","val","info","data","banner_status","apolloClient","mutate","mutation","bannerQuery","BANNER_ADD","variables","context","headers","TENANTID","process","Authorization","refetchQueries","query","GET_ALL_BANNER","then","res","addBanner","status","banner_id","length","setTimeout","push","success","index","apolloUploadClient","BANNER_ITEM_ADD","_","catch","err","onFinishFailed","errorInfo","console","log","labelCol","span","Item","rules","required","max","message","label","checked","checkedChildren","unCheckedChildren","columns","pagination","rowKey","dataSource","display","justifyContent","marginBottom","newData","htmlType","loading","raised","to","marginLeft","gql","GET_SINGLE_BANNER","BANNER_UPDATE","BANNER_ITEM_UPDATE","BANNER_ITEM_DELETE"],"mappings":"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","file":"static/js/15.37cf4191.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Row, Col, Form, Input, Switch, Select, Upload, InputNumber, Spin, Table } from 'antd';\nimport { PageHeader } from '../../components/page-headers/page-headers';\nimport { Main } from '../styled';\nimport { Cards } from '../../components/cards/frame/cards-frame';\nimport { Button } from '../../components/buttons/buttons';\nimport { Link, useHistory } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { PlusOutlined } from '@ant-design/icons';\nimport { bannerQuery } from '../../apollo/banner';\nimport apolloClient, { apolloUploadClient } from '../../apollo';\nimport { errorImageSrc } from '../../utility/images';\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\nimport FeatherIcon from 'feather-icons-react';\nimport { viewPermission } from '../../utility/utility';\nimport 'react-lazy-load-image-component/src/effects/blur.css';\n\nconst AddBanner = () => {\n  viewPermission('banner');\n  const history = useHistory();\n  const token = useSelector(state => state.auth.token);\n  const [isLoading, setIsLoading] = useState(false);\n  const [bannerStatus, setBannerStatus] = useState(true);\n  const [image, setImage] = useState('');\n  const maxLength = 50;\n  const [form] = Form.useForm();\n\n  const initialData = {\n    id: new Date().getTime(),\n    title: '',\n    link: '',\n    image: '',\n    sort_order: '',\n    sub_title: '',\n    button_text: '',\n    option_1: '',\n    option_2: '',\n    price: '',\n    sale_price: '',\n    action: '',\n  };\n  const [bannerData, setBannerData] = useState([initialData]);\n\n  //Submit Form\n  const handleSubmit = values => {\n    let check_point = true;\n    bannerData.forEach(val => {\n      if (check_point && (val.image == '' || val.title == '')) {\n        toast.info('Please Provide All Banner Image First!');\n        check_point = false;\n        return;\n      }\n    });\n\n    if (check_point) {\n      setIsLoading(true);\n      const data = { ...values, banner_status: bannerStatus };\n      apolloClient\n        .mutate({\n          mutation: bannerQuery.BANNER_ADD,\n          variables: { data },\n          context: {\n            headers: {\n              TENANTID: process.env.REACT_APP_TENANTID,\n              Authorization: token,\n              'Apollo-Require-Preflight': 'true',\n            },\n          },\n          refetchQueries: [\n            {\n              query: bannerQuery.GET_ALL_BANNER,\n              context: {\n                headers: {\n                  TENANTID: process.env.REACT_APP_TENANTID,\n                  Authorization: token,\n                },\n              },\n            }\n          ],\n        })\n        .then(res => {\n          const data = res?.data?.addBanner;\n          if (!data?.status) return toast.error('Something Went wrong !');\n          const banner_id = data?.data?.id;\n          if (bannerData.length === 0) {\n            setTimeout(() => {\n              history.push('/admin/banner/list');\n            }, 1000);\n            toast.success('Banner Added Successfully!');\n            setIsLoading(false);\n          }\n          bannerData.forEach((val, index) => {\n            apolloUploadClient\n              .mutate({\n                mutation: bannerQuery.BANNER_ITEM_ADD,\n                variables: {\n                  data: {\n                    banner_id: banner_id,\n                    title: val.title,\n                    sub_title: val.sub_title,\n                    sort_order: val.sort_order,\n                    link: val.link,\n                    button_text: val.button_text,\n                    option_1: val.option_1,\n                    option_2: val.option_2,\n                    price: val.price,\n                    sale_price: val.sale_price,\n                    image: val.image,\n                  },\n                },\n                context: {\n                  headers: {\n                    TENANTID: process.env.REACT_APP_TENANTID,\n                    Authorization: token,\n                  },\n                },\n              })\n              .then(_ => {\n                if (bannerData.length === index + 1) {\n                  setTimeout(() => {\n                    history.push('/admin/banner/list');\n                  }, 1000);\n                  toast.success('Banner Added Successfully!');\n                  setIsLoading(false);\n                }\n              })\n              .catch(err => {\n                toast.error('Something Went wrong !!');\n              });\n          });\n        })\n        .catch(err => {\n          toast.error('Something Went wrong !!!');\n        });\n    }\n  };\n\n  // Assign Image\n  const beforeImageUpload = file => {\n    const isLt2M = file.size / 1024 / 1024 < 2;\n    if (!isLt2M) toast.error('Image must smaller than 2MB!');\n    if (isLt2M) setImage(file);\n    return false;\n  };\n\n  // Upload Button Design\n  const uploadButton = (\n    <div>\n      <PlusOutlined />\n      <div style={{ marginTop: 8 }}> Upload </div>\n    </div>\n  );\n\n  const setImageInObject = e => {\n    if (e && 'target' in e && 'getAttribute' in e.target) {\n      const data_id = e.target.getAttribute('data-id');\n      if (data_id) {\n        let shawlow_copy = bannerData;\n        shawlow_copy.map(ele => {\n          if (ele.id == data_id) {\n            ele.image = image;\n          }\n          return ele;\n        });\n      }\n    }\n  };\n\n  // List For Table Column\n  const column = [\n    {\n      title: 'Title',\n      dataIndex: 'title',\n      key: 'title',\n      width: 200,\n      render: (text, record) => (\n        <Input type=\"text\" placeholder=\"Title\" onChange={e => (record.title = e.target.value)} />\n      ),\n    },\n    {\n      title: 'Sub Title',\n      dataIndex: 'sub_title',\n      key: 'sub_title',\n      width: 200,\n      render: (text, record) => (\n        <Input type=\"text\" placeholder=\"Sub Title\" onChange={e => (record.sub_title = e.target.value)} />\n      ),\n    },\n    {\n      title: 'Link',\n      dataIndex: 'link',\n      key: 'link',\n      width: 200,\n      render: (text, record) => <Input type=\"text\" placeholder=\"Link\" onChange={e => (record.link = e.target.value)} />,\n    },\n    {\n      title: 'Button Text',\n      dataIndex: 'button_text',\n      key: 'button_text',\n      width: 200,\n      render: (text, record) => (\n        <Input type=\"text\" placeholder=\"Button Text\" onChange={e => (record.button_text = e.target.value)} />\n      ),\n    },\n    {\n      title: 'Price',\n      dataIndex: 'price',\n      key: 'price',\n      width: 100,\n      render: (text, record) => (\n        <Input type=\"number\" placeholder=\"Price\" onChange={e => (record.price = e.target.value)} />\n      ),\n    },\n    {\n      title: 'Sale Price',\n      dataIndex: 'sale_price',\n      key: 'sale_price',\n      width: 100,\n      render: (text, record) => (\n        <Input type=\"number\" placeholder=\"Sale Price\" onChange={e => (record.sale_price = e.target.value)} />\n      ),\n    },\n    {\n      title: 'Image',\n      dataIndex: 'image',\n      key: 'image',\n      width: 120,\n      render: (text, record) => (\n        <Upload\n          name=\"avatar\"\n          listType=\"picture-card\"\n          data-id={record.id}\n          className=\"avatar-uploader\"\n          showUploadList={false}\n          beforeUpload={beforeImageUpload}\n          onChange={setImageInObject(event)}\n          fileList={[]}\n        >\n          {record.image ? (\n            <LazyLoadImage\n              src={URL.createObjectURL(record.image)}\n              onError={errorImageSrc}\n              alt=\"image\"\n              effect=\"blur\"\n              style={{\n                width: '100%',\n              }}\n              visibleByDefault={image.src === '/public/loading.webp'}\n            />\n          ) : (\n            uploadButton\n          )}\n        </Upload>\n      ),\n    },\n    {\n      title: 'Optional One',\n      dataIndex: 'option_1',\n      key: 'option_1',\n      width: 150,\n      ellipsis: true,\n      render: (text, record) => (\n        <Input type=\"text\" placeholder=\"Optional One\" onChange={e => (record.option_1 = e.target.value)} />\n      ),\n    },\n    {\n      title: 'Optional Two',\n      dataIndex: 'option_2',\n      key: 'option_2',\n      width: 150,\n      ellipsis: true,\n      render: (text, record) => (\n        <Input type=\"text\" placeholder=\"Optional Two\" onChange={e => (record.option_2 = e.target.value)} />\n      ),\n    },\n    {\n      title: 'Sort Order',\n      dataIndex: 'sort_order',\n      key: 'sort_order',\n      width: 80,\n      render: (text, record) => (\n        <Input type=\"number\" placeholder=\"Sort Order\" onChange={e => (record.sort_order = parseInt(e.target.value))} />\n      ),\n    },\n    {\n      title: 'Action',\n      dataIndex: 'action',\n      key: 'action',\n      width: 50,\n      render: (text, record) => (\n        <Button size=\"small\" title=\"Remove\" type=\"danger\" onClick={() => removeRow(record.id)}>\n          <FeatherIcon icon=\"minus\" />\n        </Button>\n      ),\n    },\n  ];\n\n  // Adding new row on table\n  const addNewRow = () => {\n    const newData = {\n      id: new Date().getTime(),\n      title: '',\n      sub_title: '',\n      link: '',\n      image: '',\n      sort_order: '',\n      button_text: '',\n      option_1: '',\n      option_2: '',\n      price: '',\n      sale_price: '',\n    };\n    setBannerData(prevState => [...prevState, newData]);\n  };\n\n  const removeRow = id => {\n    setBannerData(prevState => {\n      return prevState.filter(value => value.id !== id);\n    });\n  };\n\n  return (\n    <>\n      <PageHeader title=\"Add Banner\" />\n\n      <Main>\n        <Row gutter={25}>\n          <Col sm={24} xs={24}>\n            <Cards headless>\n              <Form\n                style={{ width: '100%' }}\n                form={form}\n                name=\"addBanner\"\n                onFinish={handleSubmit}\n                onFinishFailed={errorInfo => console.log('form error info:\\n', errorInfo)}\n                labelCol={{ span: 4 }}\n              >\n                <Form.Item\n                  rules={[{ required: true, max: maxLength, message: 'Please Enter Banner Name' }]}\n                  name=\"banner_name\"\n                  label=\"Banner Name\"\n                >\n                  <Input placeholder=\"Enter Banner Name\" />\n                </Form.Item>\n\n                <Form.Item label=\"Status\">\n                  <Switch\n                    checked={bannerStatus}\n                    onChange={checked => setBannerStatus(checked)}\n                    checkedChildren=\"ON\"\n                    unCheckedChildren=\"OFF\"\n                  />\n                </Form.Item>\n\n                <Table\n                  className=\"table-responsive\"\n                  columns={column}\n                  pagination={false}\n                  rowKey={'id'}\n                  size=\"small\"\n                  dataSource={bannerData}\n                />\n\n                <div style={{ display: 'flex', justifyContent: 'flex-end', marginTop: '10px', marginBottom: '10px' }}>\n                  <Button onClick={addNewRow} size=\"small\" title=\"Add Banner\" htmlType=\"button\" type=\"primary\">\n                    <FeatherIcon icon=\"plus\" />\n                  </Button>\n                </div>\n\n                <div style={{ display: 'flex', justifyContent: 'flex-start' }}>\n                  <Form.Item>\n                    <Button loading={isLoading} size=\"default\" htmlType=\"submit\" type=\"primary\" raised>\n                      {isLoading ? 'Processing' : 'Save'}\n                    </Button>\n                    <Link to=\"/admin/banner/list\">\n                      <Button style={{ marginLeft: 10 }} type=\"light\" size=\"default\">\n                        Cancel\n                      </Button>\n                    </Link>\n                  </Form.Item>\n                </div>\n              </Form>\n            </Cards>\n          </Col>\n        </Row>\n      </Main>\n    </>\n  );\n};\n\nexport default AddBanner;\n","import { gql } from '@apollo/client';\n\nexport const bannerQuery = {\n  BANNER_ADD: gql`\n    mutation addBanner($data: BannerInput) {\n      addBanner(data: $data) {\n        message\n        status\n        data {\n          id\n        }\n      }\n    }\n  `,\n  BANNER_ITEM_ADD: gql`\n    mutation addBannerItem($data: BannerItemInput!) {\n      addBannerItem(data: $data) {\n        message\n        status\n        data {\n          id\n        }\n      }\n    }\n  `,\n  GET_ALL_BANNER: gql`\n    query getAllBanners {\n      getAllBanners {\n        message\n        status\n        tenant_id\n        data {\n          id\n          name\n          slug\n          status\n          createdAt\n        }\n      }\n    }\n  `,\n  GET_SINGLE_BANNER: gql`\n    query getSingleBanner($banner_id: Int!) {\n      getSingleBanner(query: { banner_id: $banner_id }) {\n        message\n        tenant_id\n        status\n        data {\n          id\n          name\n          status\n          banner_items {\n            id\n            title\n            sub_title\n            link\n            price\n            sale_price\n            button_text\n            option_1\n            option_2\n            image\n            sort_order\n          }\n        }\n      }\n    }\n  `,\n  BANNER_UPDATE: gql`\n    mutation updateBanner($data: UpdateBannerInput) {\n      updateBanner(data: $data) {\n        message\n        status\n      }\n    }\n  `,\n  BANNER_ITEM_UPDATE: gql`\n    mutation updateBannerItem($data: UpdateBannerItemInput) {\n      updateBannerItem(data: $data) {\n        message\n        status\n      }\n    }\n  `,\n  BANNER_ITEM_DELETE: gql`\n    mutation deleteBannerItem($banner_id: Int!) {\n      deleteBannerItem(data: { banner_id: $banner_id }) {\n        message\n        status\n        tenant_id\n      }\n    }\n  `,\n};\n"],"sourceRoot":""}