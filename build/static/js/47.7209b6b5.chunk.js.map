{"version":3,"sources":["container/productCondition/UpdateCondition.js","apollo/productCondition/index.js"],"names":["UpdateCondition","viewPermission","search","useLocation","params","queryString","parse","history","useHistory","token","useSelector","state","auth","useState","loading","setLoading","data","isLoading","condition","setCondition","useForm","form","useEffect","id","apolloClient","query","productConditionQuery","GET_SINGLE_CONDITION","variables","parseInt","context","headers","TENANTID","process","Authorization","then","res","getSingleProductCondition","status","s","error","setFieldsValue","name","catch","err","finally","title","gutter","sm","xs","headless","style","textAlign","tip","width","onFinish","values","mutate","mutation","CONDITION_UPDATE","refetchQueries","GET_ALL_CONDITION","updateProductCondition","toast","setTimeout","push","success","message","onFinishFailed","errorInfo","console","log","labelCol","span","Item","rules","required","max","label","placeholder","display","justifyContent","size","htmlType","type","raised","to","marginLeft","CONDITION_ADD","gql"],"mappings":"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","file":"static/js/47.7209b6b5.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Row, Col, Form, Input, Switch, Select, Upload, InputNumber, Spin } from 'antd';\nimport { PageHeader } from '../../components/page-headers/page-headers';\nimport { Main } from '../styled';\nimport { Cards } from '../../components/cards/frame/cards-frame';\nimport { Button } from '../../components/buttons/buttons';\nimport { Link, useHistory, useLocation } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport queryString from 'query-string';\nimport { productConditionQuery } from '../../apollo/productCondition';\nimport apolloClient from '../../apollo';\nimport { viewPermission } from '../../utility/utility';\n\nconst UpdateCondition = () => {\n  viewPermission('product-condition');\n  const { search } = useLocation();\n  const params = queryString.parse(search);\n  const history = useHistory();\n  const token = useSelector(state => state.auth.token);\n  const [loading, setLoading] = useState(false);\n  const [condition, setCondition] = useState({ data: [], isLoading: true });\n  const maxLength = 30;\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    if (!params.id) return;\n\n    apolloClient\n      .query({\n        query: productConditionQuery.GET_SINGLE_CONDITION,\n        variables: { query: { id: parseInt(params?.id) } },\n        context: {\n          headers: {\n            TENANTID: process.env.REACT_APP_TENANTID,\n            Authorization: token,\n          },\n        },\n      })\n      .then(res => {\n        const data = res?.data?.getSingleProductCondition;\n        if (!data?.status) return;\n        setCondition(s => ({ ...s, data: data?.data, error: '' }));\n        form.setFieldsValue({\n          name: data?.data?.name,\n        });\n      })\n      .catch(err => {\n        setCondition(s => ({ ...s, error: 'Something went Wrong.!! ' }));\n      })\n      .finally(() => {\n        setCondition(s => ({ ...s, isLoading: false }));\n      });\n  }, []);\n\n  //Submit Form\n  const handleSubmit = values => {\n    setLoading(true);\n    apolloClient\n      .mutate({\n        mutation: productConditionQuery.CONDITION_UPDATE,\n        variables: { data: { name: values.name, id: parseInt(params?.id) } },\n        refetchQueries: [\n          {\n            query: productConditionQuery.GET_ALL_CONDITION,\n            context: {\n              headers: {\n                TENANTID: process.env.REACT_APP_TENANTID,\n                Authorization: token,\n              },\n            },\n          },\n          ['getAllProductCondition'],\n        ],\n        context: {\n          headers: {\n            TENANTID: process.env.REACT_APP_TENANTID,\n            Authorization: token,\n          },\n        },\n      })\n      .then(res => {\n        const data = res?.data?.updateProductCondition;\n        if (!data?.status) return toast.error('Something Went wrong !!');\n        setTimeout(() => {\n          history.push('/admin/product-condition/list');\n        }, 1000);\n        toast.success(data?.message);\n      })\n      .catch(err => {\n        toast.error('Something Went wrong !!');\n      })\n      .finally(() => setLoading(false));\n  };\n\n  return (\n    <>\n      <PageHeader\n        title={`Manage Product Condition | Edit Product Condition ${\n          condition?.data?.name ? `(${condition?.data?.name})` : ''\n        }`}\n      />\n\n      <Main>\n        <Row gutter={25}>\n          <Col sm={24} xs={24}>\n            <Cards headless>\n              {condition?.isLoading ? (\n                <div style={{ textAlign: 'center' }}>\n                  <Spin tip=\"processing...\" />\n                </div>\n              ) : (\n                <Form\n                  style={{ width: '100%' }}\n                  form={form}\n                  name=\"addProductCondition\"\n                  onFinish={handleSubmit}\n                  onFinishFailed={errorInfo => console.log('form error info:\\n', errorInfo)}\n                  labelCol={{ span: 4 }}\n                >\n                  <Form.Item\n                    rules={[{ required: true, max: maxLength, message: 'Please Enter Product Condition Name' }]}\n                    name=\"name\"\n                    label=\"Name\"\n                  >\n                    <Input placeholder=\"Enter Product Condition Name\" />\n                  </Form.Item>\n                  <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\n                    <Form.Item>\n                      <Button loading={loading} size=\"default\" htmlType=\"submit\" type=\"primary\" raised>\n                        {loading ? 'Processing' : 'Save'}\n                      </Button>\n                      <Link to=\"/admin/product-condition/list\">\n                        <Button style={{ marginLeft: 10 }} type=\"light\" size=\"default\">\n                          Cancel\n                        </Button>\n                      </Link>\n                    </Form.Item>\n                  </div>\n                </Form>\n              )}\n            </Cards>\n          </Col>\n        </Row>\n      </Main>\n    </>\n  );\n};\n\nexport default UpdateCondition;\n","import { gql } from \"@apollo/client\";\n\nexport const productConditionQuery = {\n\n  CONDITION_ADD: gql`\n    mutation addProductCondition($name: String!){\n        addProductCondition(data: { name: $name }) {\n            message\n            status\n            tenant_id\n        }\n    }`,\n  CONDITION_UPDATE: gql`\n    mutation updateProductCondition($data: UpdateProductConditionInput){\n        updateProductCondition(data: $data) {\n            message\n            status\n            tenant_id\n        }\n    }`,\n  GET_ALL_CONDITION: gql`\n    query getAllProductCondition{\n        getAllProductCondition {\n            message\n            status\n            data {\n                id\n                name\n                slug\n                createdAt\n                updatedAt\n            }\n        }\n    }`,\n  GET_SINGLE_CONDITION: gql`\n    query getSingleProductCondition($query: GetSingleProductConditionInput){\n        getSingleProductCondition(query: $query) {\n            message\n            status\n            data {\n                id\n                name\n                slug\n                createdAt\n                updatedAt\n            }\n        }\n  }`\n}\n"],"sourceRoot":""}