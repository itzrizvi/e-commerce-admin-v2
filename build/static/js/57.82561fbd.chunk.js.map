{"version":3,"sources":["container/customers/AddCustomerGroup.js"],"names":["TextArea","AddCustomerGroup","viewPermission","search","useLocation","params","queryString","parse","history","useHistory","useState","data","isLoading","singleCustomerGroup","setSingleCustomerGroup","customergroup_status","setCustomergroup_status","setIsLoading","useForm","form","useEffect","id","apolloClient","query","customerQuery","GET_SINGLE_CUSTOMER_GROUP","variables","customer_group_id","parseInt","context","headers","TENANTID","process","Authorization","Cookies","get","then","res","getSingleCustomerGroup","status","s","error","catch","err","finally","title","customer_group_name","gutter","sm","xs","headless","div","className","style","width","name","onFinish","values","customergroup_description","customergroup_sortorder","mutate","mutation","customerMutation","UPDATE_CUSTOMER_GROUP","refetchQueries","GET_ALL_CUSTOMER_GROUPS","updateCustomerGroup","toast","message","setTimeout","push","success","console","log","CREATE_CUSTOMER_GROUP","createCustomerGroup","onFinishFailed","errorInfo","labelCol","span","Item","rules","required","max","label","initialValue","placeholder","rows","type","checked","onChange","display","justifyContent","marginTop","loading","size","htmlType","raised","to","marginLeft"],"mappings":"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","file":"static/js/57.82561fbd.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Row, Col, Form, Input, Switch, Spin } from 'antd';\nimport { PageHeader } from '../../components/page-headers/page-headers';\nimport { Main } from '../styled';\nimport { Cards } from '../../components/cards/frame/cards-frame';\nimport { Button } from '../../components/buttons/buttons';\nimport { Link, useHistory, useLocation } from 'react-router-dom';\nimport queryString from 'query-string';\nimport apolloClient, { customerMutation, customerQuery } from '../../utility/apollo';\nimport Cookies from 'js-cookie';\nimport { toast } from 'react-toastify';\nimport { viewPermission } from '../../utility/utility';\nconst { TextArea } = Input;\n\nconst AddCustomerGroup = () => {\n  viewPermission('customer-group');\n  const { search } = useLocation();\n  const params = queryString.parse(search);\n  const history = useHistory();\n\n  const [singleCustomerGroup, setSingleCustomerGroup] = useState({ data: [], isLoading: true });\n  const [customergroup_status, setCustomergroup_status] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n  const [form] = Form.useForm();\n  const maxLength = 30;\n\n  // LOAD SINGLE CUSTOMER GROUP\n  useEffect(() => {\n    if (!params.id) return;\n\n    apolloClient\n      .query({\n        query: customerQuery.GET_SINGLE_CUSTOMER_GROUP,\n        variables: { query: { customer_group_id: parseInt(params.id) } },\n        context: {\n          headers: {\n            TENANTID: process.env.REACT_APP_TENANTID,\n            Authorization: Cookies.get('psp_t'),\n          },\n        },\n      })\n      .then(res => {\n        const data = res?.data?.getSingleCustomerGroup;\n\n        if (!data?.status) return;\n        setSingleCustomerGroup(s => ({ ...s, data: data?.data, error: '' }));\n      })\n      .catch(err => {\n        setSingleCustomerGroup(s => ({ ...s, error: 'Something went Wrong.!! ' }));\n      })\n      .finally(() => {\n        setSingleCustomerGroup(s => ({ ...s, isLoading: false }));\n      });\n  }, []);\n\n  const handleSubmit = values => {\n    const { customer_group_name, customergroup_description, customergroup_sortorder } = values;\n\n    // ADD NEW CUSTOMER GROUP\n    if (!params.id) {\n      const variables = {\n        data: {\n          customer_group_name,\n          customergroup_description,\n          customergroup_sortorder: parseInt(customergroup_sortorder),\n          customergroup_status,\n        },\n      };\n      apolloClient\n        .mutate({\n          mutation: customerMutation.CREATE_CUSTOMER_GROUP,\n          variables,\n          refetchQueries: [\n            {\n              query: customerQuery.GET_ALL_CUSTOMER_GROUPS,\n              context: {\n                headers: {\n                  TENANTID: process.env.REACT_APP_TENANTID,\n                  Authorization: Cookies.get('psp_t'),\n                },\n              },\n            },\n            ['getAllCustomerGroups'],\n          ],\n          context: {\n            headers: {\n              TENANTID: process.env.REACT_APP_TENANTID,\n              Authorization: Cookies.get('psp_t'),\n            },\n          },\n        })\n        .then(res => {\n          const data = res?.data?.createCustomerGroup;\n          if (!data.status) return toast.error(data.message);\n          setTimeout(() => {\n            history.push('/admin/customers/group');\n          }, 1000);\n          toast.success(`${values.customer_group_name} Group added successfully`);\n        })\n        .catch(err => {\n          console.log('got error on addCustomerGroup', err);\n          return toast.error('Something Went wrong !!');\n        })\n        .finally(() => {\n          setIsLoading(false);\n        });\n    }\n    // UPDATE CUSTOMER GROUP\n    else {\n      const variables = {\n        data: {\n          id: parseInt(params.id),\n          customer_group_name,\n          customergroup_description,\n          customergroup_sortorder: parseInt(customergroup_sortorder),\n          customergroup_status,\n        },\n      };\n      apolloClient\n        .mutate({\n          mutation: customerMutation.UPDATE_CUSTOMER_GROUP,\n          variables,\n          refetchQueries: [\n            {\n              query: customerQuery.GET_ALL_CUSTOMER_GROUPS,\n              context: {\n                headers: {\n                  TENANTID: process.env.REACT_APP_TENANTID,\n                  Authorization: Cookies.get('psp_t'),\n                },\n              },\n            },\n            ['getAllCustomerGroups'],\n          ],\n          context: {\n            headers: {\n              TENANTID: process.env.REACT_APP_TENANTID,\n              Authorization: Cookies.get('psp_t'),\n            },\n          },\n        })\n        .then(res => {\n          const data = res?.data?.updateCustomerGroup;\n          if (!data.status) return toast.error(data.message);\n          setTimeout(() => {\n            history.push('/admin/customers/group');\n          }, 1000);\n          toast.success(`${values.customer_group_name} Group Updated successfully`);\n        })\n        .catch(err => {\n          console.log('got error on addCustomerGroup', err);\n          return toast.error('Something Went wrong !!');\n        })\n        .finally(() => {\n          setIsLoading(false);\n        });\n    }\n  };\n\n  return (\n    <>\n      <PageHeader\n        title={\n          params.id\n            ? `Manage Group | Edit ${\n                singleCustomerGroup.isLoading ? '' : `(${singleCustomerGroup.data.customer_group_name})`\n              }`\n            : 'Add Customer Group'\n        }\n      />\n      <Main>\n        <Row gutter={25}>\n          <Col sm={24} xs={24}>\n            <Cards headless>\n              {params.id && singleCustomerGroup.isLoading ? (\n                <div div className=\"spin\">\n                  <Spin />\n                </div>\n              ) : (\n                <Form\n                  style={{ width: '100%' }}\n                  form={form}\n                  name=\"addRole\"\n                  onFinish={handleSubmit}\n                  onFinishFailed={errorInfo => console.log('form error info:\\n', errorInfo)}\n                  labelCol={{ span: 4 }}\n                >\n                  <Form.Item\n                    rules={[{ required: true, max: maxLength, message: 'Please enter Attribute Group Name' }]}\n                    name=\"customer_group_name\"\n                    label=\"Group Name\"\n                    initialValue={params.id ? singleCustomerGroup.data.customer_group_name : ''}\n                  >\n                    <Input placeholder=\"Enter Attribute Group Name\" />\n                  </Form.Item>\n\n                  <Form.Item\n                    rules={[{ required: true, message: 'Please enter Group Description' }]}\n                    name=\"customergroup_description\"\n                    label=\"Description\"\n                    initialValue={singleCustomerGroup.data.customergroup_description || ''}\n                  >\n                    <TextArea rows={4} placeholder=\"Enter Group Description\" />\n                  </Form.Item>\n\n                  <Form.Item\n                    rules={[{ required: true, max: maxLength, message: 'Please enter Sort order' }]}\n                    name=\"customergroup_sortorder\"\n                    label=\"Sort order\"\n                    initialValue={\n                      singleCustomerGroup.data.customergroup_sortorder\n                        ? parseInt(singleCustomerGroup.data.customergroup_sortorder)\n                        : ''\n                    }\n                  >\n                    <Input type=\"number\" placeholder=\"Enter sort order\" />\n                  </Form.Item>\n\n                  <Form.Item label=\"Group Status\">\n                    <Switch checked={customergroup_status} onChange={checked => setCustomergroup_status(checked)} />\n                  </Form.Item>\n\n                  <div\n                    style={{\n                      display: 'flex',\n                      justifyContent: 'flex-end',\n                      marginTop: '3em',\n                    }}\n                  >\n                    <Form.Item>\n                      <Button loading={isLoading} size=\"default\" htmlType=\"submit\" type=\"primary\" raised>\n                        {isLoading ? 'Processing' : 'Save'}\n                      </Button>\n                      <Link to=\"/admin/customers/group\">\n                        <Button style={{ marginLeft: 10 }} type=\"light\" size=\"default\">\n                          Cancel\n                        </Button>\n                      </Link>\n                    </Form.Item>\n                  </div>\n                </Form>\n              )}\n            </Cards>\n          </Col>\n        </Row>\n      </Main>\n    </>\n  );\n};\n\nexport default AddCustomerGroup;\n"],"sourceRoot":""}