{"version":3,"sources":["container/email/ListContent.js","apollo/email/index.js"],"names":["ListContent","viewPermission","useState","data","loading","error","emailContent","setEmailContent","filteredEmailContent","setFilteredEmailContent","isFilter","setIsFilter","token","useSelector","state","auth","useEffect","apolloClient","query","EmailTemplateQuery","GET_EMAIL_TEMPLATE_CONTENT_LIST","context","headers","TENANTID","process","Authorization","then","res","getEmailTemplateList","s","catch","err","finally","columns","title","dataIndex","key","width","ellipsis","sorter","a","b","id","toUpperCase","name","slug","align","render","text","record","className","format","parseInt","to","buttons","size","type","icon","gutter","sm","xs","headless","placeholder","prefix","onChange","e","value","target","filter","email","emailHeader","emailFooter","toLowerCase","includes","pagination","defaultPageSize","config","EMAIL_TEMPLATE_PER_PAGE","total","length","showTotal","range","rowKey","dataSource","rowClassName","index","GET_EMAIL_HEADER_FOOTER_LIST","gql","ADD_EMAIL_TEMPLATE_HEADER_FOOTER","SINGLE_EMAIL_TEMPLATE_HEADER_FOOTER","EMAIL_TEMPLATE_HEADER_FOOTER_UPDATE","GET_EMAIL_TEMPLATE_LIST","ADD_EMAIL_TEMPLATE_LIST","SINGLE_EMAIL_TEMPLATE_LIST","UPDATE_EMAIL_TEMPLATE_LIST","CREATE_EMAIL_TEMPLATE","GET_SINGLE_EMAIL_CONTENT_TEMPLATE","UPDATE_EMAIL_TEMPLATE_CONTENT","GET_EMAIL_TEMPLATE_PREVIEW"],"mappings":"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","file":"static/js/40.aaee08f1.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { SearchOutlined } from '@ant-design/icons';\nimport { Row, Col, Spin, Input, Table } from 'antd';\nimport FeatherIcon from 'feather-icons-react';\nimport { PageHeader } from '../../components/page-headers/page-headers';\nimport { Main } from '../styled';\nimport { Cards } from '../../components/cards/frame/cards-frame';\nimport { Button } from '../../components/buttons/buttons';\nimport { Link } from 'react-router-dom';\nimport FontAwesome from 'react-fontawesome';\nimport apolloClient from '../../apollo';\nimport { useSelector } from 'react-redux';\nimport Moment from 'react-moment';\nimport { viewPermission } from '../../utility/utility';\nimport config from '../../config/config';\nimport { EmailTemplateQuery } from '../../apollo/email';\n\nconst ListContent = () => {\n  viewPermission('email-template');\n  const [emailContent, setEmailContent] = useState({ data: [], loading: true, error: '' });\n  const [filteredEmailContent, setFilteredEmailContent] = useState([]);\n  const [isFilter, setIsFilter] = useState(false);\n  const token = useSelector(state => state.auth.token);\n\n  useEffect(() => {\n    apolloClient\n      .query({\n        query: EmailTemplateQuery.GET_EMAIL_TEMPLATE_CONTENT_LIST,\n        context: {\n          headers: {\n            TENANTID: process.env.REACT_APP_TENANTID,\n            Authorization: token,\n          },\n        },\n      })\n      .then(res => {\n        const data = res?.data?.getEmailTemplateList;\n        setEmailContent(s => ({ ...s, data: data?.data, error: '' }));\n      })\n      .catch(err => {\n        setEmailContent(s => ({ ...s, error: 'Something went Wrong.!! ' }));\n      })\n      .finally(() => {\n        setEmailContent(s => ({ ...s, loading: false }));\n      });\n  }, []);\n\n  const columns = [\n    {\n      title: 'ID',\n      dataIndex: 'id',\n      key: 'id',\n      width: 80,\n      ellipsis: true,\n      sorter: (a, b) => (a.id.toUpperCase() > b.id.toUpperCase() ? 1 : -1),\n    },\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      key: 'name',\n      width: 200,\n      ellipsis: true,\n      sorter: (a, b) => (a.name.toUpperCase() > b.name.toUpperCase() ? 1 : -1),\n    },\n    {\n      title: 'Alias',\n      dataIndex: 'slug',\n      key: 'slug',\n      width: 200,\n      ellipsis: true,\n      sorter: (a, b) => (a.slug.toUpperCase() > b.slug.toUpperCase() ? 1 : -1),\n    },\n    {\n      title: 'Header Name',\n      dataIndex: ['emailHeader', 'name'],\n      key: 'name',\n      sorter: (a, b) => (a.slug.toUpperCase() > b.slug.toUpperCase() ? 1 : -1),\n    },\n    {\n      title: 'Footer Name',\n      dataIndex: ['emailFooter', 'name'],\n      key: 'name',\n      sorter: (a, b) => (a.slug.toUpperCase() > b.slug.toUpperCase() ? 1 : -1),\n    },\n    {\n      title: 'Date',\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      align: 'center',\n      width: 120,\n      render: (text, record) => (\n        <span className={'status-text'}>{<Moment format=\"DD MMMM YYYY\">{parseInt(text)}</Moment>}</span>\n      ),\n    },\n    {\n      title: 'Action',\n      dataIndex: 'action',\n      align: 'right',\n      key: 'action',\n      width: 80,\n      render: (text, record) => (\n        <>\n          <Link to={`/admin/email/content/edit/${record.id}`}>\n            <FontAwesome name=\"edit\" />\n          </Link>\n        </>\n      ),\n    },\n  ];\n\n  const onChangeSearch = e => {\n    const value = e.target.value;\n    setIsFilter(value);\n    setFilteredEmailContent(\n      emailContent.data.filter(email =>\n        (email?.name + email?.emailHeader?.name + email?.slug + email?.emailFooter?.name)\n          .toLowerCase()\n          .includes(value.toLowerCase()),\n      ),\n    );\n  };\n\n  return (\n    <>\n      <PageHeader\n        title=\"Email Content\"\n        buttons={[\n          <div key=\"email-template\" className=\"page-header-actions\">\n            <Link to=\"/admin/email/content/add\">\n              <Button size=\"small\" title=\"Add Email Content\" type=\"primary\">\n                <FeatherIcon icon=\"plus\" />\n              </Button>\n            </Link>\n          </div>,\n        ]}\n      />\n      <Main>\n        <Row gutter={25}>\n          <Col sm={24} xs={24}>\n            <Cards headless>\n              {emailContent.loading ? (\n                <div className=\"spin\">\n                  <Spin />\n                </div>\n              ) : emailContent.error ? (\n                <p>{emailContent.error}</p>\n              ) : (\n                <>\n                  <Input\n                    placeholder=\"Search in Email Template Content...\"\n                    prefix={<SearchOutlined />}\n                    onChange={onChangeSearch}\n                  />\n                  <br />\n                  <br />\n\n                  <span className={'psp_list'}>\n                    <Table\n                      className=\"table-responsive\"\n                      columns={columns}\n                      pagination={{\n                        defaultPageSize: config.EMAIL_TEMPLATE_PER_PAGE,\n                        total: isFilter ? emailContent?.data?.length : emailContent?.data?.length,\n                        showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} items`,\n                      }}\n                      rowKey={'id'}\n                      size=\"small\"\n                      dataSource={isFilter ? filteredEmailContent : emailContent.data}\n                      rowClassName={(record, index) => (index % 2 === 0 ? '' : 'altTableClass')}\n                    />\n                  </span>\n                </>\n              )}\n            </Cards>\n          </Col>\n        </Row>\n      </Main>\n    </>\n  );\n};\n\nexport default ListContent;\n","import { gql } from '@apollo/client';\n\nexport const EmailTemplateQuery = {\n  GET_EMAIL_HEADER_FOOTER_LIST: gql`\n    query getEmailTempHeaderFooterList {\n      getEmailTempHeaderFooterList {\n        message\n        status\n        data {\n          id\n          name\n          slug\n          content\n          type\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  `,\n  ADD_EMAIL_TEMPLATE_HEADER_FOOTER: gql`\n    mutation addEmailTempHeaderFooter($data: AddEmailTempHFInput) {\n      addEmailTempHeaderFooter(data: $data) {\n        message\n        status\n      }\n    }\n  `,\n  SINGLE_EMAIL_TEMPLATE_HEADER_FOOTER: gql`\n    query getSingleEmailTempHeaderFooter($query: GetSingleEmailHeaderFooterInput) {\n      getSingleEmailTempHeaderFooter(query: $query) {\n        message\n        status\n        data {\n          id\n          name\n          slug\n          content\n          layout_type\n          type\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  `,\n  EMAIL_TEMPLATE_HEADER_FOOTER_UPDATE: gql`\n    mutation updateEmailTempHeaderFooter($data: UpdateEmailTempHFInput) {\n      updateEmailTempHeaderFooter(data: $data) {\n        message\n        status\n      }\n    }\n  `,\n  GET_EMAIL_TEMPLATE_LIST: gql`\n    query getAllEmailTemplateList {\n      getAllEmailTemplateList {\n        message\n        status\n        data {\n          id\n          email_template_id\n          name\n          slug\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  `,\n  ADD_EMAIL_TEMPLATE_LIST: gql`\n    mutation addEmailTemplateOnList($data: AddEmailTemplateListInput) {\n      addEmailTemplateOnList(data: $data) {\n        message\n        status\n      }\n    }\n  `,\n  SINGLE_EMAIL_TEMPLATE_LIST: gql`\n    query getSingleEmailTemplateList($query: GetSingleEmailTemplateListInput) {\n      getSingleEmailTemplateList(query: $query) {\n        message\n        status\n        data {\n          id\n          email_template_id\n          name\n          slug\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  `,\n  UPDATE_EMAIL_TEMPLATE_LIST: gql`\n    mutation updateEmailTemplateOnList($data: UpdateEmailTemplateListInput) {\n      updateEmailTemplateOnList(data: $data) {\n        message\n        status\n      }\n    }\n  `,\n  CREATE_EMAIL_TEMPLATE: gql`\n    mutation createEmailTemplate($data: addEmailTemplateInput) {\n      createEmailTemplate(data: $data) {\n        message\n        status\n      }\n    }\n  `,\n  GET_EMAIL_TEMPLATE_CONTENT_LIST: gql`\n    query getEmailTemplateList {\n      getEmailTemplateList {\n        message\n        status\n        data {\n          id\n          name\n          slug\n          createdAt\n          updatedAt\n          emailHeader {\n            id\n            name\n            slug\n          }\n          emailFooter {\n            id\n            name\n            slug\n          }\n        }\n      }\n    }\n  `,\n  GET_SINGLE_EMAIL_CONTENT_TEMPLATE: gql`\n    query getSingleEmailTemplate($query: GetSingleEmailTemplateInput) {\n      getSingleEmailTemplate(query: $query) {\n        message\n        status\n        data {\n          id\n          name\n          slug\n          content\n          layout_type\n          createdAt\n          updatedAt\n          emailHeader {\n            id\n            name\n            slug\n            content\n            type\n            createdAt\n            updatedAt\n          }\n          emailFooter {\n            id\n            name\n            slug\n            content\n            type\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n  `,\n  UPDATE_EMAIL_TEMPLATE_CONTENT: gql`\n    mutation updateEmailTemplate($data: updateEmailTemplateInput) {\n      updateEmailTemplate(data: $data) {\n        message\n        status\n      }\n    }\n  `,\n  GET_EMAIL_TEMPLATE_PREVIEW: gql`\n    query getEmailTemplatePreview($query: GetEmailTemplatePreviewInput) {\n      getEmailTemplatePreview(query: $query) {\n        message\n        status\n        tenant_id\n        data\n      }\n    }\n  `,\n};\n"],"sourceRoot":""}