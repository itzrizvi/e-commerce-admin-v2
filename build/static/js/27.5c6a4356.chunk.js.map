{"version":3,"sources":["container/brand/AddBrand.js","apollo/brand/index.js"],"names":["AddBrand","viewPermission","TextArea","history","useHistory","token","useSelector","state","auth","useState","loading","setLoading","isLoading","setIsLoading","brandStatus","setBrandStatus","image","setImage","thumbnail","setThumbnail","order","setOrder","category","setCategory","categories","setCategories","useForm","form","useEffect","apolloClient","query","brandQuery","GET_CATEGORIES","context","headers","TENANTID","process","Authorization","then","res","data","getParentCategories","catch","err","console","log","uploadButton","style","marginTop","title","gutter","sm","xs","headless","textAlign","tip","width","name","onFinish","values","modify_category","forEach","val","push","cat_id","length","toast","error","brandSortOrder","apolloUploadClient","mutate","mutation","BRAND_ADD","BRAND_ADD_WI","variables","file","refetchQueries","GET_ALL_BRAND","createBrand","status","setTimeout","success","message","finally","onFinishFailed","errorInfo","labelCol","span","Item","rules","required","max","label","placeholder","rows","mode","initialvalues","onChange","e","optionLabelProp","map","Option","key","id","value","cat_name","className","defaultValue","checked","checkedChildren","unCheckedChildren","listType","showUploadList","beforeUpload","isJpg","type","isLt2M","size","URL","createObjectURL","fileList","src","onError","errorImageSrc","alt","display","justifyContent","htmlType","raised","to","marginLeft","gql","GET_ALL_BRAND_WITH_CATEGORY","GET_SINGLE_BRAND","BRAND_UPDATE","BRAND_UPDATE_WI"],"mappings":"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","file":"static/js/27.5c6a4356.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Row, Col, Form, Input, Switch, Select, Upload, InputNumber, Spin } from 'antd';\nimport { PageHeader } from '../../components/page-headers/page-headers';\nimport { Main } from '../styled';\nimport { Cards } from '../../components/cards/frame/cards-frame';\nimport { Button } from '../../components/buttons/buttons';\nimport { Link, useHistory } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { PlusOutlined } from '@ant-design/icons';\nimport { brandQuery } from '../../apollo/brand';\nimport apolloClient from '../../apollo';\nimport { apolloUploadClient } from '../../apollo';\nimport { errorImageSrc } from '../../utility/images';\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\nimport { viewPermission } from '../../utility/utility';\n\nconst AddBrand = () => {\n  viewPermission('manufacture');\n  const { TextArea } = Input;\n  const history = useHistory();\n  const token = useSelector(state => state.auth.token);\n  const [loading, setLoading] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [brandStatus, setBrandStatus] = useState(true);\n  const [image, setImage] = useState('');\n  const [thumbnail, setThumbnail] = useState('');\n  const [order, setOrder] = useState(0);\n  const [category, setCategory] = useState([]);\n  const [categories, setCategories] = useState([]);\n  const maxLength = 30;\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    setLoading(true);\n    apolloClient\n      .query({\n        query: brandQuery.GET_CATEGORIES,\n        context: {\n          headers: {\n            TENANTID: process.env.REACT_APP_TENANTID,\n            Authorization: token,\n          },\n        },\n      })\n      .then(res => {\n        const data = res?.data?.getParentCategories?.categories;\n        setCategories(data);\n        setLoading(false);\n      })\n      .catch(err => {\n        setCategories([]);\n        console.log(err);\n      });\n  }, []);\n\n  //Submit Form\n  const handleSubmit = values => {\n    setIsLoading(true);\n    const modify_category = [];\n    category.forEach(val => {\n      modify_category.push({ cat_id: val });\n    });\n\n    if (modify_category.length === 0) {\n      setIsLoading(false);\n      return toast.error('Please Select Category');\n    }\n\n    const data = { ...values, brandStatus: brandStatus, brandSortOrder: order, categories: modify_category };\n    apolloUploadClient\n      .mutate({\n        mutation: image ? brandQuery.BRAND_ADD : brandQuery.BRAND_ADD_WI,\n        variables: image ? { data, file: image } : { data },\n        refetchQueries: [\n          {\n            query: brandQuery.GET_ALL_BRAND,\n            context: {\n              headers: {\n                TENANTID: process.env.REACT_APP_TENANTID,\n                Authorization: token,\n              },\n            },\n          },\n          ['getAllBrands'],\n        ],\n        context: {\n          headers: {\n            TENANTID: process.env.REACT_APP_TENANTID,\n            Authorization: token,\n          },\n        },\n      })\n      .then(res => {\n        const data = res?.data?.createBrand;\n        if (!data?.status) return toast.error('Something Went wrong !!');\n        setTimeout(() => {\n          history.push('/admin/brand/list');\n        }, 1000);\n        toast.success(data?.message);\n      })\n      .catch(err => {\n        toast.error('Something Went wrong !!');\n      })\n      .finally(() => setIsLoading(false));\n  };\n\n  // Assign Image\n  const beforeImageUpload = file => {\n    const isJpg = file.type === 'image/jpeg';\n    if (!isJpg) toast.error('You can only upload JPG file!');\n    const isLt2M = file.size / 1024 / 1024 < 1;\n    if (!isLt2M) toast.error('Image must smaller than 1MB!');\n\n    if (isJpg && isLt2M) {\n      setThumbnail(URL.createObjectURL(file));\n      setImage(file);\n    }\n\n    return false;\n  };\n\n  // Upload Button Design\n  const uploadButton = (\n    <div>\n      <PlusOutlined />\n      <div style={{ marginTop: 8 }}> Upload </div>\n    </div>\n  );\n\n  return (\n    <>\n      <PageHeader title=\"Add Manufacture\" />\n\n      <Main>\n        <Row gutter={25}>\n          <Col sm={24} xs={24}>\n            <Cards headless>\n              {loading ? (\n                <div style={{ textAlign: 'center' }}>\n                  <Spin tip=\"processing...\" />\n                </div>\n              ) : (\n                <Form\n                  style={{ width: '100%' }}\n                  form={form}\n                  name=\"addBrand\"\n                  onFinish={handleSubmit}\n                  onFinishFailed={errorInfo => console.log('form error info:\\n', errorInfo)}\n                  labelCol={{ span: 4 }}\n                >\n                  <Form.Item\n                    rules={[{ required: true, max: maxLength, message: 'Please Enter Manufacture Name' }]}\n                    name=\"brandName\"\n                    label=\"Name\"\n                  >\n                    <Input placeholder=\"Enter Manufacture Name\" />\n                  </Form.Item>\n                  <Form.Item\n                    rules={[{ required: true, message: 'Please Enter Manufacture Description' }]}\n                    name=\"brandDescription\"\n                    label=\"Description\"\n                  >\n                    <TextArea rows={4} placeholder=\"Enter Manufacture Description\" />\n                  </Form.Item>\n\n                  <Form.Item label=\"Categories\" required>\n                    <Select\n                      mode=\"multiple\"\n                      style={{ width: '100%' }}\n                      placeholder=\"Select Categories\"\n                      initialvalues=\"\"\n                      onChange={e => setCategory(e)}\n                      optionLabelProp=\"label\"\n                    >\n                      {categories.map(val => {\n                        return (\n                          <Select.Option key={val.id} value={val.id} label={val.cat_name}>\n                            <div className=\"demo-option-label-item\">{val.cat_name}</div>\n                          </Select.Option>\n                        );\n                      })}\n                    </Select>\n                  </Form.Item>\n\n                  <Form.Item label=\"Sort Order\">\n                    <InputNumber defaultValue={0} onChange={setOrder} style={{ width: '100%' }} />\n                  </Form.Item>\n                  <Form.Item label=\"Status\">\n                    <Switch\n                      checked={brandStatus}\n                      onChange={checked => setBrandStatus(checked)}\n                      checkedChildren=\"ON\"\n                      unCheckedChildren=\"OFF\"\n                    />\n                  </Form.Item>\n\n                  <Form.Item label=\"Image\">\n                    <Upload\n                      name=\"avatar\"\n                      listType=\"picture-card\"\n                      className=\"avatar-uploader\"\n                      showUploadList={false}\n                      beforeUpload={beforeImageUpload}\n                      fileList={[]}\n                    >\n                      {thumbnail ? (\n                        <LazyLoadImage\n                          src={thumbnail}\n                          onError={errorImageSrc}\n                          alt=\"image\"\n                          style={{\n                            width: '100%',\n                          }}\n                        />\n                      ) : (\n                        uploadButton\n                      )}\n                    </Upload>\n                  </Form.Item>\n\n                  <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\n                    <Form.Item>\n                      <Button loading={isLoading} size=\"default\" htmlType=\"submit\" type=\"primary\" raised>\n                        {isLoading ? 'Processing' : 'Save'}\n                      </Button>\n                      <Link to=\"/admin/brand/list\">\n                        <Button style={{ marginLeft: 10 }} type=\"light\" size=\"default\">\n                          Cancel\n                        </Button>\n                      </Link>\n                    </Form.Item>\n                  </div>\n                </Form>\n              )}\n            </Cards>\n          </Col>\n        </Row>\n      </Main>\n    </>\n  );\n};\n\nexport default AddBrand;\n","import { gql } from \"@apollo/client\";\n\nexport const brandQuery = {\n  GET_ALL_BRAND: gql`\n  query getAllBrands {\n  getAllBrands {\n    message\n    status\n    data {\n      id\n      brand_name\n      brand_slug\n      brand_description\n      brand_status\n      image\n      brand_sort_order\n      createdAt\n    }\n  }\n}`,\n  GET_ALL_BRAND_WITH_CATEGORY: gql`\nquery getAllBrands {\n  getAllBrands {\n    message\n    status\n    data {\n      id\n      brand_name\n      brand_slug\n      brand_status\n      brand_description\n      image\n      createdAt\n      updatedAt\n      categories {\n        id\n        cat_name\n        cat_slug\n        cat_status\n        subcategories {\n          id\n          cat_name\n          cat_slug\n          cat_status\n          subsubcategories {\n            id\n            cat_name\n            cat_slug\n            cat_status\n          }\n        }\n      }\n    }\n  }\n}\n\n`,\n  GET_CATEGORIES: gql`\n  query getParentCategories {\n    getParentCategories {\n      message\n      status\n      categories {\n        id\n        cat_name\n      }\n    }\n  }\n`,\n  GET_SINGLE_BRAND: gql`\n  query getSingleBrand($query: GetSingleBrandInput){\n    getSingleBrand(query: $query) {\n      message\n      status\n      data {\n        brand_name\n        brand_description\n        brand_status\n        brand_sort_order\n        image\n        categories {\n          id\n          cat_name\n        }\n      }\n    }\n  }\n`,\n  BRAND_UPDATE: gql`\n  mutation updateBrand($data: UpdateBrandInput, $file:Upload){\n    updateBrand(data:$data, file: $file){\n      message\n      status\n    }\n  }`,\n  BRAND_UPDATE_WI: gql`\n  mutation updateBrand($data: UpdateBrandInput){\n    updateBrand(data:$data){\n      message\n      status\n    }\n  }`,\n  BRAND_ADD: gql`\n    mutation createBrand($data: BrandCreateInput, $file:Upload) {\n      createBrand(data: $data, file:$file) {\n        message\n        status\n      }\n    }`,\n  BRAND_ADD_WI: gql`\n      mutation createBrand($data: BrandCreateInput) {\n        createBrand(data: $data) {\n          message\n          status\n        }\n     }`\n}\n"],"sourceRoot":""}