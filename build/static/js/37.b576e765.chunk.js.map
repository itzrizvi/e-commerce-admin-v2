{"version":3,"sources":["container/email/HeaderFooterAdd.js","apollo/email/index.js"],"names":["Quill","register","ImageResize","htmlEditButton","modules","toolbar","font","header","color","background","script","list","indent","align","imageResize","parchment","import","okText","msg","HeaderFooterAdd","viewPermission","TextArea","history","useHistory","token","useSelector","state","auth","useState","isLoading","setIsLoading","content","setContent","htmlContent","setHTMLContent","customHtmlSwitch","setCustomHtmlSwitch","useForm","form","title","gutter","sm","xs","headless","style","width","name","onFinish","values","customVer","layout_type","apolloClient","mutate","mutation","EmailTemplateQuery","ADD_EMAIL_TEMPLATE_HEADER_FOOTER","variables","data","refetchQueries","query","GET_EMAIL_HEADER_FOOTER_LIST","context","headers","TENANTID","process","Authorization","fetchPolicy","then","res","addEmailTempHeaderFooter","status","toast","error","setTimeout","push","success","message","catch","err","finally","onFinishFailed","errorInfo","console","log","labelCol","span","Item","rules","required","max","label","placeholder","optionLabelProp","Option","value","className","defaultChecked","onChange","e","theme","target","display","justifyContent","loading","size","htmlType","type","raised","to","marginLeft","gql","SINGLE_EMAIL_TEMPLATE_HEADER_FOOTER","EMAIL_TEMPLATE_HEADER_FOOTER_UPDATE","GET_EMAIL_TEMPLATE_LIST","ADD_EMAIL_TEMPLATE_LIST","SINGLE_EMAIL_TEMPLATE_LIST","UPDATE_EMAIL_TEMPLATE_LIST","CREATE_EMAIL_TEMPLATE","GET_EMAIL_TEMPLATE_CONTENT_LIST","GET_SINGLE_EMAIL_CONTENT_TEMPLATE","UPDATE_EMAIL_TEMPLATE_CONTENT","GET_EMAIL_TEMPLATE_PREVIEW"],"mappings":"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","file":"static/js/37.b576e765.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Row, Col, Form, Input, Select, Spin, Switch } from 'antd';\nimport { PageHeader } from '../../components/page-headers/page-headers';\nimport { Main } from '../styled';\nimport { Cards } from '../../components/cards/frame/cards-frame';\nimport { Button } from '../../components/buttons/buttons';\nimport { Link, useHistory } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport apolloClient from '../../apollo';\nimport { viewPermission } from '../../utility/utility';\nimport ReactQuill, { Quill } from 'react-quill';\nimport 'react-quill/dist/quill.snow.css';\nimport { EmailTemplateQuery } from '../../apollo/email';\nimport ImageResize from 'quill-image-resize-module-react';\nimport htmlEditButton from 'quill-html-edit-button';\nQuill.register('modules/imageResize', ImageResize);\nQuill.register('modules/htmlEditButton', htmlEditButton);\n\nconst modules = {\n  toolbar: [\n    [{ font: [] }],\n    [{ header: [1, 2, 3, 4, 5, 6, false] }],\n    ['bold', 'italic', 'underline', 'strike'],\n    [{ color: [] }, { background: [] }],\n    [{ script: 'sub' }, { script: 'super' }],\n    ['blockquote', 'code-block'],\n    [{ list: 'ordered' }, { list: 'bullet' }],\n    [{ indent: '-1' }, { indent: '+1' }, { align: [] }],\n    ['link', 'image', 'video'],\n    ['clean'],\n  ],\n  imageResize: {\n    parchment: Quill.import('parchment'),\n    modules: ['Resize', 'DisplaySize'],\n  },\n  htmlEditButton: {\n    okText: 'Save',\n    msg: 'Edit HTML here, when you click \"Save\" the quill editor\\'s contents will be replaced',\n  },\n};\n\nconst HeaderFooterAdd = () => {\n  viewPermission('email-template');\n  const { TextArea } = Input;\n  const history = useHistory();\n  const token = useSelector(state => state.auth.token);\n  const [isLoading, setIsLoading] = useState(false);\n  const [content, setContent] = useState('');\n  const [htmlContent, setHTMLContent] = useState('');\n  const [customHtmlSwitch, setCustomHtmlSwitch] = useState(false);\n  const [form] = Form.useForm();\n\n  //Submit Form\n  const handleSubmit = values => {\n    setIsLoading(true);\n    let customVer;\n    if (customHtmlSwitch) customVer = { layout_type: 'custom', content: htmlContent };\n    else customVer = { layout_type: 'dynamic', content };\n    apolloClient\n      .mutate({\n        mutation: EmailTemplateQuery.ADD_EMAIL_TEMPLATE_HEADER_FOOTER,\n        variables: { data: { ...values, ...customVer } },\n        refetchQueries: [\n          {\n            query: EmailTemplateQuery.GET_EMAIL_HEADER_FOOTER_LIST,\n            context: {\n              headers: {\n                TENANTID: process.env.REACT_APP_TENANTID,\n                Authorization: token,\n              },\n            },\n            fetchPolicy: 'network-only',\n          },\n          ['getEmailTempHeaderFooterList'],\n        ],\n        context: {\n          headers: {\n            TENANTID: process.env.REACT_APP_TENANTID,\n            Authorization: token,\n          },\n        },\n      })\n      .then(res => {\n        const data = res?.data?.addEmailTempHeaderFooter;\n        if (!data?.status) return toast.error('Something Went wrong !!');\n        setTimeout(() => {\n          history.push('/admin/email/header-footer/list');\n        }, 1000);\n        toast.success(data?.message);\n      })\n      .catch(err => {\n        toast.error('Something Went wrong !!');\n      })\n      .finally(() => setIsLoading(false));\n  };\n\n  return (\n    <>\n      <PageHeader title=\"Add Email Header/Footer\" />\n\n      <Main>\n        <Row gutter={25}>\n          <Col sm={24} xs={24}>\n            <Cards headless>\n              <Form\n                style={{ width: '100%' }}\n                form={form}\n                name=\"addEmailHeaderFooter\"\n                onFinish={handleSubmit}\n                onFinishFailed={errorInfo => console.log('form error info:\\n', errorInfo)}\n                labelCol={{ span: 4 }}\n              >\n                <Form.Item\n                  rules={[{ required: true, max: 100, message: 'Please Enter Email Header/Footer Name' }]}\n                  name=\"name\"\n                  label=\"Name\"\n                >\n                  <Input placeholder=\"Enter Header/Footer Name\" />\n                </Form.Item>\n                <Form.Item name=\"type\" label=\"Type\" required>\n                  <Select style={{ width: '100%' }} placeholder=\"Select Header/Footer Type\" optionLabelProp=\"label\">\n                    <Select.Option value=\"header\" label=\"Header\">\n                      <div className=\"demo-option-label-item\">Header</div>\n                    </Select.Option>\n                    <Select.Option value=\"footer\" label=\"Footer\">\n                      <div className=\"demo-option-label-item\">Footer</div>\n                    </Select.Option>\n                  </Select>\n                </Form.Item>\n                <Form.Item label=\"Custom HTML\">\n                  <Switch defaultChecked={false} onChange={e => setCustomHtmlSwitch(e)} />\n                </Form.Item>\n                {!customHtmlSwitch && (\n                  <Form.Item label=\"Content\">\n                    <ReactQuill\n                      theme=\"snow\"\n                      modules={modules}\n                      placeholder=\"Content goes here...\"\n                      onChange={setContent}\n                    />\n                  </Form.Item>\n                )}\n\n                {customHtmlSwitch && (\n                  <Form.Item label=\"Custom HTML\">\n                    <TextArea\n                      onChange={e => setHTMLContent(e.target.value)}\n                      placeholder=\"Paste your HTML Code Here...\"\n                    />\n                  </Form.Item>\n                )}\n\n                <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\n                  <Form.Item>\n                    <Button loading={isLoading} size=\"default\" htmlType=\"submit\" type=\"primary\" raised>\n                      {isLoading ? 'Processing' : 'Save'}\n                    </Button>\n                    <Link to=\"/admin/email/header-footer/list\">\n                      <Button style={{ marginLeft: 10 }} type=\"light\" size=\"default\">\n                        Cancel\n                      </Button>\n                    </Link>\n                  </Form.Item>\n                </div>\n              </Form>\n            </Cards>\n          </Col>\n        </Row>\n      </Main>\n    </>\n  );\n};\n\nexport default HeaderFooterAdd;\n","import { gql } from '@apollo/client';\n\nexport const EmailTemplateQuery = {\n  GET_EMAIL_HEADER_FOOTER_LIST: gql`\n    query getEmailTempHeaderFooterList {\n      getEmailTempHeaderFooterList {\n        message\n        status\n        data {\n          id\n          name\n          slug\n          content\n          type\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  `,\n  ADD_EMAIL_TEMPLATE_HEADER_FOOTER: gql`\n    mutation addEmailTempHeaderFooter($data: AddEmailTempHFInput) {\n      addEmailTempHeaderFooter(data: $data) {\n        message\n        status\n      }\n    }\n  `,\n  SINGLE_EMAIL_TEMPLATE_HEADER_FOOTER: gql`\n    query getSingleEmailTempHeaderFooter($query: GetSingleEmailHeaderFooterInput) {\n      getSingleEmailTempHeaderFooter(query: $query) {\n        message\n        status\n        data {\n          id\n          name\n          slug\n          content\n          layout_type\n          type\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  `,\n  EMAIL_TEMPLATE_HEADER_FOOTER_UPDATE: gql`\n    mutation updateEmailTempHeaderFooter($data: UpdateEmailTempHFInput) {\n      updateEmailTempHeaderFooter(data: $data) {\n        message\n        status\n      }\n    }\n  `,\n  GET_EMAIL_TEMPLATE_LIST: gql`\n    query getAllEmailTemplateList {\n      getAllEmailTemplateList {\n        message\n        status\n        data {\n          id\n          email_template_id\n          name\n          slug\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  `,\n  ADD_EMAIL_TEMPLATE_LIST: gql`\n    mutation addEmailTemplateOnList($data: AddEmailTemplateListInput) {\n      addEmailTemplateOnList(data: $data) {\n        message\n        status\n      }\n    }\n  `,\n  SINGLE_EMAIL_TEMPLATE_LIST: gql`\n    query getSingleEmailTemplateList($query: GetSingleEmailTemplateListInput) {\n      getSingleEmailTemplateList(query: $query) {\n        message\n        status\n        data {\n          id\n          email_template_id\n          name\n          slug\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  `,\n  UPDATE_EMAIL_TEMPLATE_LIST: gql`\n    mutation updateEmailTemplateOnList($data: UpdateEmailTemplateListInput) {\n      updateEmailTemplateOnList(data: $data) {\n        message\n        status\n      }\n    }\n  `,\n  CREATE_EMAIL_TEMPLATE: gql`\n    mutation createEmailTemplate($data: addEmailTemplateInput) {\n      createEmailTemplate(data: $data) {\n        message\n        status\n      }\n    }\n  `,\n  GET_EMAIL_TEMPLATE_CONTENT_LIST: gql`\n    query getEmailTemplateList {\n      getEmailTemplateList {\n        message\n        status\n        data {\n          id\n          name\n          slug\n          createdAt\n          updatedAt\n          emailHeader {\n            id\n            name\n            slug\n          }\n          emailFooter {\n            id\n            name\n            slug\n          }\n        }\n      }\n    }\n  `,\n  GET_SINGLE_EMAIL_CONTENT_TEMPLATE: gql`\n    query getSingleEmailTemplate($query: GetSingleEmailTemplateInput) {\n      getSingleEmailTemplate(query: $query) {\n        message\n        status\n        data {\n          id\n          name\n          slug\n          content\n          layout_type\n          createdAt\n          updatedAt\n          emailHeader {\n            id\n            name\n            slug\n            content\n            type\n            createdAt\n            updatedAt\n          }\n          emailFooter {\n            id\n            name\n            slug\n            content\n            type\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n  `,\n  UPDATE_EMAIL_TEMPLATE_CONTENT: gql`\n    mutation updateEmailTemplate($data: updateEmailTemplateInput) {\n      updateEmailTemplate(data: $data) {\n        message\n        status\n      }\n    }\n  `,\n  GET_EMAIL_TEMPLATE_PREVIEW: gql`\n    query getEmailTemplatePreview($query: GetEmailTemplatePreviewInput) {\n      getEmailTemplatePreview(query: $query) {\n        message\n        status\n        tenant_id\n        data\n      }\n    }\n  `,\n};\n"],"sourceRoot":""}