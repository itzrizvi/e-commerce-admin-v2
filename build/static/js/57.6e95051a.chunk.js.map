{"version":3,"sources":["container/orders/ListOrder.js"],"names":["RangePicker","checkPoint","ListOrder","viewPermission","useState","data","loading","error","orders","setOrders","token","useSelector","state","auth","isFilter","setIsFilter","searchButton","setSearchButton","paymentMethod","setPaymentMethod","orderStatus","setOrderStatus","orderUpdateAdmins","setOrderUpdateAdmins","searchDisable","setSearchDisable","dateRange","setChangeDateRange","productOption","setProductOption","updatedDateRange","setChangeUpdatedDateRange","paymentmethods","productIds","statuses","updatedby","searchQuery","orderEntryStartDate","orderEntryEndDate","orderUpdatedStartDate","orderUpdatedEndDate","filterParams","setFilterParams","columns","title","dataIndex","key","width","ellipsis","sorter","a","b","id","render","text","record","customer","last_name","first_name","email","align","val","total","style","borderRadius","padding","color","background","name","createdAt","className","format","parseInt","updatedAt","to","margin","placement","returnMomentDateRange","start","finish","moment","useEffect","apolloClient","query","productSchema","GET_PAYMENT_METHOD_LIST","context","headers","TENANTID","process","then","res","getPaymentMethodListPublic","status","catch","err","s","finally","orderQuery","GET_ORDER_STATUS_LIST","Authorization","getOrderStatusList","GET_ORDER_UPDATE_ADMIN_LIST","getOrderUpdateAdminList","length","buttons","size","type","onClick","icon","gutter","sm","xs","headless","span","height","placeholder","prefix","value","onChange","e","persist","target","disabled","GET_ALL_ORDER","variables","fetchPolicy","getOrderlistAdmin","marginBottom","options","showSearch","allowClear","optionFilterProp","mode","onDeselect","prev","filter","item","onSelect","concat","onSearch","SEARCH_PRODUCT","getSearchedProducts","map","product","label","prod_name","prod_slug","prod_sku","prod_partnum","mfg_build_part_number","marginTop","picker","_d","rowKey","dataSource","rowClassName","index","pagination","defaultPageSize","config","ORDER_PER_PAGE","showTotal","range"],"mappings":"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","file":"static/js/57.6e95051a.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Row, Col, Spin, Input, Table, Tooltip, Select, DatePicker } from 'antd';\nimport FeatherIcon from 'feather-icons-react';\nimport { PageHeader } from '../../components/page-headers/page-headers';\nimport { Main } from '../styled';\nimport { Cards } from '../../components/cards/frame/cards-frame';\nimport { Button } from '../../components/buttons/buttons';\nimport { Link } from 'react-router-dom';\nimport FontAwesome from 'react-fontawesome';\nimport { RetweetOutlined, SearchOutlined } from '@ant-design/icons';\nimport config from '../../config/config';\nimport apolloClient from '../../utility/apollo';\nimport { viewPermission } from '../../utility/utility';\nimport { useSelector } from 'react-redux';\nimport { orderQuery } from '../../apollo/order';\nimport Moment from 'react-moment';\nimport moment from 'moment';\nconst { RangePicker } = DatePicker;\nimport { productSchema } from '../../apollo/product';\n\nlet checkPoint = false;\nconst ListOrder = () => {\n  viewPermission('order');\n  const [orders, setOrders] = useState({ data: [], loading: false, error: '' });\n  const token = useSelector(state => state.auth.token);\n  const [isFilter, setIsFilter] = useState(false);\n  const [searchButton, setSearchButton] = useState(false);\n  const [paymentMethod, setPaymentMethod] = useState({ data: [], loading: false, error: '' });\n  const [orderStatus, setOrderStatus] = useState({ data: [], loading: false, error: '' });\n  const [orderUpdateAdmins, setOrderUpdateAdmins] = useState({ data: [], loading: false, error: '' });\n  const [searchDisable, setSearchDisable] = useState(true);\n  const [dateRange, setChangeDateRange] = useState(null);\n  const [productOption, setProductOption] = useState([]);\n  const [updatedDateRange, setChangeUpdatedDateRange] = useState(null);\n  const [filterParams, setFilterParams] = useState({\n    paymentmethods: [],\n    productIds: [],\n    statuses: [],\n    updatedby: [],\n    searchQuery: '',\n    orderEntryStartDate: '',\n    orderEntryEndDate: '',\n    orderUpdatedStartDate: '',\n    orderUpdatedEndDate: ''\n  });\n\n  const searchOrderAdmin = () => {\n    setOrders(s => ({ ...s, loading: true }));\n    apolloClient\n      .query({\n        query: orderQuery.GET_ALL_ORDER,\n        variables: {\n          query: {\n            searchQuery: filterParams.searchQuery ?? '',\n            productIds: filterParams.productIds.length ? filterParams.productIds : null,\n            paymentmethods: filterParams.paymentmethods.length ? filterParams.paymentmethods : null,\n            statuses: filterParams.statuses.length ? filterParams.statuses : null,\n            updatedby: filterParams.updatedby.length ? filterParams.updatedby : null,\n            orderEntryStartDate: filterParams.orderEntryStartDate ?? '',\n            orderEntryEndDate: filterParams.orderEntryEndDate ?? '',\n            orderUpdatedStartDate: filterParams.orderUpdatedStartDate ?? '',\n            orderUpdatedEndDate: filterParams.orderUpdatedEndDate ?? '',\n          }\n        },\n        context: {\n          headers: {\n            TENANTID: process.env.REACT_APP_TENANTID,\n            Authorization: token,\n          },\n        },\n        fetchPolicy: 'network-only'\n      })\n      .then(res => {\n        const data = res?.data?.getOrderlistAdmin;\n        if (!data.status) return;\n        setOrders(data);\n      })\n      .catch(err => {\n        setOrders(s => ({ ...s, error: 'Something went Wrong.!! ' }));\n      })\n      .finally(() => {\n        setOrders(s => ({ ...s, loading: false }));\n        setSearchButton(!searchButton)\n      });\n  }\n\n  const columns = [\n    {\n      title: 'Order Id',\n      dataIndex: 'id',\n      key: 'id',\n      width: 100,\n      ellipsis: true,\n      sorter: (a, b) => (a.id > b.id ? 1 : -1),\n    },\n    {\n      title: 'Customer',\n      dataIndex: ['customer', 'first_name'],\n      key: 'first_name',\n      width: 150,\n      render: (text, record) => `${text} ${record.customer.last_name}`,\n      sorter: (a, b) => (a.first_name > b.first_name ? 1 : -1),\n    },\n    {\n      title: 'Customer Email',\n      dataIndex: ['customer', 'email'],\n      key: 'email',\n      width: 200,\n      ellipsis: true,\n      sorter: (a, b) => (a.email > b.email ? 1 : -1),\n    },\n    {\n      title: 'Total Amount',\n      dataIndex: 'total',\n      key: 'total',\n      align: 'center',\n      width: 120,\n      render: val => `$${val}`,\n      sorter: (a, b) => (a.total > b.total ? 1 : -1),\n    },\n    {\n      title: 'Status',\n      dataIndex: ['orderStatus', 'name'],\n      key: 'name',\n      align: 'center',\n      width: 150,\n      render: val => (\n        <span\n          style={{\n            borderRadius: '4em',\n            padding: '.5em 1.5em',\n            color: val === 'Pending' ? '#feaf00' : val === 'Completed' ? '#2fb083' : '',\n            background: val === 'Pending' ? '#fef6e6' : val === 'Completed' ? '#ebf9f4' : '',\n          }}\n        >\n          {val}\n        </span>\n      ),\n      sorter: (a, b) => (a.name > b.name ? 1 : -1),\n    },\n    {\n      title: 'Payment Method',\n      dataIndex: ['paymentmethod', 'name'],\n      key: 'name',\n      width: 150,\n      sorter: (a, b) => (a.name > b.name ? 1 : -1),\n    },\n    {\n      title: 'Date Added',\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      align: 'center',\n      width: 150,\n      sorter: (a, b) => (a.createdAt === b.createdAt ? 0 : a.createdAt ? -1 : 1),\n      render: (text, record) => (\n        <span className={'status-text'}>{<Moment format=\"DD-MMM-YYYY\">{parseInt(text)}</Moment>}</span>\n      ),\n    },\n    {\n      title: 'Date Updated',\n      dataIndex: 'updatedAt',\n      key: 'updatedAt',\n      align: 'center',\n      width: 150,\n      sorter: (a, b) => (a.updatedAt === b.updatedAt ? 0 : a.updatedAt ? -1 : 1),\n      render: (text, record) => (\n        <span className={'status-text'}>{<Moment format=\"DD-MMM-YYYY\">{parseInt(text)}</Moment>}</span>\n      ),\n    },\n    {\n      title: 'View',\n      dataIndex: 'id',\n      width: 70,\n      align: 'right',\n      key: 'id',\n      render: (text, record) => (\n        <>\n          <Link to={`/admin/order/view?id=${text}`}>\n            <FontAwesome name=\"eye\" style={{ margin: '.5em 1em', color: 'rgb(46, 204, 113)' }} />\n          </Link>\n        </>\n      ),\n    },\n    {\n      title: 'Action',\n      dataIndex: 'action',\n      width: 140,\n      align: 'center',\n      key: 'createdAt',\n      render: (text, record) => (\n        <>\n          <Tooltip placement=\"topLeft\" title=\"Edit Order\" color=\"cyan\">\n            <Link to={`/admin/order/edit/${record.id}`}>\n              <FontAwesome name=\"edit\" style={{ margin: '.5em 1em', color: '#5F63F2' }} />\n            </Link>\n          </Tooltip>\n          <Tooltip placement=\"topLeft\" title=\"Make Purchase Order\" color=\"cyan\">\n            <Link to={`/admin/po/add?order_id=${record.id}`}>\n              <FontAwesome name=\"cart-plus\" style={{ margin: '.5em 1em', color: \"#e67e22\" }} />\n            </Link>\n          </Tooltip>\n        </>\n      ),\n    },\n  ];\n\n  const onDateRangeChange = dateRange => {\n    if (dateRange) {\n      setFilterParams(s => ({ ...s, orderEntryStartDate: dateRange[0]._d ?? '', orderEntryEndDate: dateRange[1]._d ?? '' }))\n      setChangeDateRange(returnMomentDateRange(dateRange[0], dateRange[1]));\n    } else {\n      setChangeDateRange(null);\n    }\n  };\n\n  const onDateUpdatedRangeChange = updatedDateRange => {\n    if (updatedDateRange) {\n      setFilterParams(s => ({ ...s, orderUpdatedStartDate: updatedDateRange[0]._d ?? '', orderUpdatedEndDate: updatedDateRange[1]._d ?? '' }))\n      setChangeUpdatedDateRange(returnMomentDateRange(updatedDateRange[0], updatedDateRange[1]));\n    } else {\n      setChangeUpdatedDateRange(null);\n    }\n  };\n\n  const returnMomentDateRange = (start, finish) => {\n    return [moment(start, \"YYYY-MM-DD\"), moment(finish, \"YYYY-MM-DD\")];\n  };\n\n  useEffect(() => {\n    // Load Payment Mathod\n    apolloClient\n      .query({\n        query: productSchema.GET_PAYMENT_METHOD_LIST,\n        context: {\n          headers: {\n            TENANTID: process.env.REACT_APP_TENANTID,\n          },\n        },\n      })\n      .then(res => {\n        const data = res?.data?.getPaymentMethodListPublic;\n        if (!data.status) return;\n        setPaymentMethod(data);\n      }).catch(err => {\n        setPaymentMethod(s => ({ ...s, error: 'Something went Wrong.!! ' }));\n      })\n      .finally(() => {\n        setPaymentMethod(s => ({ ...s, loading: false }));\n      });\n\n    // Load Order Status\n    apolloClient\n      .query({\n        query: orderQuery.GET_ORDER_STATUS_LIST,\n        context: {\n          headers: {\n            TENANTID: process.env.REACT_APP_TENANTID,\n            Authorization: token,\n          },\n        },\n      })\n      .then(res => {\n        const data = res?.data?.getOrderStatusList;\n        if (!data.status) return;\n        setOrderStatus(data);\n      }).catch(err => {\n        setOrderStatus(s => ({ ...s, error: 'Something went Wrong.!! ' }));\n      })\n      .finally(() => {\n        setOrderStatus(s => ({ ...s, loading: false }));\n      });\n\n    // Load Order Update Admin List\n    apolloClient\n      .query({\n        query: orderQuery.GET_ORDER_UPDATE_ADMIN_LIST,\n        context: {\n          headers: {\n            TENANTID: process.env.REACT_APP_TENANTID,\n            Authorization: token,\n          },\n        },\n      })\n      .then(res => {\n        const data = res?.data?.getOrderUpdateAdminList;\n        if (!data.status) return;\n        setOrderUpdateAdmins(data);\n      }).catch(err => {\n        setOrderUpdateAdmins(s => ({ ...s, error: 'Something went Wrong.!! ' }));\n      })\n      .finally(() => {\n        setOrderUpdateAdmins(s => ({ ...s, loading: false }));\n      });\n\n    if (checkPoint) {\n      if (filterParams.paymentmethods.length > 0 ||\n        filterParams.productIds.length > 0 ||\n        filterParams.statuses.length > 0 ||\n        filterParams.updatedby.length > 0 ||\n        filterParams.searchQuery !== '' ||\n        filterParams.orderEntryEndDate !== '' ||\n        filterParams.orderEntryStartDate !== '' ||\n        filterParams.orderUpdatedEndDate !== '' ||\n        filterParams.orderUpdatedStartDate !== '') {\n        setSearchDisable(false)\n      } else {\n        setSearchDisable(true)\n      }\n    }\n    checkPoint = true;\n  }, [filterParams]);\n\n  return (\n    <>\n      <PageHeader\n        title=\"List Orders\"\n        buttons={[\n          <div key=\"1\" className=\"page-header-actions\">\n            <Button\n              size=\"small\"\n              type=\"white\"\n              onClick={() => setIsFilter(state => !state)}\n            >\n              <FeatherIcon icon=\"filter\" />\n              Filter\n            </Button>\n            <Button size=\"small\" type=\"white\" onClick={() => {\n              setChangeDateRange(null)\n              setSearchDisable(true)\n              setChangeUpdatedDateRange(null)\n              setFilterParams({\n                paymentmethods: [],\n                productIds: [],\n                statuses: [],\n                updatedby: [],\n                searchQuery: '',\n                orderEntryStartDate: '',\n                orderEntryEndDate: '',\n                orderUpdatedStartDate: '',\n                orderUpdatedEndDate: ''\n              })\n            }}>\n              <RetweetOutlined />\n              Reset Filter\n            </Button>\n            <Link to=\"/admin/order/add\">\n              <Button size=\"small\" title=\"Add Order\" type=\"primary\">\n                <FeatherIcon icon=\"plus\" />\n              </Button>\n            </Link>\n          </div>,\n        ]}\n      />\n      <Main>\n        <Row gutter={25}>\n          <Col sm={24} xs={24}>\n            <Cards headless>\n              {orders.loading ?\n                <div className=\"spin\">\n                  <Spin />\n                </div>\n                :\n                orders.error ?\n                  <p>{orders.error}</p>\n                  :\n                  <>\n                    <Row gutter={25}>\n                      <Col span={18}>\n                        <Input\n                          style={{ height: \"42px\" }}\n                          placeholder=\"Search Order By Customer...\"\n                          prefix={<SearchOutlined />}\n                          value={filterParams?.searchQuery}\n                          onChange={e => {\n                            e.persist()\n                            const value = e.target.value;\n                            setFilterParams(s => ({ ...s, searchQuery: value }));\n                          }}\n                        />\n                      </Col>\n                      <Col span={6}>\n                        <Button\n                          style={{ height: \"42px\" }}\n                          size=\"large\"\n                          type=\"primary\"\n                          disabled={searchDisable}\n                          onClick={searchOrderAdmin}\n                        >\n                          Search\n                        </Button>\n                      </Col>\n                    </Row>\n                    <br />\n                    <br />\n                    {isFilter && (\n                      <div style={{ marginBottom: '2.5em' }}>\n                        <Row gutter={16}>\n                          <Col span={8}>\n                            Product: <br />\n                            <Select\n                              style={{ width: '100%' }}\n                              placeholder=\"Select Product\"\n                              options={productOption}\n                              showSearch\n                              allowClear\n                              optionFilterProp=\"label\"\n                              size=\"middle\"\n                              mode=\"multiple\"\n                              value={filterParams?.productIds}\n                              onDeselect={(val) => setFilterParams(prev => ({ ...prev, productIds: prev.productIds.filter(item => item !== val) }))}\n                              onSelect={val => {\n                                setFilterParams(s => ({ ...s, productIds: filterParams.productIds.concat(parseInt(val)) }));\n                              }}\n                              onSearch={val => {\n                                if (val.length > 3) {\n                                  apolloClient\n                                    .query({\n                                      query: productSchema.SEARCH_PRODUCT,\n                                      variables: {\n                                        query: {\n                                          searchQuery: val,\n                                        },\n                                      },\n                                      context: {\n                                        headers: {\n                                          TENANTID: process.env.REACT_APP_TENANTID,\n                                        },\n                                      },\n                                    })\n                                    .then(res => {\n                                      const data = res?.data?.getSearchedProducts;\n                                      if (!data.status) return;\n                                      setProductOption(\n                                        data.data.map(product => ({\n                                          label: product?.prod_name +\n                                            product?.prod_slug +\n                                            product?.prod_sku +\n                                            product?.prod_partnum +\n                                            product?.mfg_build_part_number,\n                                          value: product?.id,\n                                          ...product,\n                                        })),\n                                      );\n                                    });\n                                } else {\n                                  setProductOption([]);\n                                }\n                              }}\n                            />\n                          </Col>\n                          <Col span={8}>\n                            Payment Method: <br />\n                            <Select\n                              style={{ width: '100%' }}\n                              placeholder={paymentMethod.loading ? 'Loading..' : 'Select Payment Method'}\n                              size=\"middle\"\n                              mode=\"multiple\"\n                              optionFilterProp=\"label\"\n                              value={filterParams?.paymentmethods}\n                              onDeselect={(val) => setFilterParams(prev => ({ ...prev, paymentmethods: prev.paymentmethods.filter(item => item !== val) }))}\n                              onSelect={val => {\n                                setFilterParams(s => ({ ...s, paymentmethods: filterParams.paymentmethods.concat(parseInt(val)) }));\n                              }}\n                              options={paymentMethod?.data.map(item => ({\n                                label: item.name,\n                                value: item.id,\n                              }))}\n                            />\n                          </Col>\n                          <Col span={8}>\n                            Order Status : <br />\n                            <Select\n                              style={{ width: '100%' }}\n                              placeholder={orderStatus.loading ? 'Loading..' : 'Select Order Status'}\n                              size=\"middle\"\n                              mode=\"multiple\"\n                              optionFilterProp=\"label\"\n                              value={filterParams?.statuses}\n                              onDeselect={(val) => setFilterParams(prev => ({ ...prev, statuses: prev.statuses.filter(item => item !== val) }))}\n                              onSelect={val => {\n                                setFilterParams(s => ({ ...s, statuses: filterParams.statuses.concat(parseInt(val)) }));\n                              }}\n                              options={orderStatus?.data.map(item => ({\n                                label: item.name,\n                                value: item.id,\n                              }))}\n                            />\n                          </Col>\n                        </Row>\n                        <Row gutter={16} style={{ marginTop: '.5em' }}>\n                          <Col span={8}>\n                            Updated By: <br />\n                            <Select\n                              style={{ width: '100%' }}\n                              size=\"middle\"\n                              mode=\"multiple\"\n                              value={filterParams?.updatedby}\n                              onDeselect={(val) => setFilterParams(prev => ({ ...prev, updatedby: prev.updatedby.filter(item => item !== val) }))}\n                              placeholder={orderUpdateAdmins.loading ? 'Loading...' : 'Select Admins..'}\n                              options={orderUpdateAdmins?.data?.map(item => ({\n                                label: item.first_name + ' ' + item.last_name,\n                                value: item.id,\n                              }))}\n                              onSelect={val => {\n                                setFilterParams(s => ({ ...s, updatedby: filterParams.updatedby.concat(parseInt(val)) }));\n                              }}\n                            />\n                          </Col>\n                          <Col span={8}>\n                            Date Added: <br />\n                            <RangePicker\n                              style={{ height: '40px', width: '100%' }}\n                              size=\"small\"\n                              allowClear={true}\n                              picker=\"date\"\n                              value={dateRange !== \"\" ? dateRange : \"\"}\n                              onChange={onDateRangeChange}\n                            />\n                          </Col>\n                          <Col span={8}>\n                            Date Updated: <br />\n                            <RangePicker\n                              style={{ height: '40px', width: '100%' }}\n                              size=\"small\"\n                              allowClear={true}\n                              picker=\"date\"\n                              value={updatedDateRange !== \"\" ? updatedDateRange : \"\"}\n                              onChange={onDateUpdatedRangeChange}\n                            />\n                          </Col>\n\n\n                        </Row>\n\n                      </div>\n                    )}\n\n                    <span className={'psp_list'}>\n                      <Table\n                        className=\"table-responsive\"\n                        columns={columns}\n                        rowKey={'id'}\n                        size=\"small\"\n                        dataSource={orders?.data ? orders.data : []}\n                        rowClassName={(record, index) => (index % 2 === 0 ? \"\" : \"altTableClass\")}\n                        pagination={{\n                          defaultPageSize: config.ORDER_PER_PAGE,\n                          total: orders?.data ? orders.data.length : 0,\n                          showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} items`,\n                        }}\n                      />\n                    </span>\n                  </>\n              }\n            </Cards>\n          </Col>\n        </Row>\n      </Main>\n    </>\n  );\n};\n\nexport default ListOrder;\n"],"sourceRoot":""}