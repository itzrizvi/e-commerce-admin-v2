{"version":3,"sources":["container/banner/UpdateBanner.js","apollo/banner/index.js"],"names":["AddBanner","viewPermission","search","useLocation","params","queryString","parse","history","useHistory","token","useSelector","state","auth","useState","isLoading","setIsLoading","bannerStatus","setBannerStatus","image","setImage","useForm","form","bannerData","setBannerData","data","loading","error","singleBanner","setSingleBanner","useEffect","apolloClient","query","bannerQuery","GET_SINGLE_BANNER","variables","banner_id","parseInt","id","context","headers","TENANTID","process","Authorization","then","res","getSingleBanner","status","all_banner_data","banner_items","forEach","val","push","title","sub_title","button_text","option_1","option_2","price","sale_price","link","sort_order","setFieldsValue","name","catch","err","console","log","beforeImageUpload","file","isLt2M","size","toast","uploadButton","style","marginTop","setImageInObject","e","target","data_id","getAttribute","map","ele","column","dataIndex","key","width","render","text","record","type","defaultValue","placeholder","onChange","value","listType","data-id","className","showUploadList","beforeUpload","event","fileList","src","renderImage","URL","createObjectURL","onError","errorImageSrc","alt","effect","visibleByDefault","ellipsis","onClick","removeRow","icon","confirm","content","okText","cancelText","okType","onOk","filter_verify","find","o","isNew","success","prevState","filter","mutate","mutation","BANNER_ITEM_DELETE","deleteBannerItem","gutter","sm","xs","headless","onFinish","values","check_point","info","BANNER_UPDATE","refetchQueries","GET_ALL_BANNER","length","setTimeout","index","data_var","apolloUploadClient","BANNER_ITEM_ADD","BANNER_ITEM_UPDATE","_","onFinishFailed","errorInfo","labelCol","span","Item","rules","required","max","message","label","checked","checkedChildren","unCheckedChildren","columns","pagination","rowKey","dataSource","display","justifyContent","marginBottom","newData","Date","getTime","htmlType","raised","to","marginLeft","BANNER_ADD","gql"],"mappings":"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","file":"static/js/16.b9335082.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Row, Col, Form, Input, Switch, Upload, Spin, Table, Modal } from 'antd';\nimport { PageHeader } from '../../components/page-headers/page-headers';\nimport { Main } from '../styled';\nimport { Cards } from '../../components/cards/frame/cards-frame';\nimport { Button } from '../../components/buttons/buttons';\nimport { Link, useHistory, useLocation } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { PlusOutlined, ExclamationCircleOutlined } from '@ant-design/icons';\nimport { bannerQuery } from '../../apollo/banner';\nimport apolloClient, { apolloUploadClient } from '../../apollo';\nimport { errorImageSrc, renderImage } from '../../utility/images';\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\nimport FeatherIcon from 'feather-icons-react';\nimport queryString from 'query-string';\nimport { viewPermission } from '../../utility/utility';\nimport 'react-lazy-load-image-component/src/effects/blur.css';\n\nconst AddBanner = () => {\n  viewPermission('banner');\n  const { search } = useLocation();\n  const params = queryString.parse(search);\n  const history = useHistory();\n  const token = useSelector(state => state.auth.token);\n  const [isLoading, setIsLoading] = useState(false);\n  const [bannerStatus, setBannerStatus] = useState(true);\n  const [image, setImage] = useState('');\n  const maxLength = 50;\n  const [form] = Form.useForm();\n  const [bannerData, setBannerData] = useState([]);\n  const [singleBanner, setSingleBanner] = useState({ data: {}, loading: true, error: '' });\n\n  useEffect(() => {\n    apolloClient\n      .query({\n        query: bannerQuery.GET_SINGLE_BANNER,\n        variables: {\n          banner_id: parseInt(params?.id),\n        },\n        context: {\n          headers: {\n            TENANTID: process.env.REACT_APP_TENANTID,\n            Authorization: token,\n          },\n        },\n      })\n      .then(res => {\n        const data = res?.data?.getSingleBanner;\n        if (!data.status) return;\n        setSingleBanner({ data: data?.data, loading: false, error: '' });\n        const all_banner_data = [];\n        data?.data?.banner_items.forEach(val => {\n          all_banner_data.push({\n            banner_id: val.id,\n            title: val.title,\n            sub_title: val.sub_title,\n            button_text: val.button_text,\n            option_1: val.option_1,\n            option_2: val.option_2,\n            price: val.price,\n            sale_price: val.sale_price,\n            link: val.link,\n            image: val.image,\n            sort_order: val.sort_order,\n          });\n        });\n        setBannerData(all_banner_data);\n        setBannerStatus(data?.data?.status);\n        form.setFieldsValue({\n          name: data?.data?.name,\n        });\n      })\n      .catch(err => {\n        console.log(err);\n        setSingleBanner({ data: {}, loading: false, error: 'Something went worng' });\n      });\n  }, []);\n\n  //Submit Form\n  const handleSubmit = values => {\n    let check_point = true;\n    bannerData.forEach(val => {\n      if (check_point && (val.image == '' || val.title == '')) {\n        toast.info('Please Provide All Banner Image and Title!');\n        check_point = false;\n        return;\n      }\n    });\n\n    if (check_point) {\n      setIsLoading(true);\n      const data = { ...values, status: bannerStatus, banner_id: singleBanner?.data?.id };\n\n      apolloClient\n        .mutate({\n          mutation: bannerQuery.BANNER_UPDATE,\n          variables: { data },\n          context: {\n            headers: {\n              TENANTID: process.env.REACT_APP_TENANTID,\n              Authorization: token,\n              'Apollo-Require-Preflight': 'true',\n            },\n          },\n          refetchQueries: [\n            {\n              query: bannerQuery.GET_ALL_BANNER,\n              context: {\n                headers: {\n                  TENANTID: process.env.REACT_APP_TENANTID,\n                  Authorization: token,\n                },\n              },\n            },\n            {\n              query: bannerQuery.GET_SINGLE_BANNER,\n              variables: {\n                banner_id: parseInt(params?.id),\n              },\n              context: {\n                headers: {\n                  TENANTID: process.env.REACT_APP_TENANTID,\n                  Authorization: token,\n                },\n              },\n            }\n          ],\n        })\n        .then(res => {\n          if (bannerData.length === 0) {\n            setIsLoading(false);\n            toast.success('Banner Updated Successfully!');\n            setTimeout(() => {\n              history.push('/admin/banner/list');\n            }, 1000);\n          }\n          bannerData.forEach((val, index) => {\n            if (val?.isNew) {\n              apolloUploadClient\n                .mutate({\n                  mutation: bannerQuery.BANNER_ITEM_ADD,\n                  variables: {\n                    data: {\n                      banner_id: singleBanner?.data?.id,\n                      title: val.title,\n                      sort_order: val.sort_order,\n                      link: val.link,\n                      image: val.image,\n                      sub_title: val.sub_title,\n                      button_text: val.button_text,\n                      option_1: val.option_1,\n                      option_2: val.option_2,\n                      price: val.price,\n                      sale_price: val.sale_price,\n                    },\n                  },\n                  context: {\n                    headers: {\n                      TENANTID: process.env.REACT_APP_TENANTID,\n                      Authorization: token,\n                    },\n                  },\n                })\n                .then(res => {\n                  if (bannerData.length === index + 1) {\n                    setIsLoading(false);\n                    toast.success('Banner Updated Successfully!');\n                    setTimeout(() => {\n                      history.push('/admin/banner/list');\n                    }, 1000);\n                  }\n                })\n                .catch(err => {\n                  toast.error('Something Went wrong!!');\n                });\n            } else {\n              let data_var;\n              if (typeof val.image == 'string')\n                data_var = {\n                  id: val.banner_id,\n                  title: val.title,\n                  sort_order: val.sort_order,\n                  link: val.link,\n                  banner_id: singleBanner?.data?.id,\n                  sub_title: val.sub_title,\n                  button_text: val.button_text,\n                  option_1: val.option_1,\n                  option_2: val.option_2,\n                  price: val.price,\n                  sale_price: val.sale_price,\n                };\n              else\n                data_var = {\n                  id: val.banner_id,\n                  title: val.title,\n                  sort_order: val.sort_order,\n                  link: val.link,\n                  image: val.image,\n                  banner_id: singleBanner?.data?.id,\n                  sub_title: val.sub_title,\n                  button_text: val.button_text,\n                  option_1: val.option_1,\n                  option_2: val.option_2,\n                  price: val.price,\n                  sale_price: val.sale_price,\n                };\n              apolloUploadClient\n                .mutate({\n                  mutation: bannerQuery.BANNER_ITEM_UPDATE,\n                  variables: { data: data_var },\n                  context: {\n                    headers: {\n                      TENANTID: process.env.REACT_APP_TENANTID,\n                      Authorization: token,\n                    },\n                  },\n                })\n                .then(_ => {\n                  if (bannerData.length === index + 1) {\n                    setIsLoading(false);\n                    toast.success('Banner Updated Successfully!');\n                    setTimeout(() => {\n                      history.push('/admin/banner/list');\n                    }, 1000);\n                  }\n                })\n                .catch(err => {\n                  toast.error('Something Went wrong!!');\n                });\n            }\n          });\n        })\n        .catch(err => {\n          toast.error('Something Went wrong !!!');\n        });\n    }\n  };\n\n  // Assign Image\n  const beforeImageUpload = file => {\n    const isLt2M = file.size / 1024 / 1024 < 2;\n    if (!isLt2M) toast.error('Image must smaller than 2MB!');\n\n    if (isLt2M) {\n      setImage(file);\n    }\n\n    return false;\n  };\n\n  // Upload Button Design\n  const uploadButton = (\n    <div>\n      <PlusOutlined />\n      <div style={{ marginTop: 8 }}> Upload </div>\n    </div>\n  );\n\n  const setImageInObject = e => {\n    if (e && 'target' in e && 'getAttribute' in e.target) {\n      const data_id = e.target.getAttribute('data-id');\n      if (data_id) {\n        let shawlow_copy = bannerData;\n        shawlow_copy.map(ele => {\n          if (ele.banner_id == data_id) {\n            ele.image = image;\n          }\n          return ele;\n        });\n      }\n    }\n  };\n\n  // List For Table Column\n  const column = [\n    {\n      title: 'Title',\n      dataIndex: 'title',\n      key: 'title',\n      width: 200,\n      render: (text, record) => (\n        <Input\n          type=\"text\"\n          defaultValue={record.title}\n          placeholder=\"Title\"\n          onChange={e => (record.title = e.target.value)}\n        />\n      ),\n    },\n    {\n      title: 'Sub Title',\n      dataIndex: 'sub_title',\n      key: 'sub_title',\n      width: 200,\n      render: (text, record) => (\n        <Input\n          type=\"text\"\n          defaultValue={record.sub_title}\n          placeholder=\"Sub Title\"\n          onChange={e => (record.sub_title = e.target.value)}\n        />\n      ),\n    },\n    {\n      title: 'Link',\n      dataIndex: 'link',\n      key: 'link',\n      width: 200,\n      render: (text, record) => (\n        <Input\n          defaultValue={record.link}\n          type=\"text\"\n          placeholder=\"Link\"\n          onChange={e => (record.link = e.target.value)}\n        />\n      ),\n    },\n    {\n      title: 'Button Text',\n      dataIndex: 'button_text',\n      key: 'button_text',\n      width: 200,\n      render: (text, record) => (\n        <Input\n          type=\"text\"\n          placeholder=\"Button Text\"\n          defaultValue={record.button_text}\n          onChange={e => (record.button_text = e.target.value)}\n        />\n      ),\n    },\n    {\n      title: 'Price',\n      dataIndex: 'price',\n      key: 'price',\n      width: 100,\n      render: (text, record) => (\n        <Input\n          type=\"number\"\n          defaultValue={record.price}\n          placeholder=\"Price\"\n          onChange={e => (record.price = e.target.value)}\n        />\n      ),\n    },\n    {\n      title: 'Sale Price',\n      dataIndex: 'sale_price',\n      key: 'sale_price',\n      width: 100,\n      render: (text, record) => (\n        <Input\n          type=\"number\"\n          defaultValue={record.sale_price}\n          placeholder=\"Sale Price\"\n          onChange={e => (record.sale_price = e.target.value)}\n        />\n      ),\n    },\n    {\n      title: 'Image',\n      dataIndex: 'image',\n      key: 'image',\n      width: 120,\n      render: (text, record) => (\n        <Upload\n          name=\"avatar\"\n          listType=\"picture-card\"\n          data-id={record.banner_id}\n          className=\"avatar-uploader\"\n          showUploadList={false}\n          beforeUpload={beforeImageUpload}\n          onChange={setImageInObject(event)}\n          fileList={[]}\n        >\n          {record.image ? (\n            <LazyLoadImage\n              src={\n                typeof record.image === 'string'\n                  ? renderImage(params?.id, record.image, 'banner', '', true)\n                  : URL.createObjectURL(record.image)\n              }\n              onError={errorImageSrc}\n              alt=\"image\"\n              effect=\"blur\"\n              visibleByDefault={image.src === '/public/loading.webp'}\n              style={{\n                width: '100%',\n              }}\n            />\n          ) : (\n            uploadButton\n          )}\n        </Upload>\n      ),\n    },\n    {\n      title: 'Optional One',\n      dataIndex: 'option_1',\n      key: 'option_1',\n      width: 150,\n      ellipsis: true,\n      render: (text, record) => (\n        <Input\n          type=\"text\"\n          defaultValue={record.option_1}\n          placeholder=\"Optional One\"\n          onChange={e => (record.option_1 = e.target.value)}\n        />\n      ),\n    },\n    {\n      title: 'Optional Two',\n      dataIndex: 'option_2',\n      key: 'option_2',\n      width: 150,\n      ellipsis: true,\n      render: (text, record) => (\n        <Input\n          type=\"text\"\n          placeholder=\"Optional Two\"\n          defaultValue={record.option_2}\n          onChange={e => (record.option_2 = e.target.value)}\n        />\n      ),\n    },\n    {\n      title: 'Sort Order',\n      dataIndex: 'sort_order',\n      key: 'sort_order',\n      width: 80,\n      render: (text, record) => (\n        <Input\n          type=\"number\"\n          defaultValue={record.sort_order}\n          placeholder=\"Sort Order\"\n          onChange={e => (record.sort_order = parseInt(e.target.value))}\n        />\n      ),\n    },\n    {\n      title: 'Action',\n      dataIndex: 'action',\n      key: 'action',\n      render: (text, record) => (\n        <Button onClick={() => removeRow(record.banner_id)} size=\"\" title=\"Remove\" type=\"danger\">\n          <FeatherIcon icon=\"minus\" />\n        </Button>\n      ),\n    },\n  ];\n\n  // Adding new row on table\n  const addNewRow = () => {\n    const newData = {\n      banner_id: new Date().getTime(),\n      title: '',\n      link: '',\n      image: '',\n      sort_order: '',\n      isNew: true,\n    };\n    setBannerData(prevState => [...prevState, newData]);\n  };\n\n  const removeRow = banner_id => {\n    Modal.confirm({\n      title: 'Slider Remove Confirmation!',\n      icon: <ExclamationCircleOutlined />,\n      content: 'Do you want to permanently remove this slider?',\n      okText: 'Remove',\n      cancelText: 'Cancel',\n      okType: 'danger',\n      onOk: () => {\n        const filter_verify = bannerData.find(o => o.banner_id === banner_id);\n        if (filter_verify?.isNew) {\n          toast.success('Slider Removed successfully');\n          setBannerData(prevState => {\n            return prevState.filter(value => value.banner_id !== banner_id);\n          });\n        } else {\n          apolloClient\n            .mutate({\n              mutation: bannerQuery.BANNER_ITEM_DELETE,\n              variables: { banner_id: parseInt(banner_id) },\n              context: {\n                headers: {\n                  TENANTID: process.env.REACT_APP_TENANTID,\n                  Authorization: token,\n                },\n              },\n            })\n            .then(res => {\n              if (res?.data?.deleteBannerItem?.status) {\n                toast.success('Slider Removed successfully');\n                setBannerData(prevState => {\n                  return prevState.filter(value => value.banner_id !== banner_id);\n                });\n              }\n            })\n            .catch(err => {\n              toast.error('Something Went wrong!!');\n            });\n        }\n      },\n    });\n  };\n\n  return (\n    <>\n      <PageHeader\n        title={`Manage Banner | Edit Banner ${singleBanner?.data?.name ? `(${singleBanner?.data?.name})` : ''}`}\n      />\n\n      <Main>\n        <Row gutter={25}>\n          <Col sm={24} xs={24}>\n            <Cards headless>\n              {singleBanner?.loading ? (\n                <div className=\"spin\">\n                  <Spin />\n                </div>\n              ) : (\n                <Form\n                  style={{ width: '100%' }}\n                  form={form}\n                  name=\"addBanner\"\n                  onFinish={handleSubmit}\n                  onFinishFailed={errorInfo => console.log('form error info:\\n', errorInfo)}\n                  labelCol={{ span: 4 }}\n                >\n                  <Form.Item\n                    rules={[{ required: true, max: maxLength, message: 'Please Enter Banner Name' }]}\n                    name=\"name\"\n                    label=\"Banner Name\"\n                  >\n                    <Input placeholder=\"Enter Banner Name\" />\n                  </Form.Item>\n\n                  <Form.Item label=\"Status\">\n                    <Switch\n                      checked={bannerStatus}\n                      onChange={checked => setBannerStatus(checked)}\n                      checkedChildren=\"ON\"\n                      unCheckedChildren=\"OFF\"\n                    />\n                  </Form.Item>\n\n                  <Table\n                    className=\"table-responsive\"\n                    columns={column}\n                    pagination={false}\n                    rowKey={'banner_id'}\n                    size=\"small\"\n                    dataSource={bannerData}\n                  />\n\n                  <div style={{ display: 'flex', justifyContent: 'flex-end', marginTop: '10px', marginBottom: '10px' }}>\n                    <Button onClick={addNewRow} size=\"small\" title=\"Add Banner\" htmlType=\"button\" type=\"primary\">\n                      <FeatherIcon icon=\"plus\" />\n                    </Button>\n                  </div>\n\n                  <div style={{ display: 'flex', justifyContent: 'flex-start' }}>\n                    <Form.Item>\n                      <Button loading={isLoading} size=\"default\" htmlType=\"submit\" type=\"primary\" raised>\n                        {isLoading ? 'Processing' : 'Save'}\n                      </Button>\n                      <Link to=\"/admin/banner/list\">\n                        <Button style={{ marginLeft: 10 }} type=\"light\" size=\"default\">\n                          Cancel\n                        </Button>\n                      </Link>\n                    </Form.Item>\n                  </div>\n                </Form>\n              )}\n            </Cards>\n          </Col>\n        </Row>\n      </Main>\n    </>\n  );\n};\n\nexport default AddBanner;\n","import { gql } from '@apollo/client';\n\nexport const bannerQuery = {\n  BANNER_ADD: gql`\n    mutation addBanner($data: BannerInput) {\n      addBanner(data: $data) {\n        message\n        status\n        data {\n          id\n        }\n      }\n    }\n  `,\n  BANNER_ITEM_ADD: gql`\n    mutation addBannerItem($data: BannerItemInput!) {\n      addBannerItem(data: $data) {\n        message\n        status\n        data {\n          id\n        }\n      }\n    }\n  `,\n  GET_ALL_BANNER: gql`\n    query getAllBanners {\n      getAllBanners {\n        message\n        status\n        tenant_id\n        data {\n          id\n          name\n          slug\n          status\n          createdAt\n        }\n      }\n    }\n  `,\n  GET_SINGLE_BANNER: gql`\n    query getSingleBanner($banner_id: Int!) {\n      getSingleBanner(query: { banner_id: $banner_id }) {\n        message\n        tenant_id\n        status\n        data {\n          id\n          name\n          status\n          banner_items {\n            id\n            title\n            sub_title\n            link\n            price\n            sale_price\n            button_text\n            option_1\n            option_2\n            image\n            sort_order\n          }\n        }\n      }\n    }\n  `,\n  BANNER_UPDATE: gql`\n    mutation updateBanner($data: UpdateBannerInput) {\n      updateBanner(data: $data) {\n        message\n        status\n      }\n    }\n  `,\n  BANNER_ITEM_UPDATE: gql`\n    mutation updateBannerItem($data: UpdateBannerItemInput) {\n      updateBannerItem(data: $data) {\n        message\n        status\n      }\n    }\n  `,\n  BANNER_ITEM_DELETE: gql`\n    mutation deleteBannerItem($banner_id: Int!) {\n      deleteBannerItem(data: { banner_id: $banner_id }) {\n        message\n        status\n        tenant_id\n      }\n    }\n  `,\n};\n"],"sourceRoot":""}