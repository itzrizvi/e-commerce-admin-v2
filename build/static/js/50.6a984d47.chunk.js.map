{"version":3,"sources":["container/admin/AddAdmin.js"],"names":["Paragraph","AddAdmin","viewPermission","history","useHistory","search","useLocation","params","queryString","parse","useState","userStatus","setUserStatus","selectedRoles","setSelectedRoles","sendEmail","data","isLoading","singleUser","setSingleUser","roles","error","setRoles","setIsLoading","isResetLoading","setIsResetLoading","token","useSelector","state","auth","existingRoles","setExistingRoles","useForm","form","useEffect","apolloClient","query","authQuery","GET_ALL_ROLES","context","headers","TENANTID","process","Authorization","then","res","getAllRoles","status","catch","err","console","log","finally","id","GET_SINGLE_ADMIN","variables","parseInt","getSingleAdmin","rolesArray","map","item","roleColumns","title","dataIndex","key","width","ellipsis","render","text","value","role","sorter","a","b","email","buttons","className","disabled","loading","onClick","mutate","mutation","SEND_RESET_PASSWORD","permissionName","resetPassword","toast","success","message","size","type","icon","gutter","sm","xs","headless","div","style","name","onFinish","values","length","warn","first_name","last_name","phone","fax","role_ids","role_id","user_status","authMutation","ADMIN_UPDATE","refetchQueries","GET_ALL_STAFF","Cookies","get","adminUpdate","setTimeout","push","ADMIN_SIGN_UP","adminSignUp","onFinishFailed","errorInfo","labelCol","span","initialValues","Item","rules","required","max","label","defaultValue","placeholder","checked","onChange","offset","initialValue","Group","marginTop","checkedValues","fontSize","fontWeight","columns","rowKey","borderRadius","dataSource","rowClassName","record","index","pagination","defaultPageSize","config","CUSTOMER_PER_PAGE","total","showTotal","range","display","justifyContent","htmlType","raised","to","marginLeft"],"mappings":"ycAeiB,IAATA,UA2cOC,UAzcE,WAAO,IAAD,QACrBC,YAAe,QACf,IAAMC,EAAUC,uBACRC,EAAWC,wBAAXD,OACFE,EAASC,IAAYC,MAAMJ,GAEjC,EAAoCK,oBAAS,GAAK,mBAA3CC,EAAU,KAAEC,EAAa,KAChC,EAA0CF,mBAAS,IAAG,mBAA/CG,EAAa,KAAEC,EAAgB,KACtC,EAAkCJ,oBAAS,GAAK,mBAAzCK,EAAS,KAChB,GAD8B,KACML,mBAAS,CAAEM,KAAM,GAAIC,WAAW,KAAO,mBAApEC,EAAU,KAAEC,EAAa,KAEhC,EAA0BT,mBAAS,CACjCU,MAAO,GACPH,WAAW,EACXI,MAAO,OACP,mBAJKD,EAAK,KAAEE,EAAQ,KAKtB,EAAkCZ,oBAAS,GAAM,mBAA1CO,GAAS,KAAEM,GAAY,KAC9B,GAA4Cb,oBAAS,GAAM,qBAApDc,GAAc,MAAEC,GAAiB,MAClCC,GAAQC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAKH,SAC9C,GAA0ChB,mBAAS,CAAEM,KAAM,GAAIC,WAAW,IAAO,qBAA1Ea,GAAa,MAAEC,GAAgB,MAEtC,GAAe,IAAKC,UAAbC,GAAsB,kBAAlB,GAEXC,qBAAU,WAERZ,GAAS,SAAAM,GAAK,kCAAUA,GAAK,IAAEX,WAAW,OAE1CkB,IACGC,MAAM,CACLA,MAAOC,IAAUC,cACjBC,QAAS,CACPC,QAAS,CACPC,SAAUC,SACVC,cAAejB,OAIpBkB,MAAK,SAAAC,GAAQ,IAAD,EACL7B,EAAU,OAAH6B,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAK7B,YAAI,WAAN,EAAH,EAAW8B,YACpB9B,EAAK+B,QACPzB,GAAS,SAAAM,GAAK,kCAAUA,GAAK,IAAER,MAAOJ,EAAKA,aAG9CgC,OAAM,SAAAC,GACLC,QAAQC,IAAI,wBAAyBF,MAEtCG,SAAQ,WACP9B,GAAS,SAAAM,GAAK,kCAAUA,GAAK,IAAEX,WAAW,YAE7C,IAEHiB,qBAAU,WAEH3B,EAAO8C,IAEZlB,IACGC,MAAM,CACLA,MAAOC,IAAUiB,iBACjBC,UAAW,CAAEnB,MAAO,CAAEiB,GAAIG,SAASjD,EAAO8C,MAC1Cd,QAAS,CACPC,QAAS,CACPC,SAAUC,SACVC,cAAejB,OAIpBkB,MAAK,SAAAC,GAAQ,IAAD,EACL7B,EAAU,OAAH6B,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAK7B,YAAI,WAAN,EAAH,EAAWyC,eACxB,GAAIzC,EAAK+B,OAAQ,CAAC,IAAD,EACf5B,EAAc,CAAEH,KAAMA,EAAKA,KAAMC,WAAW,IAC5C,IACMyC,GADY,OAAJ1C,QAAI,IAAJA,GAAU,QAAN,EAAJA,EAAMA,YAAI,WAAN,EAAJ,EAAYI,OACDuC,KAAI,SAAAC,GAAI,OAAIA,EAAKP,MAC1CtB,GAAiB,CAAEf,KAAM0C,EAAYzC,WAAW,IAChDH,EAAiB4C,OAGpBV,OAAM,SAAAC,GACLC,QAAQC,IAAI,+BAAgCF,MAE7CG,SAAQ,WACP9B,GAAS,SAAAM,GAAK,kCAAUA,GAAK,IAAEX,WAAW,YAE7C,IAEH,IAiIM4C,GAAc,CAClB,CACEC,MAAO,OACPC,UAAW,OACXC,IAAK,OACLC,MAAO,IACPC,UAAU,EACVC,OAAQ,SAACC,EAAMD,GAAM,OAAK,uBAAUE,MAAOF,EAAOd,IAAKc,EAAOG,OAC9DC,OAAQ,SAACC,EAAGC,GAAC,OAAKD,EAAEF,KAAOG,EAAEH,KAAO,GAAK,IAE3C,CACER,MAAO,kBACPC,UAAW,mBACXC,IAAK,mBACLC,MAAO,IACPE,OAAQ,SAACC,GAAI,OAAKA,KAItB,OACE,oCACE,kBAAC,IAAU,CACTN,MACEvD,EAAO8C,GAAE,kCACsBnC,EAAWD,UAAY,GAAE,WAAOC,EAAWF,KAAK0D,MAAK,MAChF,YAENC,QAAS,CACPpE,EAAO8C,IACL,yBAAKW,IAAI,IAAIY,UAAU,uBACrB,kBAAC,IAAM,CACLC,SAAU3D,EAAWD,UACrB6D,QAAStD,GACTuD,QA5DQ,WACpBtD,IAAkB,GAClBU,IACG6C,OAAO,CACNC,SAAU5C,IAAU6C,oBACpB3B,UAAW,CAAEvC,KAAM,CAAE0D,MAAOxD,EAAWF,KAAK0D,MAAOS,eAAgB,SACnE5C,QAAS,CACPC,QAAS,CACPC,SAAUC,SACVC,cAAejB,OAIpBkB,MAAK,SAAAC,GAAQ,IAAD,EACL7B,EAAU,OAAH6B,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAK7B,YAAI,WAAN,EAAH,EAAWoE,cACpBpE,EAAK+B,OACPsC,IAAMC,QAAQtE,EAAKuE,SAEnBF,IAAMhE,MAAML,EAAKuE,YAGpBvC,OAAM,SAAAC,GACLoC,IAAMhE,MAAM,8BAEb+B,SAAQ,kBAAM3B,IAAkB,OAqCvB+D,KAAK,QACL1B,MAAM,iBACN2B,KAAK,WAEL,kBAAC,IAAW,CAACC,KAAK,aACjBzE,GAAY,aAAe,sBAMtC,kBAAC,IAAI,KACH,uBAAK0E,OAAQ,IACX,uBAAKC,GAAI,GAAIC,GAAI,IACf,kBAAC,IAAK,CAACC,UAAQ,GACZvF,EAAO8C,IAAMnC,EAAWD,UACvB,yBAAK8E,KAAG,EAACnB,UAAU,QACjB,6BAGF,uBACEoB,MAAO,CAAE/B,MAAO,QAChBhC,KAAMA,GACNgE,KAAK,WACLC,SA3LK,SAAAC,GACnB,IAAKtF,EAAcuF,OAAQ,OAAOf,IAAMgB,KAAK,2BAG7C,GADA9E,IAAa,GACRhB,EAAO8C,GA4CP,CACH,IAAQiD,EAAsCH,EAAtCG,WAAYC,EAA0BJ,EAA1BI,UAAWC,EAAeL,EAAfK,MAAOC,EAAQN,EAARM,IAChClD,EAAY,CAChBvC,KAAM,CACJqC,GAAIG,SAASjD,EAAO8C,IACpBiD,aACAE,QACAC,MACAF,YACAG,SAAU7F,EAAc8C,KAAI,SAAAC,GAAI,MAAK,CAAE+C,QAAS/C,MAChDgD,YAAajG,EACbI,cAIJoB,IACG6C,OAAO,CACNC,SAAU4B,IAAaC,aACvBvD,YACAwD,eAAgB,CACd,CACE3E,MAAOC,IAAU2E,cACjBzE,QAAS,CACPC,QAAS,CACPC,SAAUC,SACVC,cAAesE,IAAQC,IAAI,YAIjC,CAAC,gBAEH3E,QAAS,CACPC,QAAS,CACPC,SAAUC,SACVC,cAAesE,IAAQC,IAAI,aAIhCtE,MAAK,SAAAC,GAAQ,IAAD,EACL7B,EAAU,OAAH6B,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAK7B,YAAI,WAAN,EAAH,EAAWmG,YACxB,IAAKnG,EAAK+B,OAAQ,OAAOsC,IAAMhE,MAAML,EAAKuE,SAC1C6B,YAAW,WACTjH,EAAQkH,KAAK,yBACZ,KACHhC,IAAMC,QAAQtE,EAAKuE,YAEpBvC,OAAM,SAAAC,GACLC,QAAQC,IAAI,wBAAyBF,GACrCoC,IAAMhE,MAAM,6BAEb+B,SAAQ,kBAAM7B,IAAa,UA9FhB,CAEd,IAAMgC,EAAY,CAChBvC,KAAK,2BAAMmF,GAAM,IAAEO,SAAU7F,EAAc8C,KAAI,SAAAC,GAAI,MAAK,CAAE+C,QAAS/C,MAAUjD,aAAYI,WAAW,KAEtGoB,IACG6C,OAAO,CACNC,SAAU4B,IAAaS,cACvB/D,YACAwD,eAAgB,CACd,CACE3E,MAAOC,IAAU2E,cACjBzE,QAAS,CACPC,QAAS,CACPC,SAAUC,SACVC,cAAesE,IAAQC,IAAI,YAIjC,CAAC,gBAEH3E,QAAS,CACPC,QAAS,CACPC,SAAUC,SACVC,cAAesE,IAAQC,IAAI,aAIhCtE,MAAK,SAAAC,GACJ,IAAM7B,EAAO6B,EAAI7B,KAAKuG,YACtB,IAAKvG,EAAK+B,OAAQ,OAAOsC,IAAMhE,MAAML,EAAKuE,SAC1C6B,YAAW,WACTjH,EAAQkH,KAAK,yBACZ,KACHhC,IAAMC,QAAQ,GAAD,OAAIa,EAAOzB,MAAK,4BAE9B1B,OAAM,SAAAC,GACLC,QAAQC,IAAI,qBAAsBF,GAClCoC,IAAMhE,MAAM,8BAEb+B,SAAQ,kBAAM7B,IAAa,QAgJlBiG,eAAgB,SAAAC,GAAS,OAAIvE,QAAQC,IAAI,qBAAsBsE,IAC/DC,SAAU,CAAEC,KAAM,GAClBC,cACErH,EAAO8C,GACH,CACAiD,WAAYpF,EAAWF,KAAKsF,WAC5BC,UAAWrF,EAAWF,KAAKuF,UAC3BC,MAAOtF,EAAWF,KAAKwF,MACvBC,IAAKvF,EAAWF,KAAKyF,KAErB,MAGN,uBAAKd,OAAQ,IACX,uBAAKgC,KAAM,IACT,sBAAME,KAAI,CACRC,MAAO,CAAC,CAAEC,UAAU,EAAMC,IA3R9B,GA2R8CzC,QAAS,4BACnDU,KAAK,aACLgC,MAAM,aACNP,SAAU,CAAE1B,MAAO,CAAE/B,MAAO,SAE5B,2BACE,uBAAK0D,KAAM,IACT,uBAAOO,aAAwB,OAAVhH,QAAU,IAAVA,GAAgB,QAAN,EAAVA,EAAYF,YAAI,WAAN,EAAV,EAAkBsF,WAAY6B,YAAY,0BAOzE,uBAAKxC,OAAQ,IACX,uBAAKgC,KAAM,IACT,sBAAME,KAAI,CACRC,MAAO,CAAC,CAAEC,UAAU,EAAMxC,QAAS,2BACnCU,KAAK,YACLgC,MAAM,YACNP,SAAU,CAAE1B,MAAO,CAAE/B,MAAO,SAE5B,2BACE,uBAAK0D,KAAM,IACT,uBAAOO,aAAwB,OAAVhH,QAAU,IAAVA,GAAgB,QAAN,EAAVA,EAAYF,YAAI,WAAN,EAAV,EAAkBuF,UAAW4B,YAAY,0BAOtE5H,EAAO8C,IACP,uBAAKsC,OAAQ,IACX,uBAAKgC,KAAM,IACT,sBAAME,KAAI,CACRC,MAAO,CACL,CACEC,UAAU,EACVxC,QAAS,wBACTyC,IAlUV,KAqUM/B,KAAK,QACLgC,MAAM,QACNP,SAAU,CAAE1B,MAAO,CAAE/B,MAAO,SAE5B,2BACE,uBAAK0D,KAAM,IACT,uBAAOlC,KAAK,QAAQ0C,YAAY,6BAS5C,uBAAKxC,OAAQ,IACX,uBAAKgC,KAAM,IACT,sBAAME,KAAI,CACRI,MAAM,QACNhC,KAAK,QACLyB,SAAU,CAAE1B,MAAO,CAAE/B,MAAO,SAC5B,2BACE,uBAAK0D,KAAM,IACT,uBAAOlC,KAAK,OAAOyC,aAAwB,OAAVhH,QAAU,IAAVA,GAAgB,QAAN,EAAVA,EAAYF,YAAI,WAAN,EAAV,EAAkBwF,MAAO2B,YAAY,4BAOhF,uBAAKxC,OAAQ,IACX,uBAAKgC,KAAM,IACT,sBAAME,KAAI,CACRI,MAAM,MACNhC,KAAK,MACLyB,SAAU,CAAE1B,MAAO,CAAE/B,MAAO,SAC5B,2BACE,uBAAK0D,KAAM,IACT,uBAAOlC,KAAK,OAAOyC,aAAwB,OAAVhH,QAAU,IAAVA,GAAgB,QAAN,EAAVA,EAAYF,YAAI,WAAN,EAAV,EAAkByF,IAAK0B,YAAY,0BAO9E,sBAAMN,KAAI,CAAC5B,KAAK,aAAagC,MAAM,eACjC,uBAAQG,QAASzH,EAAY0H,SAAU,SAAAD,GAAO,OAAIxH,EAAcwH,OAGlE,uBAAKzC,OAAQ,IACX,uBAAKgC,KAAM,GAAIW,OAAQ,GACrB,sBAAMT,KAAI,CAAC5B,KAAK,WAAWsC,aAAa,IACpChI,EAAO8C,IAAMvB,GAAcb,WAAcG,EAAMH,UAC/C,yBAAK2D,UAAU,QACb,6BAGF,oCACE,sBAAU4D,MAAK,CACbxC,MAAO,CACL/B,MAAO,OACPwE,UAAW,OAEbP,aAAcpG,GAAcd,KAC5BqH,SAAU,SAAAK,GAAa,OAAI5H,EAAiB4H,KAE5C,0BAAM9D,UAAW,YACf,wBAAIoB,MAAO,CAAE2C,SAAU,OAAQC,WAAY,QAAQ,iBACnD,uBACEhE,UAAU,mBACViE,QAAShF,GACTiF,OAAQ,KACR9C,MAAO,CAAE+C,aAAc,OACvBvD,KAAK,QACLwD,WAAY5H,EAAMA,MAAQA,EAAMA,MAAQ,GACxC6H,aAAc,SAACC,EAAQC,GAAK,OAAMA,EAAQ,IAAM,EAAI,GAAK,iBACzDC,WAAY,CACVC,gBAAiBC,IAAOC,kBACxBC,MAAOpI,EAAMA,MAAQA,EAAMA,MAAMgF,OAAS,EAC1CqD,UAAW,SAACD,EAAOE,GAAK,gBAAQA,EAAM,GAAE,YAAIA,EAAM,GAAE,eAAOF,EAAK,oBAalF,yBACExD,MAAO,CACL2D,QAAS,OACTC,eAAgB,WAChBnB,UAAW,QAGb,sBAAMZ,KAAI,KACR,kBAAC,IAAM,CACL/C,QAAS7D,GACT4D,SAAUzD,EAAMH,UAChBuE,KAAK,UACLqE,SAAS,SACTpE,KAAK,UACLqE,QAAM,GAEL7I,GAAY,aAAe,QAE9B,kBAAC,IAAI,CAAC8I,GAAG,uBACP,kBAAC,IAAM,CAAC/D,MAAO,CAAEgE,WAAY,IAAMvE,KAAK,QAAQD,KAAK,WAAS","file":"static/js/50.6a984d47.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Row, Col, Form, Input, Spin, Switch, Checkbox, Typography, Table } from 'antd';\nimport FeatherIcon from 'feather-icons-react';\nimport { PageHeader } from '../../components/page-headers/page-headers';\nimport { Main } from '../styled';\nimport { Cards } from '../../components/cards/frame/cards-frame';\nimport { Button } from '../../components/buttons/buttons';\nimport { Link, useHistory, useLocation } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport apolloClient, { authMutation, authQuery } from '../../utility/apollo';\nimport { toast } from 'react-toastify';\nimport queryString from 'query-string';\nimport Cookies from 'js-cookie';\nimport { viewPermission } from '../../utility/utility';\nimport config from '../../config/config';\nconst { Paragraph } = Typography;\n\nconst AddAdmin = () => {\n  viewPermission('user');\n  const history = useHistory();\n  const { search } = useLocation();\n  const params = queryString.parse(search);\n  const maxLength = 30;\n  const [userStatus, setUserStatus] = useState(true);\n  const [selectedRoles, setSelectedRoles] = useState([]);\n  const [sendEmail, setSendEmail] = useState(true);\n  const [singleUser, setSingleUser] = useState({ data: {}, isLoading: true });\n\n  const [roles, setRoles] = useState({\n    roles: [],\n    isLoading: true,\n    error: null,\n  });\n  const [isLoading, setIsLoading] = useState(false);\n  const [isResetLoading, setIsResetLoading] = useState(false);\n  const token = useSelector(state => state.auth.token);\n  const [existingRoles, setExistingRoles] = useState({ data: [], isLoading: true });\n\n  const [form] = Form.useForm();\n\n  useEffect(() => {\n    // get all roles\n    setRoles(state => ({ ...state, isLoading: true }));\n\n    apolloClient\n      .query({\n        query: authQuery.GET_ALL_ROLES,\n        context: {\n          headers: {\n            TENANTID: process.env.REACT_APP_TENANTID,\n            Authorization: token,\n          },\n        },\n      })\n      .then(res => {\n        const data = res?.data?.getAllRoles;\n        if (data.status) {\n          setRoles(state => ({ ...state, roles: data.data }));\n        }\n      })\n      .catch(err => {\n        console.log('Error on get all role', err);\n      })\n      .finally(() => {\n        setRoles(state => ({ ...state, isLoading: false }));\n      });\n  }, []);\n\n  useEffect(() => {\n    // get Single admin - update admin\n    if (!params.id) return;\n\n    apolloClient\n      .query({\n        query: authQuery.GET_SINGLE_ADMIN,\n        variables: { query: { id: parseInt(params.id) } },\n        context: {\n          headers: {\n            TENANTID: process.env.REACT_APP_TENANTID,\n            Authorization: token,\n          },\n        },\n      })\n      .then(res => {\n        const data = res?.data?.getSingleAdmin;\n        if (data.status) {\n          setSingleUser({ data: data.data, isLoading: false });\n          const roles = data?.data?.roles;\n          const rolesArray = roles.map(item => item.id);\n          setExistingRoles({ data: rolesArray, isLoading: false });\n          setSelectedRoles(rolesArray);\n        }\n      })\n      .catch(err => {\n        console.log('Error on loading single user', err);\n      })\n      .finally(() => {\n        setRoles(state => ({ ...state, isLoading: false }));\n      });\n  }, []);\n\n  const handleSubmit = values => {\n    if (!selectedRoles.length) return toast.warn('Select At List 1 Role..');\n\n    setIsLoading(true);\n    if (!params.id) {\n      // ADD NEW ADMIN\n      const variables = {\n        data: { ...values, role_ids: selectedRoles.map(item => ({ role_id: item })), userStatus, sendEmail: true },\n      };\n      apolloClient\n        .mutate({\n          mutation: authMutation.ADMIN_SIGN_UP,\n          variables,\n          refetchQueries: [\n            {\n              query: authQuery.GET_ALL_STAFF,\n              context: {\n                headers: {\n                  TENANTID: process.env.REACT_APP_TENANTID,\n                  Authorization: Cookies.get('psp_t'),\n                },\n              },\n            },\n            ['getAllStaff'],\n          ],\n          context: {\n            headers: {\n              TENANTID: process.env.REACT_APP_TENANTID,\n              Authorization: Cookies.get('psp_t'),\n            },\n          },\n        })\n        .then(res => {\n          const data = res.data.adminSignUp;\n          if (!data.status) return toast.error(data.message);\n          setTimeout(() => {\n            history.push('/admin/admin/admins');\n          }, 1000);\n          toast.success(`${values.email} added successfully.`);\n        })\n        .catch(err => {\n          console.log('Error on add admin', err);\n          toast.error('Something went wrong !!');\n        })\n        .finally(() => setIsLoading(false));\n    }\n\n    // UPDATE ADMIN\n    else {\n      const { first_name, last_name, phone, fax } = values;\n      const variables = {\n        data: {\n          id: parseInt(params.id),\n          first_name,\n          phone,\n          fax,\n          last_name,\n          role_ids: selectedRoles.map(item => ({ role_id: item })),\n          user_status: userStatus,\n          sendEmail,\n        },\n      };\n\n      apolloClient\n        .mutate({\n          mutation: authMutation.ADMIN_UPDATE,\n          variables,\n          refetchQueries: [\n            {\n              query: authQuery.GET_ALL_STAFF,\n              context: {\n                headers: {\n                  TENANTID: process.env.REACT_APP_TENANTID,\n                  Authorization: Cookies.get('psp_t'),\n                },\n              },\n            },\n            ['getAllStaff'],\n          ],\n          context: {\n            headers: {\n              TENANTID: process.env.REACT_APP_TENANTID,\n              Authorization: Cookies.get('psp_t'),\n            },\n          },\n        })\n        .then(res => {\n          const data = res?.data?.adminUpdate;\n          if (!data.status) return toast.error(data.message);\n          setTimeout(() => {\n            history.push('/admin/admin/admins');\n          }, 1000);\n          toast.success(data.message);\n        })\n        .catch(err => {\n          console.log('Error on update admin', err);\n          toast.error(`Something went wrong!!`);\n        })\n        .finally(() => setIsLoading(false));\n    }\n  };\n\n  const resetPassword = () => {\n    setIsResetLoading(true);\n    apolloClient\n      .mutate({\n        mutation: authQuery.SEND_RESET_PASSWORD,\n        variables: { data: { email: singleUser.data.email, permissionName: 'user' } },\n        context: {\n          headers: {\n            TENANTID: process.env.REACT_APP_TENANTID,\n            Authorization: token,\n          },\n        },\n      })\n      .then(res => {\n        const data = res?.data?.resetPassword;\n        if (data.status) {\n          toast.success(data.message);\n        } else {\n          toast.error(data.message);\n        }\n      })\n      .catch(err => {\n        toast.error('Something Went wrong !!');\n      })\n      .finally(() => setIsResetLoading(false));\n  };\n\n  const roleColumns = [\n    {\n      title: 'Role',\n      dataIndex: 'role',\n      key: 'role',\n      width: 100,\n      ellipsis: true,\n      render: (text, render) => <Checkbox value={render.id}>{render.role}</Checkbox>,\n      sorter: (a, b) => a.role > b.role ? 1 : -1\n    },\n    {\n      title: 'Role Descrption',\n      dataIndex: 'role_description',\n      key: 'role_description',\n      width: 120,\n      render: (text) => text\n    }\n  ]\n\n  return (\n    <>\n      <PageHeader\n        title={\n          params.id\n            ? `Manage User | Edit user ${singleUser.isLoading ? '' : `(${singleUser.data.email})`}`\n            : 'Add Admin'\n        }\n        buttons={[\n          params.id && (\n            <div key=\"1\" className=\"page-header-actions\">\n              <Button\n                disabled={singleUser.isLoading}\n                loading={isResetLoading}\n                onClick={resetPassword}\n                size=\"small\"\n                title=\"Reset Password\"\n                type=\"primary\"\n              >\n                <FeatherIcon icon=\"settings\" />\n                {isLoading ? 'Processing' : 'Reset Password'}\n              </Button>\n            </div>\n          ),\n        ]}\n      />\n      <Main>\n        <Row gutter={25}>\n          <Col sm={24} xs={24}>\n            <Cards headless>\n              {params.id && singleUser.isLoading ? (\n                <div div className=\"spin\">\n                  <Spin />\n                </div>\n              ) : (\n                <Form\n                  style={{ width: '100%' }}\n                  form={form}\n                  name=\"addAdmin\"\n                  onFinish={handleSubmit}\n                  onFinishFailed={errorInfo => console.log('form error info:\\n', errorInfo)}\n                  labelCol={{ span: 4 }}\n                  initialValues={\n                    params.id\n                      ? {\n                        first_name: singleUser.data.first_name,\n                        last_name: singleUser.data.last_name,\n                        phone: singleUser.data.phone,\n                        fax: singleUser.data.fax\n                      }\n                      : null\n                  }\n                >\n                  <Row gutter={25}>\n                    <Col span={10}>\n                      <Form.Item\n                        rules={[{ required: true, max: maxLength, message: 'Please enter First Name' }]}\n                        name=\"first_name\"\n                        label=\"First Name\"\n                        labelCol={{ style: { width: \"40%\" } }}\n                      >\n                        <Row>\n                          <Col span={20}>\n                            <Input defaultValue={singleUser?.data?.first_name} placeholder=\"Enter First Name\" />\n                          </Col>\n                        </Row>\n                      </Form.Item>\n                    </Col>\n                  </Row>\n\n                  <Row gutter={25}>\n                    <Col span={10}>\n                      <Form.Item\n                        rules={[{ required: true, message: 'Please enter Last Name' }]}\n                        name=\"last_name\"\n                        label=\"Last Name\"\n                        labelCol={{ style: { width: \"40%\" } }}\n                      >\n                        <Row>\n                          <Col span={20}>\n                            <Input defaultValue={singleUser?.data?.last_name} placeholder=\"Enter Last Name\" />\n                          </Col>\n                        </Row>\n                      </Form.Item>\n                    </Col>\n                  </Row>\n\n                  {!params.id && (\n                    <Row gutter={25}>\n                      <Col span={10}>\n                        <Form.Item\n                          rules={[\n                            {\n                              required: true,\n                              message: 'Please enter an email',\n                              max: maxLength,\n                            },\n                          ]}\n                          name=\"email\"\n                          label=\"Email\"\n                          labelCol={{ style: { width: \"40%\" } }}\n                        >\n                          <Row>\n                            <Col span={20}>\n                              <Input type=\"email\" placeholder=\"Enter Email Address\" />\n                            </Col>\n                          </Row>\n                        </Form.Item>\n                      </Col>\n                    </Row>\n\n                  )}\n\n                  <Row gutter={25}>\n                    <Col span={10}>\n                      <Form.Item\n                        label=\"Phone\"\n                        name=\"phone\"\n                        labelCol={{ style: { width: \"40%\" } }}>\n                        <Row>\n                          <Col span={20}>\n                            <Input type=\"text\" defaultValue={singleUser?.data?.phone} placeholder=\"Enter Phone Number\" />\n                          </Col>\n                        </Row>\n                      </Form.Item>\n                    </Col>\n                  </Row>\n\n                  <Row gutter={25}>\n                    <Col span={10}>\n                      <Form.Item\n                        label=\"Fax\"\n                        name=\"fax\"\n                        labelCol={{ style: { width: \"40%\" } }}>\n                        <Row>\n                          <Col span={20}>\n                            <Input type=\"text\" defaultValue={singleUser?.data?.fax} placeholder=\"Enter Fax Number\" />\n                          </Col>\n                        </Row>\n                      </Form.Item>\n                    </Col>\n                  </Row>\n\n                  <Form.Item name=\"userStatus\" label=\"User Status\">\n                    <Switch checked={userStatus} onChange={checked => setUserStatus(checked)} />\n                  </Form.Item>\n\n                  <Row gutter={25}>\n                    <Col span={20} offset={2}>\n                      <Form.Item name=\"role_ids\" initialValue=\"\" >\n                        {(params.id && existingRoles.isLoading) || roles.isLoading ? (\n                          <div className=\"spin\">\n                            <Spin />\n                          </div>\n                        ) : (\n                          <>\n                            <Checkbox.Group\n                              style={{\n                                width: '100%',\n                                marginTop: '1em',\n                              }}\n                              defaultValue={existingRoles.data}\n                              onChange={checkedValues => setSelectedRoles(checkedValues)}\n                            >\n                              <span className={\"psp_list\"} >\n                                <h2 style={{ fontSize: \"15px\", fontWeight: \"600\" }}>Select Roles:</h2>\n                                <Table\n                                  className=\"table-responsive\"\n                                  columns={roleColumns}\n                                  rowKey={'id'}\n                                  style={{ borderRadius: \"0px\" }}\n                                  size=\"small\"\n                                  dataSource={roles.roles ? roles.roles : []}\n                                  rowClassName={(record, index) => (index % 2 === 0 ? \"\" : \"altTableClass\")}\n                                  pagination={{\n                                    defaultPageSize: config.CUSTOMER_PER_PAGE,\n                                    total: roles.roles ? roles.roles.length : 0,\n                                    showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} items`,\n                                  }}\n                                />\n                              </span>\n\n                            </Checkbox.Group>\n                          </>\n                        )}\n                      </Form.Item>\n                    </Col>\n                  </Row>\n\n\n                  <div\n                    style={{\n                      display: 'flex',\n                      justifyContent: 'flex-end',\n                      marginTop: '3em',\n                    }}\n                  >\n                    <Form.Item>\n                      <Button\n                        loading={isLoading}\n                        disabled={roles.isLoading}\n                        size=\"default\"\n                        htmlType=\"submit\"\n                        type=\"primary\"\n                        raised\n                      >\n                        {isLoading ? 'Processing' : 'Save'}\n                      </Button>\n                      <Link to=\"/admin/admin/admins\">\n                        <Button style={{ marginLeft: 10 }} type=\"light\" size=\"default\">\n                          Cancel\n                        </Button>\n                      </Link>\n                    </Form.Item>\n                  </div>\n                </Form>\n              )}\n            </Cards>\n          </Col>\n        </Row>\n      </Main>\n    </>\n  );\n};\n\nexport default AddAdmin;\n"],"sourceRoot":""}