{"version":3,"sources":["container/customers/AllUser.js"],"names":["RangePicker","checkPoint","ListUser","viewPermission","token","useSelector","state","auth","useState","isFilter","setIsFilter","searchButton","setSearchButton","searchDisable","setSearchDisable","dateRange","setChangeDateRange","data","loading","error","staffs","setStaffs","customerStatus","customerEntryStartDate","customerEntryEndDate","emailVerified","filterParams","setFilterParams","columns","title","dataIndex","key","width","ellipsis","sorter","a","b","id","render","text","record","effect","src","renderImage","image","onError","errorImageSrc","alt","email","first_name","last_name","align","email_verified","toString","filters","value","onFilter","user_status","createdAt","className","format","parseInt","to","style","marginRight","name","color","returnMomentDateRange","start","finish","moment","useEffect","searchQuery","buttons","size","type","onClick","icon","gutter","sm","xs","headless","span","height","placeholder","prefix","onChange","e","persist","target","s","disabled","apolloClient","query","customerQuery","GET_ALL_CUSTOMER","variables","context","headers","TENANTID","process","Authorization","then","res","getAllCustomer","status","catch","err","finally","marginBottom","mode","onDeselect","val","prev","filter","item","onSelect","options","label","hidden","allowClear","picker","_d","rowKey","dataSource","rowClassName","index","pagination","defaultPageSize","config","CUSTOMER_PER_PAGE","total","length","showTotal","range"],"mappings":"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","file":"static/js/55.dd1c83c4.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Row, Col, Table, Input, Spin, Select, DatePicker } from 'antd';\nimport FeatherIcon from 'feather-icons-react';\nimport { PageHeader } from '../../components/page-headers/page-headers';\nimport { Main } from '../styled';\nimport { Cards } from '../../components/cards/frame/cards-frame';\nimport { RetweetOutlined, SearchOutlined } from '@ant-design/icons';\nimport { Button } from '../../components/buttons/buttons';\nimport apolloClient, { customerQuery } from '../../utility/apollo';\nimport { useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport FontAwesome from 'react-fontawesome';\nimport config from '../../config/config';\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\nimport { errorImageSrc, renderImage } from '../../utility/images';\nimport { viewPermission } from '../../utility/utility';\nimport Moment from 'react-moment';\nimport moment from 'moment';\nconst { RangePicker } = DatePicker;\n\n\nlet checkPoint = false;\n\nconst ListUser = () => {\n    viewPermission('customer');\n    const token = useSelector(state => state.auth.token);\n    const [isFilter, setIsFilter] = useState(false);\n    const [searchButton, setSearchButton] = useState(false);\n    const [searchDisable, setSearchDisable] = useState(true);\n    const [dateRange, setChangeDateRange] = useState(null);\n    const [staffs, setStaffs] = useState({ data: [], loading: false, error: '' });\n    const [filterParams, setFilterParams] = useState({\n        customerStatus: [],\n        customerEntryStartDate: '',\n        customerEntryEndDate: '',\n        emailVerified: '',\n        customerStatus: '',\n        searchQuery: ''\n    });\n\n\n    const searchCustomerAdmin = () => {\n        setStaffs(s => ({ ...s, loading: true }));\n        // return\n        apolloClient.query({\n            query: customerQuery.GET_ALL_CUSTOMER,\n            variables: {\n                query: {\n                    searchQuery: filterParams.searchQuery ?? '',\n                    customerStatus: filterParams.customerStatus ?? '',\n                    emailVerified: filterParams.emailVerified ?? '',\n                    customerEntryStartDate: filterParams.customerEntryStartDate ?? '',\n                    customerEntryEndDate: filterParams.customerEntryEndDate ?? '',\n                }\n            },\n            context: {\n                headers: {\n                    TENANTID: process.env.REACT_APP_TENANTID,\n                    Authorization: token\n                }\n            }\n        }).then(res => {\n            const data = res?.data?.getAllCustomer\n            if (!data?.status) return\n            setStaffs(data)\n\n        }).catch(err => {\n            setStaffs(s => ({ ...s, error: 'Something went Wrong.!! ' }))\n        }).finally(() => {\n            setStaffs(s => ({ ...s, loading: false }));\n            setSearchButton(!searchButton)\n        })\n    }\n\n    const columns = [\n        {\n            title: 'id',\n            dataIndex: 'id',\n            key: 'id',\n            width: 100,\n            ellipsis: true,\n            sorter: (a, b) => a.id > b.id ? 1 : -1\n        },\n        {\n            title: 'Image',\n            dataIndex: 'id',\n            key: 'id',\n            width: 90,\n            render: (text, record) => (<LazyLoadImage effect=\"blur\" width=\"40\" src={renderImage(record.id, record.image, 'user', '128x128', true)} onError={errorImageSrc} alt={record.id} />)\n        },\n        {\n            title: 'Email',\n            dataIndex: 'email',\n            key: 'email',\n            width: 150,\n            ellipsis: true,\n            sorter: (a, b) => a.email > b.email ? 1 : -1,\n\n        },\n        {\n            title: 'First Name',\n            dataIndex: 'first_name',\n            width: 150,\n            key: 'first_name',\n            sorter: (a, b) => a.first_name > b.first_name ? 1 : -1,\n        },\n        {\n            title: 'Last Name',\n            dataIndex: 'last_name',\n            width: 150,\n            key: 'last_name',\n            sorter: (a, b) => a.last_name > b.last_name ? 1 : -1,\n        },\n        {\n            title: 'Verified',\n            dataIndex: 'email_verified',\n            key: 'email_verified',\n            width: 120,\n            align: 'center',\n            render: (email_verified) => email_verified.toString(),\n            sorter: (a, b) => (a.email_verified === b.email_verified) ? 0 : a.email_verified ? -1 : 1,\n            filters: [\n                {\n                    text: 'Verified',\n                    value: true,\n                },\n                {\n                    text: 'Not Verified',\n                    value: false,\n                }\n            ],\n            onFilter: (value, record) => record.email_verified === value,\n        },\n        {\n            title: 'Status',\n            dataIndex: 'user_status',\n            key: 'user_status',\n            width: 120,\n            align: 'center',\n            render: (user_status) => user_status.toString(),\n            sorter: (a, b) => (a.user_status === b.user_status) ? 0 : a.user_status ? -1 : 1,\n            filters: [\n                {\n                    text: 'Enabled',\n                    value: true,\n                },\n                {\n                    text: 'Disabled',\n                    value: false,\n                }\n            ],\n            onFilter: (value, record) => record.user_status === value,\n        },\n        {\n            title: 'Date',\n            dataIndex: 'createdAt',\n            key: 'createdAt',\n            width: 150,\n            align: 'center',\n            sorter: (a, b) => (a.createdAt === b.createdAt ? 0 : a.createdAt ? -1 : 1),\n            render: (text, record) => (\n                <span className={'status-text'}>{<Moment format=\"DD-MMM-YYYY\">{parseInt(text)}</Moment>}</span>\n            )\n        },\n        {\n            title: 'Action',\n            dataIndex: 'id',\n            key: 'id',\n            width: 90,\n            align: 'center',\n            render: (id, record) => (\n                <>\n                    <Link to={`/admin/customers/edit/${id}`} style={{ marginRight: \"10px\" }}>\n                        <FontAwesome name=\"edit\" style={{ color: '#5F63F2' }} />\n                    </Link>\n                    <Link to={`/admin/customers/view/${id}`}>\n                        <FontAwesome name=\"eye\" style={{ color: 'rgb(46, 204, 113)' }} />\n                    </Link>\n                </>\n            ),\n        },\n    ]\n\n    const onDateRangeChange = dateRange => {\n        if (dateRange) {\n            setFilterParams(s => ({ ...s, customerEntryStartDate: dateRange[0]._d ?? '', customerEntryEndDate: dateRange[1]._d ?? '' }))\n            setChangeDateRange(returnMomentDateRange(dateRange[0], dateRange[1]));\n        } else {\n            setChangeDateRange(null);\n        }\n    };\n    const returnMomentDateRange = (start, finish) => {\n        return [moment(start, \"YYYY-MM-DD\"), moment(finish, \"YYYY-MM-DD\")];\n    };\n\n    useEffect(() => {\n        if (checkPoint) {\n            if (filterParams.searchQuery !== '' ||\n                filterParams.customerEntryStartDate !== '' ||\n                filterParams.customerEntryEndDate !== '' ||\n                filterParams.emailVerified !== '' ||\n                filterParams.customerStatus !== '') {\n                setSearchDisable(false)\n            } else {\n                setSearchDisable(true)\n            }\n        }\n        checkPoint = true;\n    }, [filterParams]);\n\n    return (\n        <>\n            <PageHeader\n                title=\"Customers\"\n                buttons={[\n                    <div key=\"1\" className=\"page-header-actions\">\n                        <Button\n                            size=\"small\"\n                            type=\"white\"\n                            onClick={() => setIsFilter(state => !state)}\n                        >\n                            <FeatherIcon icon=\"filter\" />\n                            Filter\n                        </Button>\n                        <Button size=\"small\" type=\"white\" onClick={() => {\n                            setChangeDateRange(null)\n                            setSearchDisable(true)\n                            setFilterParams({\n                                customerEntryStartDate: '',\n                                customerEntryEndDate: '',\n                                emailVerified: '',\n                                customerStatus: '',\n                                searchQuery: ''\n                            })\n                        }}>\n                            <RetweetOutlined />\n                            Reset Filter\n                        </Button>\n                        <Link to=\"/admin/customers/add\">\n                            <Button size=\"small\" title=\"Add Customer\" type=\"primary\">\n                                <FeatherIcon icon=\"user-plus\" />\n                            </Button>\n                        </Link>\n                    </div>\n                ]}\n            />\n            <Main>\n                <Row gutter={25}>\n                    <Col sm={24} xs={24}>\n                        <Cards headless>\n\n                            {staffs.loading ?\n                                <div className=\"spin\">\n                                    <Spin />\n                                </div>\n                                :\n                                staffs.error ?\n                                    <p>{staffs.error}</p>\n                                    :\n                                    <>\n                                        <Row gutter={25}>\n                                            <Col span={18}>\n                                                <Input\n                                                    style={{ height: \"42px\" }}\n                                                    placeholder=\"Search Customer...\"\n                                                    prefix={<SearchOutlined />}\n                                                    value={filterParams?.searchQuery}\n                                                    onChange={e => {\n                                                        e.persist()\n                                                        const value = e.target.value;\n                                                        setFilterParams(s => ({ ...s, searchQuery: value }));\n                                                    }}\n                                                />\n                                            </Col>\n                                            <Col span={6}>\n                                                <Button\n                                                    style={{ height: \"42px\" }}\n                                                    size=\"large\"\n                                                    type=\"primary\"\n                                                    disabled={searchDisable}\n                                                    onClick={searchCustomerAdmin}\n                                                >\n                                                    Search\n                                                </Button>\n                                            </Col>\n                                        </Row>\n                                        <br /><br />\n                                        {isFilter && (\n                                            <div style={{ marginBottom: '2.5em' }}>\n                                                <Row gutter={16}>\n                                                    <Col span={8}>\n                                                        Customer Status: <br />\n                                                        <Select\n                                                            style={{ width: '100%' }}\n                                                            placeholder=\"Select customer status\"\n                                                            size=\"middle\"\n                                                            mode='single'\n                                                            value={filterParams?.customerStatus === 'true' ? true : filterParams?.customerStatus === 'false' ? false : ''}\n                                                            onDeselect={(val) => setFilterParams(prev => ({ ...prev, customerStatus: prev.customerStatus.filter(item => item !== val) }))}\n                                                            onSelect={val => {\n                                                                setFilterParams(s => ({ ...s, customerStatus: val.toString() }));\n                                                            }}\n                                                            options={[\n                                                                {\n                                                                    label: 'Select customer status',\n                                                                    value: '',\n                                                                    hidden: true\n                                                                },\n                                                                {\n                                                                    label: 'Enable',\n                                                                    value: true\n                                                                },\n                                                                {\n                                                                    label: 'Disable',\n                                                                    value: false\n                                                                }\n                                                            ]}\n\n                                                        />\n                                                    </Col>\n                                                    <Col span={8}>\n                                                        Email Verified: <br />\n                                                        <Select\n                                                            style={{ width: '100%' }}\n                                                            placeholder=\"Select email status\"\n                                                            size=\"middle\"\n                                                            mode='single'\n                                                            value={filterParams?.emailVerified === 'true' ? true : filterParams?.emailVerified === 'false' ? false : ''}\n                                                            onDeselect={(val) => setFilterParams(prev => ({ ...prev, emailVerified: prev.emailVerified.filter(item => item !== val) }))}\n                                                            onSelect={val => {\n                                                                setFilterParams(s => ({ ...s, emailVerified: val.toString() }));\n                                                            }}\n                                                            options={[\n                                                                {\n                                                                    label: 'Select email status',\n                                                                    value: '',\n                                                                    disabled: true\n\n                                                                },\n                                                                {\n                                                                    label: 'Verified',\n                                                                    value: true\n                                                                },\n                                                                {\n                                                                    label: 'Not Verified',\n                                                                    value: false\n                                                                }\n                                                            ]}\n\n                                                        />\n                                                    </Col>\n\n\n                                                    <Col span={8}>\n                                                        Date Added: <br />\n                                                        <RangePicker\n                                                            style={{ height: '40px', width: '100%' }}\n                                                            size=\"small\"\n                                                            allowClear={true}\n                                                            picker=\"date\"\n                                                            value={dateRange !== \"\" ? dateRange : \"\"}\n                                                            onChange={onDateRangeChange}\n                                                        />\n                                                    </Col>\n                                                </Row>\n\n                                            </div>\n                                        )}\n\n                                        <span className={\"psp_list\"} >\n                                            <Table\n                                                className=\"table-responsive\"\n                                                columns={columns}\n                                                rowKey={'id'}\n                                                size=\"small\"\n                                                dataSource={staffs.data ? staffs.data : []}\n                                                rowClassName={(record, index) => (index % 2 === 0 ? \"\" : \"altTableClass\")}\n                                                // pagination={false}\n                                                pagination={{\n                                                    defaultPageSize: config.CUSTOMER_PER_PAGE,\n                                                    total: staffs.data ? staffs.data.length : 0,\n                                                    showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} items`,\n                                                }}\n                                            />\n                                        </span>\n                                    </>\n                            }\n\n\n                        </Cards>\n                    </Col>\n                </Row>\n            </Main>\n        </>\n    );\n};\n\nexport default ListUser;\n"],"sourceRoot":""}