{"version":3,"sources":["container/customers/AddressTable.js","container/customers/AddUser.js","apollo/customer/index.js"],"names":["AddressTable","initialData","addresses","setAddresses","defaultAddressId","setDefaultAddressId","useState","countries","setCountries","data","loading","newInitialData","setNewInitialData","useEffect","apolloClient","query","addressSchema","GET_COUNTRY_LIST","context","headers","TENANTID","process","then","res","getCountryList","status","GET_STATE_LISTS","variables","code","getStateList","states","map","item","filter","a","country_code","countryCode","finally","prev","column","title","dataIndex","key","render","_","record","onSelect","country","id","style","width","placeholder","defaultValue","options","label","name","value","text","type","onChange","e","address1","target","address2","city","state","abbreviation","val","zip_code","align","checked","isDefault","defaultChecked","size","onClick","removeRow","icon","prevState","className","columns","pagination","rowKey","dataSource","display","justifyContent","marginTop","marginBottom","disabled","htmlType","Date","getTime","marginRight","i","formItemLayout","labelCol","span","wrapperCol","AddUser","viewPermission","history","useHistory","userStatus","setUserStatus","isLoading","setIsLoading","token","useSelector","auth","operation","setOperation","user_id","setUserId","useForm","form","personForm","personType","setPersonType","isError","setIsError","current","setCurrent","message","setMessage","contactPersons","setContactPersons","personCheckBox","setPersonCheckBox","personModalOpen","setPersonModalOpen","initialAddress","shippingAddress","setShippingAddress","billingAddress","setBillingAddress","defaultShippingId","setDefaultShippingId","defaultBillingId","setDefaultBillingId","newBillingAddress","rest","parent_id","newShippingAddress","forEach","mutate","mutation","contactPersonsSchema","ADD_CONTACT_PERSON","ref_id","contact_persons","email","phone","fax","Authorization","createContactPerson","catch","err","customerMutation","ADD_CUSTOMER_BILLING_ADDRESS","ADD_CUSTOMER_SHIPPING_ADDRESS","updateVendorAddress","setTimeout","push","steps","percent","next","validateFields","notValidate","find","notValidate1","items","handleContactPerson","values","getFieldsValue","newData","isNew","resetFields","justify","margin","padding","showIcon","closable","onFinish","send_mail","ADD_CUSTOMER","refetchQueries","customerQuery","GET_ALL_CUSTOMER","fetchPolicy","addCustomer","console","log","onFinishFailed","errorInfo","gutter","sm","xs","headless","responsive","Item","rules","required","max","float","setFieldsValue","md","lg","border","Paragraph","color","count","to","length","raised","top","open","onOk","onCancel","okText","preserve","layout","initialValue","gql","GET_RATING_BY_USER_ID","UPDATE_CUSTOMER","UPDATE_CUSTOMER_ADDRESSES"],"mappings":"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","file":"static/js/29.b8b44a2c.chunk.js","sourcesContent":["import { Button, Checkbox, Input, Select, Switch, Table } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport FeatherIcon from 'feather-icons-react';\nimport { addressSchema } from '../../apollo/address';\nimport apolloClient from '../../utility/apollo';\n\nconst AddressTable = ({ initialData, addresses, setAddresses, defaultAddressId, setDefaultAddressId }) => {\n  // Change State After Country Change\n  const [countries, setCountries] = useState([]);\n  const [newInitialData, setNewInitialData] = useState({ data: [], loading: true });\n  useEffect(() => {\n    // Get Country List\n    apolloClient\n      .query({\n        query: addressSchema.GET_COUNTRY_LIST,\n        context: {\n          headers: { TENANTID: process.env.REACT_APP_TENANTID },\n        },\n      })\n      .then(res => {\n        const data = res.data.getCountryList;\n        if (!data.status) return true;\n        setCountries(data?.data);\n      });\n\n    // Get State List\n    apolloClient\n      .query({\n        query: addressSchema.GET_STATE_LISTS,\n        variables: {\n          query: {\n            code: '',\n          },\n        },\n        context: {\n          headers: {\n            TENANTID: process.env.REACT_APP_TENANTID,\n          },\n        },\n      })\n      .then(res => {\n        const data = res?.data?.getStateList;\n        if (!data?.status) return;\n        setNewInitialData({ data: { ...initialData, states: data?.data }, loading: false });\n        setAddresses(\n          addresses.map(item => {\n            return { ...item, states: data?.data?.filter(a => a.country_code === item.countryCode.code) };\n          }),\n        );\n      })\n      .finally(() => {\n        setNewInitialData(prev => ({ ...prev, loading: false }));\n      });\n  }, []);\n  const column = [\n    {\n      title: 'Country',\n      dataIndex: ['countryCode', 'name'],\n      key: 'name',\n      render: (_, record) => (\n        <Select\n          onSelect={country => {\n            setAddresses(\n              addresses.map(item => {\n                if (item.id === record.id) {\n                  return {\n                    ...item,\n                    country,\n                    states: newInitialData.data.states.filter(a => a.country_code === country),\n                  };\n                }\n                return item;\n              }),\n            );\n          }}\n          style={{ width: '100%' }}\n          placeholder=\"Country\"\n          defaultValue={record?.countryCode?.code}\n          options={countries?.map(item => ({\n            label: item?.name,\n            value: item?.code,\n          }))}\n        />\n      ),\n    },\n    {\n      title: 'Address 1',\n      dataIndex: 'address1',\n      key: 'address1',\n      width: 400,\n      render: (text, record) => (\n        <Input\n          defaultValue={text}\n          type=\"text\"\n          placeholder=\"Address 1\"\n          onChange={e => (record.address1 = e.target.value)}\n        />\n      ),\n    },\n    {\n      title: 'Address 2',\n      dataIndex: 'address2',\n      key: 'address2',\n      width: 400,\n      render: (text, record) => (\n        <Input\n          defaultValue={text}\n          type=\"text\"\n          placeholder=\"Address 2\"\n          onChange={e => (record.address2 = e.target.value)}\n        />\n      ),\n    },\n    {\n      title: 'City',\n      dataIndex: 'city',\n      key: 'city',\n      width: 150,\n      render: (text, record) => (\n        <Input defaultValue={text} type=\"text\" placeholder=\"City\" onChange={e => (record.city = e.target.value)} />\n      ),\n    },\n    {\n      title: 'State',\n      dataIndex: 'states',\n      key: 'states',\n      width: 150,\n      render: (states, record) => (\n        <Select\n          style={{ width: '100%' }}\n          placeholder=\"State\"\n          options={states?.map(item => ({\n            label: item.state,\n            value: item.abbreviation,\n          }))}\n          onSelect={val => (record.state = val)}\n          defaultValue={record.state}\n        />\n      ),\n    },\n    {\n      title: 'Zip Code',\n      dataIndex: 'zip_code',\n      key: 'zip_code',\n      width: 150,\n      render: (text, record) => (\n        <Input\n          defaultValue={text}\n          type=\"text\"\n          placeholder=\"Zip Code\"\n          onChange={e => (record.zip_code = e.target.value)}\n        />\n      ),\n    },\n    {\n      title: 'Default',\n      dataIndex: 'id',\n      key: 'id',\n      align: 'right',\n      width: 70,\n      render: (val, record) => (\n        <Checkbox\n          checked={defaultAddressId === val ? true : false}\n          onChange={e => {\n            record.isDefault = e.target.checked;\n            setDefaultAddressId(val);\n          }}\n        />\n      ),\n    },\n    {\n      title: 'Status',\n      dataIndex: 'status',\n      key: 'status',\n      align: 'right',\n      width: 90,\n      render: (text, record) => (\n        <Switch defaultChecked={text} title=\"Status\" onChange={checked => (record.status = checked)} />\n      ),\n    },\n\n    {\n      title: 'Action',\n      dataIndex: 'action',\n      key: 'action',\n      width: 150,\n      render: (text, record) => (\n        <Button size=\"\" title=\"Remove\" type=\"danger\" onClick={() => removeRow(record.id)}>\n          <FeatherIcon icon=\"trash-2\" />\n        </Button>\n      ),\n    },\n  ];\n\n  // Adding new row on table\n  const addNewRow = () => {\n    setAddresses(prevState => {\n      return [...prevState, { ...newInitialData.data, id: new Date().getTime() }];\n    });\n  };\n\n  const removeRow = id => {\n    setAddresses(prevState => {\n      return prevState.filter(item => item.id !== id);\n    });\n  };\n\n  return (\n    <div>\n      <Table\n        className=\"table-responsive\"\n        columns={column}\n        pagination={false}\n        rowKey={'id'}\n        size=\"small\"\n        dataSource={addresses}\n        loading={newInitialData?.loading}\n      />\n      <div style={{ display: 'flex', justifyContent: 'flex-end', marginTop: '10px', marginBottom: '10px' }}>\n        <Button\n          disabled={newInitialData?.loading}\n          title=\"Add Address\"\n          htmlType=\"button\"\n          type=\"primary\"\n          onClick={addNewRow}\n          style={{ marginRight: '.5em' }}\n        >\n          <FeatherIcon icon=\"plus\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default AddressTable;\n","import React, { useState } from 'react';\nimport { Row, Col, Form, Input, Switch, Tabs, Steps, Alert, Card, Modal, Typography, Badge } from 'antd';\nimport { PageHeader } from '../../components/page-headers/page-headers';\nimport { Main } from '../styled';\nimport { Cards } from '../../components/cards/frame/cards-frame';\nimport { Button } from '../../components/buttons/buttons';\nimport { Link, useHistory } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport apolloClient from '../../utility/apollo';\nimport { viewPermission } from '../../utility/utility';\n\nimport { customerMutation, customerQuery } from '../../apollo/customer';\nimport AddressTable from './AddressTable';\nimport { useEffect } from 'react';\nimport { contactPersonsSchema } from '../../apollo/contactPerson';\n\nconst formItemLayout = {\n  labelCol: {\n    span: 4,\n  },\n  wrapperCol: {\n    span: 18,\n  },\n};\n\nconst AddUser = () => {\n  viewPermission('customer');\n  const history = useHistory();\n  const maxLength = 30;\n  const [userStatus, setUserStatus] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n  const token = useSelector(state => state.auth.token);\n  const [operation, setOperation] = useState(false);\n  const [user_id, setUserId] = useState(null);\n  const [form] = Form.useForm();\n  const [personForm] = Form.useForm();\n  const [personType, setPersonType] = useState('Add');\n  const [isError, setIsError] = useState(false);\n  const [current, setCurrent] = useState(0);\n  const [message, setMessage] = useState(null);\n  const [contactPersons, setContactPersons] = useState([]);\n  const [personCheckBox, setPersonCheckBox] = useState(true);\n  const [personModalOpen, setPersonModalOpen] = useState(false);\n\n  const initialAddress = {\n    id: new Date().getTime(),\n    address1: '',\n    address2: '',\n    city: '',\n    country: '',\n    isDefault: false,\n    state: '',\n    status: true,\n    zip_code: '',\n  };\n  const [shippingAddress, setShippingAddress] = useState([]);\n  const [billingAddress, setBillingAddress] = useState([]);\n  const [defaultShippingId, setDefaultShippingId] = useState(null);\n  const [defaultBillingId, setDefaultBillingId] = useState(null);\n\n  const handleSubmit = () => {\n    const values = form.getFieldsValue(true);\n    // validate billingAddresses.\n    setIsLoading(true);\n    const variables = {\n      data: { ...values, status: userStatus, send_mail: true },\n    };\n    apolloClient\n      .mutate({\n        mutation: customerMutation.ADD_CUSTOMER,\n        variables,\n        context: {\n          headers: {\n            TENANTID: process.env.REACT_APP_TENANTID,\n            Authorization: token,\n          },\n        },\n        refetchQueries: [\n          {\n            query: customerQuery.GET_ALL_CUSTOMER,\n            context: {\n              headers: {\n                TENANTID: process.env.REACT_APP_TENANTID,\n                Authorization: token,\n              },\n            },\n            fetchPolicy: 'network-only',\n          },\n          ['getAllCustomer'],\n        ],\n      })\n      .then(res => {\n        const data = res?.data?.addCustomer;\n        if (!data.status) return setMessage({ type: 'error', message: data.message });\n\n        setOperation(true);\n        setUserId(data?.id);\n      })\n      .catch(err => {\n        console.log('error on adding customer', err);\n        setIsError(true);\n      })\n      .finally(() => setIsLoading(false));\n  };\n\n  useEffect(() => {\n    if (operation && user_id) {\n      const newBillingAddress = billingAddress.map(item => {\n        const { id, states, ...rest } = item;\n        return {\n          parent_id: user_id,\n          ...rest,\n        };\n      });\n      const newShippingAddress = shippingAddress.map(item => {\n        const { id, states, ...rest } = item;\n        return {\n          ...rest,\n          parent_id: user_id,\n        };\n      });\n\n      ['person', 'billing', 'shipping'].forEach(type => {\n        setIsLoading(true);\n        if (type === 'person') {\n          apolloClient\n            .mutate({\n              mutation: contactPersonsSchema.ADD_CONTACT_PERSON,\n              variables: {\n                data: {\n                  ref_id: user_id,\n                  type: 'customer',\n                  contact_persons: [\n                    ...contactPersons.map(item => ({\n                      name: item.name,\n                      email: item.email,\n                      phone: item.phone,\n                      fax: item.fax,\n                      status: item.status,\n                    })),\n                  ],\n                },\n              },\n              context: {\n                headers: {\n                  TENANTID: process.env.REACT_APP_TENANTID,\n                  Authorization: token,\n                },\n              },\n            })\n            .then(res => {\n              const data = res?.data?.createContactPerson;\n              if (!data?.status) return setIsError(true);\n            })\n            .catch(err => {\n              setIsError(true);\n            });\n        } else {\n          apolloClient\n            .mutate({\n              mutation:\n                type === 'billing'\n                  ? customerMutation.ADD_CUSTOMER_BILLING_ADDRESS\n                  : customerMutation.ADD_CUSTOMER_SHIPPING_ADDRESS,\n              variables: {\n                data: {\n                  addresses: [...(type === 'billing' ? newBillingAddress : newShippingAddress)],\n                },\n              },\n              context: {\n                headers: {\n                  TENANTID: process.env.REACT_APP_TENANTID,\n                  Authorization: token,\n                },\n              },\n            })\n            .then(res => {\n              const data = res?.data?.updateVendorAddress;\n              if (!data?.status) return;\n            })\n            .catch(err => {\n              setIsError(true);\n            })\n            .finally(res => {\n              setIsLoading(false);\n              if (type === 'shipping') {\n                if (!isError) {\n                  setMessage({ type: 'success', message: 'User Created Successfully' });\n                  setTimeout(() => {\n                    history.push('/admin/customers/list');\n                  }, [2000]);\n                }\n              }\n            });\n        }\n      });\n    }\n  }, [operation, user_id]);\n\n  /* -------------------------- Step From Data Start -------------------------- */\n  const steps = [\n    {\n      title: 'General',\n      percent: 40,\n    },\n    {\n      title: 'Billing Address',\n      percent: 60,\n    },\n    {\n      title: 'Shipping Address',\n      percent: 80,\n    },\n    {\n      title: 'Contact Persons',\n      percent: 100,\n    },\n  ];\n\n  const next = async () => {\n    try {\n      if (current === 0) {\n        await form.validateFields(['first_name', 'last_name', 'email']);\n      } else if (current === 1) {\n        // validate billingAddresses.\n        const notValidate = billingAddress.find(item => {\n          const { id, address1, country, city, state, zip_code, address2 } = item;\n          const checkFalse = !(id && address1 && country && city && state && zip_code && address2);\n          return checkFalse;\n        });\n        if (notValidate?.id) return setMessage({ type: 'warning', message: 'Enter Billing Address Correctly.' });\n      } else if (current === 2) {\n        // validate shippingAddresses.\n        const notValidate1 = shippingAddress.find(item => {\n          const { id, address1, country, city, state, zip_code, address2 } = item;\n          const checkFalse = !(id && address1 && country && city && state && zip_code && address2);\n          return checkFalse;\n        });\n        if (notValidate1?.id) return setMessage({ type: 'warning', message: 'Enter Shipping Address Correctly.' });\n      } else if (current === 3) {\n      }\n      setCurrent(current + 1);\n    } catch {}\n  };\n  const prev = () => {\n    setCurrent(current - 1);\n  };\n  const items = steps.map(item => ({\n    key: item.title,\n    title: item.title,\n    percent: item.percent,\n  }));\n  /* ---------------------------- tep Form Data end --------------------------- */\n\n  const handleContactPerson = async () => {\n    await personForm.validateFields(['email', 'name', 'phone']);\n    const values = personForm.getFieldsValue();\n    const newData = { ...values, id: new Date().getTime(), isNew: true };\n    setContactPersons(prev => [...prev, newData]);\n    setPersonModalOpen(false);\n    personForm.resetFields();\n  };\n\n  const handleAddPerson = () => {\n    personForm.setFieldsValue({\n      name: '',\n      email: '',\n      status: true,\n      phone: '',\n      fax: '',\n    });\n    setPersonType('Add');\n    setPersonCheckBox(true);\n    setPersonModalOpen(true);\n  };\n\n  return (\n    <>\n      <PageHeader title=\"Add Customer\" />\n      <Main>\n        <Row align=\"middle\" justify=\"center\" style={{ margin: 0, padding: 0 }}>\n          {message && (\n            <Alert\n              style={{ width: '50%', marginBottom: 10 }}\n              message={message?.message}\n              type={message?.type}\n              showIcon\n              closable\n            />\n          )}\n        </Row>\n        <Form\n          style={{ width: '100%' }}\n          form={form}\n          name=\"addProduct\"\n          onFinish={handleSubmit}\n          onFinishFailed={errorInfo => console.log('form error info:\\n', errorInfo)}\n          labelCol={{ span: 4 }}\n        >\n          <Row gutter={25}>\n            <Col sm={24} xs={24}>\n              <Cards headless>\n                <Row style={{ marginBottom: 20 }}>\n                  <Steps\n                    current={current}\n                    items={items}\n                    percent={items[current].percent}\n                    responsive={true}\n                    size=\"small\"\n                  />\n                </Row>\n                <Row gutter={25}>\n                  <Col span={24}>\n                    <div className=\"steps-content\">\n                      {current === 0 && (\n                        <Row gutter={25}>\n                          <Col sm={24}>\n                            <Form.Item\n                              rules={[{ required: true, max: maxLength, message: 'Please enter First Name' }]}\n                              name=\"first_name\"\n                              label=\"First Name\"\n                            >\n                              <Input style={{ width: '50%' }} placeholder=\"Enter First Name\" />\n                            </Form.Item>\n                            <Form.Item\n                              rules={[{ required: true, message: 'Please enter Last Name' }]}\n                              name=\"last_name\"\n                              label=\"Last Name\"\n                            >\n                              <Input style={{ width: '50%' }} placeholder=\"Enter Last Name\" />\n                            </Form.Item>\n                            <Form.Item\n                              rules={[\n                                {\n                                  required: true,\n                                  message: 'Please enter an email',\n                                  max: maxLength,\n                                },\n                              ]}\n                              name=\"email\"\n                              label=\"Email\"\n                            >\n                              <Input style={{ width: '50%' }} type=\"email\" placeholder=\"Enter Email Address\" />\n                            </Form.Item>\n                            <Form.Item label=\"User Status\">\n                              <Switch checked={userStatus} onChange={checked => setUserStatus(checked)} />\n                            </Form.Item>\n                          </Col>\n                        </Row>\n                      )}\n                      {current === 1 && (\n                        <AddressTable\n                          initialData={initialAddress}\n                          addresses={billingAddress}\n                          setAddresses={setBillingAddress}\n                          defaultAddressId={defaultBillingId}\n                          setDefaultAddressId={setDefaultBillingId}\n                        />\n                      )}\n                      {current === 2 && (\n                        <AddressTable\n                          initialData={initialAddress}\n                          addresses={shippingAddress}\n                          setAddresses={setShippingAddress}\n                          defaultAddressId={defaultShippingId}\n                          setDefaultAddressId={setDefaultShippingId}\n                        />\n                      )}\n                      {current === 3 && (\n                        <>\n                          <Row gutter={25}>\n                            <Col span={24}>\n                              <Button\n                                size=\"small\"\n                                style={{ float: 'right' }}\n                                title=\"Add Person\"\n                                htmlType=\"button\"\n                                type=\"primary\"\n                                onClick={handleAddPerson}\n                              >\n                                Add Person\n                              </Button>\n                            </Col>\n                          </Row>\n                          <Row gutter={25}>\n                            {contactPersons.map(item => (\n                              <Col key={item.id} sm={24} md={12} lg={8} style={{ marginTop: 20 }}>\n                                <Card style={{ border: '1px solid #ddd' }}>\n                                  <Typography.Paragraph>{item.name}</Typography.Paragraph>\n                                  <Typography.Paragraph>{item.email}</Typography.Paragraph>\n                                  <Typography.Paragraph>{item.phone}</Typography.Paragraph>\n                                  <Typography.Paragraph>{item.fax}</Typography.Paragraph>\n                                  <Typography.Paragraph>\n                                    {\n                                      <Badge\n                                        color={item.status ? 'cyan' : 'orange'}\n                                        count={item.status ? 'Active' : 'Inactive'}\n                                      />\n                                    }\n                                  </Typography.Paragraph>\n                                </Card>\n                              </Col>\n                            ))}\n                          </Row>\n                        </>\n                      )}\n                    </div>\n                  </Col>\n                </Row>\n              </Cards>\n            </Col>\n          </Row>\n          <Row style={{ marginTop: 20 }}>\n            <Col span={24}>\n              <div className=\"steps-action\" style={{ float: 'right' }}>\n                <Link to=\"/admin/customers/list\">\n                  <Button\n                    type=\"light\"\n                    style={{\n                      margin: '0 8px',\n                    }}\n                  >\n                    Cancel\n                  </Button>\n                </Link>\n                {current > 0 && (\n                  <Button\n                    type=\"light\"\n                    style={{\n                      margin: '0 8px',\n                    }}\n                    onClick={() => prev()}\n                  >\n                    Previous\n                  </Button>\n                )}\n                {current < steps.length - 1 && (\n                  <Button\n                    style={{\n                      margin: '0 8px',\n                    }}\n                    type=\"primary\"\n                    onClick={() => next()}\n                  >\n                    Next\n                  </Button>\n                )}\n                {current === steps.length - 1 && (\n                  <Button\n                    disabled={isLoading}\n                    raised\n                    htmlType=\"submit\"\n                    style={{\n                      margin: '0 8px',\n                    }}\n                    type=\"primary\"\n                  >\n                    {isLoading ? 'processing...' : 'Create Customer'}\n                  </Button>\n                )}\n              </div>\n            </Col>\n          </Row>\n        </Form>\n        <Modal\n          title={`${personType} Person`}\n          style={{ top: 20 }}\n          width={600}\n          open={personModalOpen}\n          onOk={handleContactPerson}\n          onCancel={() => setPersonModalOpen(false)}\n          okText=\"Save\"\n        >\n          <Form\n            preserve={false}\n            style={{ width: '100%' }}\n            form={personForm}\n            name=\"personForm\"\n            layout=\"horizontal\"\n            size=\"small\"\n          >\n            <Form.Item\n              {...formItemLayout}\n              rules={[{ required: true, message: 'Please Enter Name' }]}\n              name=\"name\"\n              label=\"Name\"\n            >\n              <Input placeholder=\"Name\" />\n            </Form.Item>\n            <Form.Item\n              {...formItemLayout}\n              rules={[{ required: true, message: 'Please Enter Email' }]}\n              name=\"email\"\n              label=\"Email\"\n            >\n              <Input placeholder=\"Email\" />\n            </Form.Item>\n            <Form.Item\n              rules={[{ required: true, message: 'Please Enter Phone' }]}\n              {...formItemLayout}\n              name=\"phone\"\n              label=\"Phone\"\n            >\n              <Input placeholder=\"Phone\" />\n            </Form.Item>\n            <Form.Item {...formItemLayout} name=\"fax\" label=\"Fax\">\n              <Input placeholder=\"Fax\" />\n            </Form.Item>\n            <Form.Item {...formItemLayout} name=\"status\" label=\"Status\" initialValue={personCheckBox}>\n              <Switch checked={personCheckBox} />\n            </Form.Item>\n          </Form>\n        </Modal>\n      </Main>\n    </>\n  );\n};\n\nexport default AddUser;","import { gql } from '@apollo/client';\n\nexport const customerQuery = {\n  GET_ALL_CUSTOMER: gql`\n    query {\n      getAllCustomer {\n        status\n        message\n        data {\n          id\n          first_name\n          last_name\n          email\n          email_verified\n          user_status\n          image\n          addresses {\n            id\n            address1\n            address2\n            phone\n            fax\n            email\n            city\n            state\n            zip_code\n            country\n            type\n            status\n            updatedAt\n            createdAt\n          }\n        }\n      }\n    }\n  `,\n  GET_RATING_BY_USER_ID: gql`\n    query getRatingsByUserID($query: GetRatingsByUserInput) {\n      getRatingsByUserID(query: $query) {\n        message\n        status\n        data {\n          id\n          rating_description\n          rating\n          createdAt\n          updatedAt\n          product {\n            id\n            prod_name\n            prod_slug\n            prod_short_desc\n            prod_thumbnail\n            prod_sku\n            prod_regular_price\n            prod_sale_price\n            prod_status\n          }\n        }\n      }\n    }\n  `,\n};\n\nexport const customerMutation = {\n  ADD_CUSTOMER: gql`\n    mutation addCustomer($data: CustomerInput) {\n      addCustomer(data: $data) {\n        message\n        status\n        id\n      }\n    }\n  `,\n  ADD_CUSTOMER_BILLING_ADDRESS: gql`\n    mutation addCustomerBillingAddress($data: AddCustomerBillingAddressInput) {\n      addCustomerBillingAddress(data: $data) {\n        message\n        status\n      }\n    }\n  `,\n  ADD_CUSTOMER_SHIPPING_ADDRESS: gql`\n    mutation addCustomerShippingAddress($data: AddCustomerShippingAddressInput) {\n      addCustomerShippingAddress(data: $data) {\n        message\n        status\n      }\n    }\n  `,\n  UPDATE_CUSTOMER: gql`\n    mutation updateCustomer($data: UpdateCustomerInput) {\n      updateCustomer(data: $data) {\n        message\n        status\n      }\n    }\n  `,\n  UPDATE_CUSTOMER_ADDRESSES: gql`\n    mutation updateCustomerAddress($data: UpdateCustomerAddressInput) {\n      updateCustomerAddress(data: $data) {\n        message\n        status\n        tenant_id\n      }\n    }\n  `,\n};\n"],"sourceRoot":""}