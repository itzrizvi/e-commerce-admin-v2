{"version":3,"sources":["container/customers/BillingAdderess.js","container/customers/ShippingAddress.js","container/customers/EditUser.js","apollo/customer/index.js"],"names":["BillingAdderess","defaultBilling","initialData","billingAddress","setBillingAddress","setDefaultBilling","useState","countries","setCountries","data","loading","newInitialData","setNewInitialData","useEffect","apolloClient","query","addressSchema","GET_COUNTRY_LIST","context","headers","TENANTID","process","then","res","getCountryList","status","GET_STATE_LISTS","variables","code","getStateList","states","map","item","filter","a","country_code","countryCode","finally","prev","column","title","dataIndex","key","render","_","record","onSelect","country","id","style","width","placeholder","defaultValue","options","label","name","value","text","type","onChange","e","address1","target","address2","city","state","abbreviation","val","zip_code","align","defaultChecked","checked","className","columns","pagination","rowKey","size","dataSource","display","justifyContent","marginTop","marginBottom","disabled","htmlType","onClick","prevState","Date","getTime","marginRight","icon","ShippingAddress","defaultShipping","shippingAddress","setShippingAddress","setDefaultShipping","i","formItemLayout","labelCol","span","wrapperCol","EditUser","viewPermission","history","useHistory","params","useParams","token","useSelector","auth","userStatus","setUserStatus","operation","setOperation","isError","setIsError","isLoading","setIsLoading","useForm","form","personForm","singleUser","setSingleUser","isDefault","isNew","contactPersons","setContactPersons","personModalOpen","setPersonModalOpen","personType","setPersonType","personCheckBox","setPersonCheckBox","selectedPersonID","setSelectedPersonID","message","setMessage","customerQuery","GET_SINGLE_CUSTOMER","customer_id","parseInt","Authorization","fetchPolicy","getSingleCustomer","shipping","billing","contact_person","user_status","setFieldsValue","first_name","last_name","email","addresses","forEach","address","__typename","createdAt","updatedAt","rest","push","person","catch","err","console","log","newBillingAddress","parent_id","newShippingAddress","mutate","mutation","contactPersonsSchema","UPDATE_CONTACT_PERSON","ref_id","contact_persons","phone","fax","updateContactPerson","createContactPerson","customerMutation","UPDATE_CUSTOMER_ADDRESSES","updateCustomerAddress","setTimeout","handleContactPerson","validateFields","values","getFieldsValue","resetFields","justify","margin","padding","showIcon","closable","gutter","sm","xs","headless","div","onFinish","notValidate","find","notValidate1","send_mail","UPDATE_CUSTOMER","refetchQueries","GET_ALL_CUSTOMER","updateCustomer","onFinishFailed","errorInfo","TabPane","tab","Item","rules","required","max","initialValue","company_name","float","md","lg","position","right","zIndex","handleEditPerson","border","Paragraph","color","count","raised","to","marginLeft","top","open","onOk","onCancel","okText","preserve","layout","gql","GET_RATING_BY_USER_ID","ADD_CUSTOMER","ADD_CUSTOMER_BILLING_ADDRESS","ADD_CUSTOMER_SHIPPING_ADDRESS"],"mappings":"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","file":"static/js/30.13808ecb.chunk.js","sourcesContent":["import { Button, Checkbox, Input, Select, Switch, Table } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport FeatherIcon from 'feather-icons-react';\nimport { addressSchema } from '../../apollo/address';\nimport apolloClient from '../../utility/apollo';\n\nconst BillingAdderess = ({ defaultBilling, initialData, billingAddress, setBillingAddress, setDefaultBilling }) => {\n  // Change State After Country Change\n  const [countries, setCountries] = useState([]);\n  const [newInitialData, setNewInitialData] = useState({ data: [], loading: true });\n\n  useEffect(() => {\n    // Get Country List\n    apolloClient\n      .query({\n        query: addressSchema.GET_COUNTRY_LIST,\n        context: {\n          headers: { TENANTID: process.env.REACT_APP_TENANTID },\n        },\n      })\n      .then(res => {\n        const data = res.data.getCountryList;\n        if (!data.status) return true;\n        setCountries(data?.data);\n      });\n\n    // Get State List\n    apolloClient\n      .query({\n        query: addressSchema.GET_STATE_LISTS,\n        variables: {\n          query: {\n            code: '',\n          },\n        },\n        context: {\n          headers: {\n            TENANTID: process.env.REACT_APP_TENANTID,\n          },\n        },\n      })\n      .then(res => {\n        const data = res?.data?.getStateList;\n        if (!data?.status) return;\n        setNewInitialData({ data: { ...initialData, states: data?.data }, loading: false });\n        setBillingAddress(\n          billingAddress.map(item => {\n            return { ...item, states: data?.data?.filter(a => a.country_code === item.countryCode.code) };\n          }),\n        );\n      })\n      .finally(() => {\n        setNewInitialData(prev => ({ ...prev, loading: false }));\n      });\n  }, []);\n\n  const column = [\n    {\n      title: 'Country',\n      dataIndex: ['countryCode', 'name'],\n      key: 'name',\n      render: (_, record) => (\n        <Select\n          onSelect={country => {\n            setBillingAddress(\n              billingAddress.map(item => {\n                if (item.id === record.id) {\n                  return { ...item, country, states: newInitialData.data.states.filter(a => a.country_code === country) };\n                }\n                return item;\n              }),\n            );\n          }}\n          style={{ width: '100%' }}\n          placeholder=\"Country\"\n          defaultValue={record?.countryCode?.code}\n          options={countries?.map(item => ({\n            label: item?.name,\n            value: item?.code,\n          }))}\n        />\n      ),\n    },\n    {\n      title: 'Address 1',\n      dataIndex: 'address1',\n      key: 'address1',\n      width: 200,\n      render: (text, record) => (\n        <Input\n          defaultValue={text}\n          type=\"text\"\n          placeholder=\"Address 1\"\n          onChange={e => (record.address1 = e.target.value)}\n        />\n      ),\n    },\n    {\n      title: 'Address 2',\n      dataIndex: 'address2',\n      key: 'address2',\n      width: 200,\n      render: (text, record) => (\n        <Input\n          defaultValue={text}\n          type=\"text\"\n          placeholder=\"Address 2\"\n          onChange={e => (record.address2 = e.target.value)}\n        />\n      ),\n    },\n    {\n      title: 'City',\n      dataIndex: 'city',\n      key: 'city',\n      render: (text, record) => (\n        <Input defaultValue={text} type=\"text\" placeholder=\"City\" onChange={e => (record.city = e.target.value)} />\n      ),\n    },\n    {\n      title: 'State',\n      dataIndex: 'states',\n      key: 'states',\n      width: 150,\n      render: (states, record) => (\n        <Select\n          style={{ width: '100%' }}\n          placeholder=\"State\"\n          options={states?.map(item => ({\n            label: item.state,\n            value: item.abbreviation,\n          }))}\n          onSelect={val => (record.state = val)}\n          defaultValue={record.state}\n        />\n      ),\n    },\n    {\n      title: 'Zip Code',\n      dataIndex: 'zip_code',\n      key: 'zip_code',\n      render: (text, record) => (\n        <Input\n          defaultValue={text}\n          type=\"text\"\n          placeholder=\"Zip Code\"\n          onChange={e => (record.zip_code = e.target.value)}\n        />\n      ),\n    },\n    {\n      title: 'Status',\n      dataIndex: 'status',\n      key: 'status',\n      align: 'right',\n      // width: 90,\n      render: (text, record) => (\n        <Switch defaultChecked={text} title=\"Status\" onChange={checked => (record.status = checked)} />\n      ),\n    },\n    {\n      title: 'Default',\n      dataIndex: 'isDefault',\n      key: 'isDefault',\n      align: 'right',\n      // width: 90,\n      render: (val, record) => (\n        <Checkbox checked={defaultBilling === record.id ? true : false} onChange={e => setDefaultBilling(record.id)} />\n      ),\n    },\n    // {\n    //   title: 'Action',\n    //   dataIndex: 'action',\n    //   key: 'action',\n    //   render: (text, record) => (\n    //     <Button size=\"\" title=\"Remove\" type=\"danger\" onClick={() => removeRow(record.id)}>\n    //       <FeatherIcon icon=\"trash-2\" />\n    //     </Button>\n    //   ),\n    // },\n  ];\n\n  // Adding new row on table\n  const addNewRow = () => {\n    setBillingAddress(prevState => {\n      return [...prevState, { ...newInitialData.data, id: new Date().getTime() }];\n    });\n  };\n\n  const removeRow = id => {\n    setBillingAddress(prevState => {\n      return prevState.filter(item => item.id !== id);\n    });\n  };\n\n  return (\n    <div>\n      <Table\n        loading={newInitialData?.loading}\n        className=\"table-responsive\"\n        columns={column}\n        pagination={false}\n        rowKey={'id'}\n        size=\"small\"\n        dataSource={billingAddress}\n      />\n      <div style={{ display: 'flex', justifyContent: 'flex-end', marginTop: '10px', marginBottom: '10px' }}>\n        <Button\n          disabled={newInitialData?.loading}\n          title=\"Add Address\"\n          htmlType=\"button\"\n          type=\"primary\"\n          onClick={addNewRow}\n          style={{ marginRight: '.5em' }}\n        >\n          <FeatherIcon icon=\"plus\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default BillingAdderess;\n","import { Button, Checkbox, Input, Select, Switch, Table } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport FeatherIcon from 'feather-icons-react';\nimport { addressSchema } from '../../apollo/address';\nimport apolloClient from '../../utility/apollo';\n\nconst ShippingAddress = ({ defaultShipping, initialData, shippingAddress, setShippingAddress, setDefaultShipping }) => {\n  // Change State After Country Change\n  const [countries, setCountries] = useState([]);\n  const [newInitialData, setNewInitialData] = useState({ data: [], loading: true });\n\n  useEffect(() => {\n    // Get Country List\n    apolloClient\n      .query({\n        query: addressSchema.GET_COUNTRY_LIST,\n        context: {\n          headers: { TENANTID: process.env.REACT_APP_TENANTID },\n        },\n      })\n      .then(res => {\n        const data = res.data.getCountryList;\n        if (!data.status) return true;\n        setCountries(data?.data);\n      });\n\n    // Get State List\n    apolloClient\n      .query({\n        query: addressSchema.GET_STATE_LISTS,\n        variables: {\n          query: {\n            code: '',\n          },\n        },\n        context: {\n          headers: {\n            TENANTID: process.env.REACT_APP_TENANTID,\n          },\n        },\n      })\n      .then(res => {\n        const data = res?.data?.getStateList;\n        if (!data?.status) return;\n        setNewInitialData({ data: { ...initialData, states: data?.data }, loading: false });\n        setShippingAddress(\n          shippingAddress.map(item => {\n            return { ...item, states: data?.data?.filter(a => a.country_code === item.countryCode.code) };\n          }),\n        );\n      })\n      .finally(() => {\n        setNewInitialData(prev => ({ ...prev, loading: false }));\n      });\n  }, []);\n  const column = [\n    {\n      title: 'Country',\n      dataIndex: ['countryCode', 'name'],\n      key: 'name',\n      render: (_, record) => (\n        <Select\n          onSelect={country => {\n            setShippingAddress(\n              shippingAddress.map(item => {\n                if (item.id === record.id) {\n                  return { ...item, country, states: newInitialData.data.states.filter(a => a.country_code === country) };\n                }\n                return item;\n              }),\n            );\n          }}\n          style={{ width: '100%' }}\n          placeholder=\"Country\"\n          defaultValue={record?.countryCode?.code}\n          options={countries?.map(item => ({\n            label: item?.name,\n            value: item?.code,\n          }))}\n        />\n      ),\n    },\n    {\n      title: 'Address 1',\n      dataIndex: 'address1',\n      key: 'address1',\n      width: 200,\n      render: (text, record) => (\n        <Input\n          defaultValue={text}\n          type=\"text\"\n          placeholder=\"Address 1\"\n          onChange={e => (record.address1 = e.target.value)}\n        />\n      ),\n    },\n    {\n      title: 'Address 2',\n      dataIndex: 'address2',\n      key: 'address2',\n      width: 200,\n      render: (text, record) => (\n        <Input\n          defaultValue={text}\n          type=\"text\"\n          placeholder=\"Address 2\"\n          onChange={e => (record.address2 = e.target.value)}\n        />\n      ),\n    },\n    {\n      title: 'City',\n      dataIndex: 'city',\n      key: 'city',\n      render: (text, record) => (\n        <Input defaultValue={text} type=\"text\" placeholder=\"City\" onChange={e => (record.city = e.target.value)} />\n      ),\n    },\n    {\n      title: 'State',\n      dataIndex: 'states',\n      key: 'states',\n      width: 150,\n      render: (states, record) => (\n        <Select\n          style={{ width: '100%' }}\n          placeholder=\"State\"\n          options={states?.map(item => ({\n            label: item.state,\n            value: item.abbreviation,\n          }))}\n          onSelect={val => (record.state = val)}\n          defaultValue = {record.state}\n        />\n      ),\n    },\n    {\n      title: 'Zip Code',\n      dataIndex: 'zip_code',\n      key: 'zip_code',\n      render: (text, record) => (\n        <Input\n          defaultValue={text}\n          type=\"text\"\n          placeholder=\"Zip Code\"\n          onChange={e => (record.zip_code = e.target.value)}\n        />\n      ),\n    },\n    {\n      title: 'Status',\n      dataIndex: 'status',\n      key: 'status',\n      align: 'right',\n      // width: 90,\n      render: (text, record) => (\n        <Switch defaultChecked={text} title=\"Status\" onChange={checked => (record.status = checked)} />\n      ),\n    },\n    {\n      title: 'Default',\n      dataIndex: 'isDefault',\n      key: 'isDefault',\n      align: 'right',\n      // width: 90,\n      render: (val, record) => (\n        <Checkbox\n          name=\"isDefault\"\n          checked={defaultShipping === record.id ? true : false}\n          onChange={e => setDefaultShipping(record.id)}\n        />\n      ),\n    },\n    // {\n    //   title: 'Action',\n    //   dataIndex: 'action',\n    //   key: 'action',\n    //   render: (text, record) => (\n    //     <Button size=\"\" title=\"Remove\" type=\"danger\" onClick={() => removeRow(record.id)}>\n    //       <FeatherIcon icon=\"trash-2\" />\n    //     </Button>\n    //   ),\n    // },\n  ];\n\n  // Adding new row on table\n  const addNewRow = () => {\n    setShippingAddress(prevState => {\n      return [...prevState, { ...newInitialData.data, id: new Date().getTime() }];\n    });\n  };\n\n  const removeRow = id => {\n    setShippingAddress(prevState => {\n      return prevState.filter(item => item.id !== id);\n    });\n  };\n\n  return (\n    <div>\n      <Table\n        className=\"table-responsive\"\n        columns={column}\n        pagination={false}\n        rowKey={'id'}\n        size=\"small\"\n        loading={newInitialData?.loading}\n        dataSource={shippingAddress}\n      />\n      <div style={{ display: 'flex', justifyContent: 'flex-end', marginTop: '10px', marginBottom: '10px' }}>\n        <Button\n          disabled={newInitialData?.loading}\n          title=\"Add Address\"\n          htmlType=\"button\"\n          type=\"primary\"\n          onClick={addNewRow}\n          style={{ marginRight: '.5em' }}\n        >\n          <FeatherIcon icon=\"plus\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default ShippingAddress;\n","import React, { useEffect, useState } from 'react';\nimport { Row, Col, Form, Input, Switch, Tabs, Spin, Modal, Alert, Card, Typography, Badge } from 'antd';\nimport { PageHeader } from '../../components/page-headers/page-headers';\nimport { Main } from '../styled';\nimport { Cards } from '../../components/cards/frame/cards-frame';\nimport { Link, useHistory, useParams } from 'react-router-dom';\nimport apolloClient, { customerQuery } from '../../utility/apollo';\nimport { viewPermission } from '../../utility/utility';\nimport BillingAdderess from './BillingAdderess';\nimport ShippingAddress from './ShippingAddress';\nimport { Button } from '../../components/buttons/buttons';\nimport { useSelector } from 'react-redux';\nimport { customerMutation } from '../../apollo/customer';\nimport { contactPersonsSchema } from '../../apollo/contactPerson';\nimport FeatherIcon from 'feather-icons-react';\n\nconst formItemLayout = {\n  labelCol: {\n    span: 4,\n  },\n  wrapperCol: {\n    span: 18,\n  },\n};\n\nconst EditUser = () => {\n  viewPermission('customer');\n  const history = useHistory();\n  const params = useParams();\n  const token = useSelector(state => state.auth.token);\n  const maxLength = 30;\n  const [userStatus, setUserStatus] = useState(true);\n  const [defaultBilling, setDefaultBilling] = useState(null);\n  const [defaultShipping, setDefaultShipping] = useState(null);\n  const [operation, setOperation] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [form] = Form.useForm();\n  const [personForm] = Form.useForm();\n\n  const [singleUser, setSingleUser] = useState({ data: null, isLoading: true });\n  const initialData = {\n    address1: null,\n    address2: null,\n    city: null,\n    state: null,\n    zip_code: null,\n    country: null,\n    isDefault: false,\n    isNew: true,\n  };\n  const [shippingAddress, setShippingAddress] = useState([]);\n  const [billingAddress, setBillingAddress] = useState([]);\n  const [contactPersons, setContactPersons] = useState([]);\n  const [personModalOpen, setPersonModalOpen] = useState(false);\n  const [personType, setPersonType] = useState('Add');\n  const [personCheckBox, setPersonCheckBox] = useState(true);\n  const [selectedPersonID, setSelectedPersonID] = useState(null);\n  // Message\n  const [message, setMessage] = useState(null);\n\n  useEffect(() => {\n    if (!params?.id) return;\n    // load single customer\n    apolloClient\n      .query({\n        query: customerQuery.GET_SINGLE_CUSTOMER,\n        variables: { customer_id: parseInt(params?.id) },\n        context: {\n          headers: {\n            TENANTID: process.env.REACT_APP_TENANTID,\n            Authorization: token,\n          },\n        },\n        fetchPolicy: 'network-only',\n      })\n      .then(res => {\n        const data = res?.data?.getSingleCustomer;\n        if (!data?.status) return;\n        const shipping = [];\n        const billing = [];\n        const contact_person = [];\n        setSingleUser({ data: data?.data, isLoading: false });\n        setUserStatus(data?.data?.user_status);\n        form.setFieldsValue({\n          first_name: data?.data?.first_name,\n          last_name: data?.data?.last_name,\n          email: data?.data?.email,\n        });\n        data?.data?.addresses?.forEach(address => {\n          const { __typename, type, createdAt, updatedAt, ...rest } = address;\n          if (address.type === 'shipping') {\n            if (address.isDefault) setDefaultShipping(address.id);\n            shipping.push({ ...rest, isNew: false });\n          }\n          if (address.type === 'billing') {\n            if (address.isDefault) setDefaultBilling(address.id);\n            billing.push({ ...rest, isNew: false });\n          }\n        });\n        data?.data?.contactPersons.forEach(person => {\n          contact_person.push({ ...person, isNew: false });\n        });\n        setContactPersons(contact_person);\n        setShippingAddress(shipping);\n        setBillingAddress(billing);\n      })\n      .catch(err => {\n        console.log('🚀 ~ file: AddAdmin.js ~ line 85 ~ useEffect ~ err', err);\n      });\n  }, [params?.id]);\n\n  const handleSubmit = values => {\n    // validate billingAddresses.\n    const notValidate = billingAddress.find(item => {\n      const { id, address1, country, city, state, zip_code, address2 } = item;\n      const checkFalse = !(id && address1 && country && city && state && zip_code && address2);\n      return checkFalse;\n    });\n    if (notValidate?.id) return setMessage({ type: 'warning', message: 'Enter Billing Address Correctly!' });\n\n    // validate shippingAddresses.\n    const notValidate1 = shippingAddress.find(item => {\n      const { id, address1, country, city, state, zip_code, address2 } = item;\n      const checkFalse = !(id && address1 && country && city && state && zip_code && address2);\n      return checkFalse;\n    });\n    if (notValidate1?.id) return setMessage({ type: 'warning', message: 'Enter Shipping Address Correctly!' });\n    const variables = {\n      data: { ...values, user_status: userStatus, send_mail: true, id: parseInt(params?.id) },\n    };\n    apolloClient\n      .mutate({\n        mutation: customerMutation.UPDATE_CUSTOMER,\n        variables,\n        context: {\n          headers: {\n            TENANTID: process.env.REACT_APP_TENANTID,\n            Authorization: token,\n          },\n        },\n        refetchQueries: [\n          {\n            query: customerQuery.GET_ALL_CUSTOMER,\n            context: {\n              headers: {\n                TENANTID: process.env.REACT_APP_TENANTID,\n                Authorization: token,\n              },\n            },\n            fetchPolicy: 'no-cache',\n          },\n          ['getAllCustomer'],\n        ],\n      })\n      .then(res => {\n        const data = res?.data?.updateCustomer;\n        if (!data.status) return setMessage({ type: 'error', message: data.message });\n        setOperation(true);\n      })\n      .catch(err => {\n        console.log('error on adding customer', err);\n        setIsError(true);\n      })\n      .finally(() => setIsLoading(false));\n  };\n\n  useEffect(() => {\n    if (operation && params?.id) {\n      const newBillingAddress = billingAddress.map(item => {\n        const { parent_id, isNew, id, isDefault, countryCode, states, ...rest } = item;\n        return {\n          isDefault: defaultBilling === id,\n          parent_id: parseInt(params?.id),\n          ...(isNew ? { isNew } : { isNew: false }),\n          ...rest,\n          ...(!isNew && { id }),\n        };\n      });\n      const newShippingAddress = shippingAddress.map(item => {\n        const { parent_id, isNew, isDefault, id, countryCode, states, ...rest } = item;\n        return {\n          isDefault: defaultShipping === id,\n          parent_id: parseInt(params?.id),\n          ...(isNew ? { isNew } : { isNew: false }),\n          ...rest,\n          ...(!isNew && { id }),\n        };\n      });\n\n      ['person', 'billing', 'shipping'].forEach(type => {\n        if (type === 'person') {\n          apolloClient\n            .mutate({\n              mutation: contactPersonsSchema.UPDATE_CONTACT_PERSON,\n              variables: {\n                data: {\n                  ref_id: parseInt(params?.id),\n                  type: 'customer',\n                  contact_persons: contactPersons.map(item => ({\n                    ...(!item.isNew && { id: item.id }),\n                    name: item.name,\n                    email: item.email,\n                    phone: item.phone,\n                    fax: item.fax,\n                    status: item.status,\n                    isNew: item.isNew,\n                  })),\n                },\n              },\n              context: {\n                headers: {\n                  TENANTID: process.env.REACT_APP_TENANTID,\n                  Authorization: token,\n                },\n              },\n            })\n            .then(res => {\n              const data = !params?.id ? res?.data?.createContactPerson : res?.data?.updateContactPerson;\n              if (!data?.status) return setIsError(true);\n            })\n            .catch(err => {\n              setIsError(true);\n            });\n        } else {\n          setIsLoading(true);\n          apolloClient\n            .mutate({\n              mutation: customerMutation.UPDATE_CUSTOMER_ADDRESSES,\n              variables: {\n                data: {\n                  ref_id: parseInt(params?.id),\n                  type,\n                  addresses: [...(type === 'billing' ? newBillingAddress : newShippingAddress)],\n                },\n              },\n              context: {\n                headers: {\n                  TENANTID: process.env.REACT_APP_TENANTID,\n                  Authorization: token,\n                },\n              },\n            })\n            .then(res => {\n              const data = res?.data?.updateCustomerAddress;\n              if (!data?.status) return;\n            })\n            .catch(err => {\n              setIsError(true);\n            })\n            .finally(res => {\n              setIsLoading(false);\n              if (type === 'shipping') {\n                if (!isError) {\n                  setMessage({ type: 'success', message: 'Customer Updated Successfully.' });\n                  setTimeout(() => {\n                    history.push('/admin/customers/list');\n                  }, [2000]);\n                }\n              }\n            });\n        }\n      });\n    }\n  }, [operation, params?.id]);\n\n  const handleContactPerson = async () => {\n    await personForm.validateFields(['email', 'name', 'phone']);\n    const values = personForm.getFieldsValue();\n    if (!selectedPersonID) {\n      setContactPersons(prev => [...prev, { ...values, id: new Date().getTime(), isNew: true }]);\n    } else {\n      setContactPersons(prev =>\n        prev.map(item => {\n          if (item.id === selectedPersonID) {\n            return { ...values, id: selectedPersonID, isNew: false };\n          }\n          return item;\n        }),\n      );\n    }\n\n    setPersonModalOpen(false);\n    personForm.resetFields();\n  };\n\n  const handleAddPerson = () => {\n    personForm.setFieldsValue({\n      name: '',\n      email: '',\n      status: true,\n      phone: '',\n      fax: '',\n    });\n    setPersonType('Add');\n    setPersonCheckBox(true);\n    setPersonModalOpen(true);\n  };\n\n  const handleEditPerson = id => {\n    setSelectedPersonID(id);\n    const person = contactPersons.filter(item => item.id === id);\n    if (person) {\n      personForm.setFieldsValue({\n        name: person[0].name,\n        email: person[0].email,\n        status: person[0].status,\n        phone: person[0].phone,\n        fax: person[0].fax,\n      });\n    }\n    setPersonType('Update');\n    setPersonCheckBox(person[0].status);\n    setPersonModalOpen(true);\n  };\n\n  // const handleRemovePerson = id => {\n  //   setContactPersons(prev => prev.filter(item => item.id !== id));\n  // };\n\n  return (\n    <>\n      <PageHeader\n        title={`Manage Customer | Edit Customer ${singleUser.isLoading ? '' : `(${singleUser?.data?.email})`}`}\n      />\n      <Main>\n        <Row align=\"middle\" justify=\"center\" style={{ margin: 0, padding: 0 }}>\n          {message && (\n            <Alert\n              style={{ width: '50%', marginBottom: 10 }}\n              message={message?.message}\n              type={message?.type}\n              showIcon\n              closable\n            />\n          )}\n        </Row>\n        <Row gutter={25}>\n          <Col sm={24} xs={24}>\n            <Cards headless>\n              {singleUser.isLoading ? (\n                <div div className=\"spin\">\n                  <Spin />\n                </div>\n              ) : (\n                <Form\n                  style={{ width: '100%' }}\n                  form={form}\n                  name=\"editUser\"\n                  onFinish={handleSubmit}\n                  onFinishFailed={errorInfo => console.log('form error info:\\n', errorInfo)}\n                  labelCol={{ span: 4 }}\n                >\n                  <Tabs>\n                    <Tabs.TabPane tab=\"Information\" key=\"information\">\n                      <Row gutter={25}>\n                        <Col span={10}>\n                          <Form.Item\n                            rules={[{ required: true, max: maxLength, message: 'Please Enter First Name' }]}\n                            name=\"first_name\"\n                            label=\"First Name\"\n                            labelCol={{ style: { width: \"40%\" } }}\n                            initialValue={singleUser?.data?.first_name}\n                          >\n                            <Row>\n                              <Col span={20}>\n                                <Input placeholder=\"Enter First Name\" defaultValue={singleUser?.data?.first_name} />\n                              </Col>\n                            </Row>\n\n                          </Form.Item>\n                        </Col>\n                      </Row>\n\n                      <Row gutter={25}>\n                        <Col span={10}>\n                          <Form.Item\n                            rules={[{ required: true, max: maxLength, message: 'Please Enter Last Name' }]}\n                            name=\"last_name\"\n                            label=\"Last Name\"\n                            labelCol={{ style: { width: \"40%\" } }}\n                            initialValue={singleUser?.data?.last_name}\n                          >\n                            <Row>\n                              <Col span={20}>\n                                <Input placeholder=\"Enter Last Name\" defaultValue={singleUser?.data?.last_name} />\n                              </Col>\n                            </Row>\n                          </Form.Item>\n                        </Col>\n                      </Row>\n\n                      <Row gutter={25}>\n                        <Col span={10}>\n                          <Form.Item\n                            label=\"Company Name\"\n                            name=\"company_name\"\n                            labelCol={{ style: { width: \"40%\" } }}>\n                            <Row>\n                              <Col span={20}>\n                                <Input type=\"text\" defaultValue={singleUser?.data?.company_name} placeholder=\"Enter Company Name\" />\n                              </Col>\n                            </Row>\n                          </Form.Item>\n                        </Col>\n                      </Row>\n\n                      <Row gutter={25}>\n                        <Col span={10}>\n                          <Form.Item\n                            label=\"Email\"\n                            labelCol={{ style: { width: \"40%\" } }}>\n                            <Row>\n                              <Col span={20}>\n                                <Input type=\"email\" disabled defaultValue={singleUser?.data?.email} />\n                              </Col>\n                            </Row>\n                          </Form.Item>\n                        </Col>\n                      </Row>\n\n                      <Row gutter={25}>\n                        <Col span={10}>\n                          <Form.Item\n                            label=\"Phone\"\n                            name=\"phone\"\n                            labelCol={{ style: { width: \"40%\" } }}>\n                            <Row>\n                              <Col span={20}>\n                                <Input type=\"text\" defaultValue={singleUser?.data?.phone} placeholder=\"Enter Phone Number\" />\n                              </Col>\n                            </Row>\n                          </Form.Item>\n                        </Col>\n                      </Row>\n\n                      <Row gutter={25}>\n                        <Col span={10}>\n                          <Form.Item\n                            label=\"Fax\"\n                            name=\"fax\"\n                            labelCol={{ style: { width: \"40%\" } }}>\n                            <Row>\n                              <Col span={20}>\n                                <Input type=\"text\" defaultValue={singleUser?.data?.fax} placeholder=\"Enter Fax Number\" />\n                              </Col>\n                            </Row>\n                          </Form.Item>\n                        </Col>\n                      </Row>\n\n                      <Form.Item label=\"User Status\">\n                        <Switch checked={userStatus} onChange={checked => setUserStatus(checked)} />\n                      </Form.Item>\n                    </Tabs.TabPane>\n                    <Tabs.TabPane tab=\"Shipping Address\" key=\"shipping_address\">\n                      <ShippingAddress\n                        {...{ initialData, shippingAddress, setShippingAddress, defaultShipping, setDefaultShipping }}\n                      />\n                    </Tabs.TabPane>\n                    <Tabs.TabPane tab=\"Billing Address\" key=\"billing_address\">\n                      <BillingAdderess\n                        {...{ initialData, billingAddress, setBillingAddress, defaultBilling, setDefaultBilling }}\n                      />\n                    </Tabs.TabPane>\n                    <Tabs.TabPane tab=\"Contact Person\" key=\"contact_person\">\n                      <Row gutter={25}>\n                        <Col span={24}>\n                          <Button\n                            size=\"small\"\n                            style={{ float: 'right', marginBottom: 20 }}\n                            title=\"Add Person\"\n                            htmlType=\"button\"\n                            type=\"primary\"\n                            onClick={handleAddPerson}\n                          >\n                            Add Person\n                          </Button>\n                        </Col>\n                      </Row>\n                      <Row gutter={25}>\n                        {contactPersons.map(item => (\n                          <Col key={item.id} sm={24} md={12} lg={8}>\n                            {params?.id && (\n                              <>\n                                <Button\n                                  size=\"small\"\n                                  style={{ position: 'absolute', right: 14, zIndex: 1000 }}\n                                  title=\"Edit Person\"\n                                  htmlType=\"button\"\n                                  type=\"info\"\n                                  onClick={() => handleEditPerson(item.id)}\n                                >\n                                  Edit\n                                </Button>\n                                {/* <Button\n                                  size=\"small\"\n                                  style={{ position: 'absolute', right: 14, top: 40, zIndex: 1000 }}\n                                  title=\"Remove Person\"\n                                  htmlType=\"button\"\n                                  type=\"danger\"\n                                  onClick={() => handleRemovePerson(item.id)}\n                                >\n                                  <FeatherIcon icon=\"trash-2\" />\n                                </Button> */}\n                              </>\n                            )}\n\n                            <Card style={{ border: '1px solid #ddd' }}>\n                              <Typography.Paragraph>{item.name}</Typography.Paragraph>\n                              <Typography.Paragraph>{item.email}</Typography.Paragraph>\n                              <Typography.Paragraph>{item.phone}</Typography.Paragraph>\n                              <Typography.Paragraph>{item.fax}</Typography.Paragraph>\n                              <Typography.Paragraph>\n                                {\n                                  <Badge\n                                    color={item.status ? 'cyan' : 'orange'}\n                                    count={item.status ? 'Active' : 'Inactive'}\n                                  />\n                                }\n                              </Typography.Paragraph>\n                            </Card>\n                          </Col>\n                        ))}\n                      </Row>\n                    </Tabs.TabPane>\n                  </Tabs>\n                  <div\n                    style={{\n                      display: 'flex',\n                      justifyContent: 'flex-end',\n                      marginTop: '3em',\n                    }}\n                  >\n                    <Form.Item>\n                      <Button loading={isLoading} size=\"default\" htmlType=\"submit\" type=\"primary\" raised>\n                        {isLoading ? 'Processing' : 'Update Customer'}\n                      </Button>\n                      <Link to=\"/admin/customers/list\">\n                        <Button style={{ marginLeft: 10 }} type=\"light\" size=\"default\">\n                          Cancel\n                        </Button>\n                      </Link>\n                    </Form.Item>\n                  </div>\n                </Form>\n              )}\n            </Cards>\n          </Col>\n        </Row>\n        <Modal\n          title={`${personType} Person`}\n          style={{ top: 20 }}\n          width={600}\n          open={personModalOpen}\n          onOk={handleContactPerson}\n          onCancel={() => setPersonModalOpen(false)}\n          okText=\"Save\"\n        >\n          <Form\n            preserve={false}\n            style={{ width: '100%' }}\n            form={personForm}\n            name=\"personForm\"\n            layout=\"horizontal\"\n            size=\"small\"\n          >\n            <Form.Item\n              {...formItemLayout}\n              rules={[{ required: true, message: 'Please Enter Name' }]}\n              name=\"name\"\n              label=\"Name\"\n            >\n              <Input placeholder=\"Name\" />\n            </Form.Item>\n            <Form.Item\n              {...formItemLayout}\n              rules={[{ required: true, message: 'Please Enter Email' }]}\n              name=\"email\"\n              label=\"Email\"\n            >\n              <Input placeholder=\"Email\" />\n            </Form.Item>\n            <Form.Item\n              rules={[{ required: true, message: 'Please Enter Phone' }]}\n              {...formItemLayout}\n              name=\"phone\"\n              label=\"Phone\"\n            >\n              <Input placeholder=\"Phone\" />\n            </Form.Item>\n            <Form.Item {...formItemLayout} name=\"fax\" label=\"Fax\">\n              <Input placeholder=\"Fax\" />\n            </Form.Item>\n            <Form.Item {...formItemLayout} name=\"status\" label=\"Status\" initialValue={personCheckBox}>\n              <Switch checked={personCheckBox} onChange={checked => setPersonCheckBox(checked)} />\n            </Form.Item>\n          </Form>\n        </Modal>\n      </Main>\n    </>\n  );\n};\n\nexport default EditUser;\n","import { gql } from '@apollo/client';\n\nexport const customerQuery = {\n  GET_ALL_CUSTOMER: gql`\n    query {\n      getAllCustomer {\n        status\n        message\n        data {\n          id\n          first_name\n          last_name\n          email\n          email_verified\n          user_status\n          image\n          addresses {\n            id\n            address1\n            address2\n            phone\n            fax\n            email\n            city\n            state\n            zip_code\n            country\n            type\n            status\n            updatedAt\n            createdAt\n          }\n        }\n      }\n    }\n  `,\n  GET_RATING_BY_USER_ID: gql`\n    query getRatingsByUserID($query: GetRatingsByUserInput) {\n      getRatingsByUserID(query: $query) {\n        message\n        status\n        data {\n          id\n          rating_description\n          rating\n          createdAt\n          updatedAt\n          product {\n            id\n            prod_name\n            prod_slug\n            prod_short_desc\n            prod_thumbnail\n            prod_sku\n            prod_regular_price\n            prod_sale_price\n            prod_status\n          }\n        }\n      }\n    }\n  `,\n};\n\nexport const customerMutation = {\n  ADD_CUSTOMER: gql`\n    mutation addCustomer($data: CustomerInput) {\n      addCustomer(data: $data) {\n        message\n        status\n        id\n      }\n    }\n  `,\n  ADD_CUSTOMER_BILLING_ADDRESS: gql`\n    mutation addCustomerBillingAddress($data: AddCustomerBillingAddressInput) {\n      addCustomerBillingAddress(data: $data) {\n        message\n        status\n      }\n    }\n  `,\n  ADD_CUSTOMER_SHIPPING_ADDRESS: gql`\n    mutation addCustomerShippingAddress($data: AddCustomerShippingAddressInput) {\n      addCustomerShippingAddress(data: $data) {\n        message\n        status\n      }\n    }\n  `,\n  UPDATE_CUSTOMER: gql`\n    mutation updateCustomer($data: UpdateCustomerInput) {\n      updateCustomer(data: $data) {\n        message\n        status\n      }\n    }\n  `,\n  UPDATE_CUSTOMER_ADDRESSES: gql`\n    mutation updateCustomerAddress($data: UpdateCustomerAddressInput) {\n      updateCustomerAddress(data: $data) {\n        message\n        status\n        tenant_id\n      }\n    }\n  `,\n};\n"],"sourceRoot":""}