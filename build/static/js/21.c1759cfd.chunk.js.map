{"version":3,"sources":["container/vendors/AddVendor.js","container/vendors/BillingAdderess.js","container/vendors/ShippingAddress.js"],"names":["i","TextArea","formItemLayout","labelCol","span","wrapperCol","AddVendor","viewPermission","history","useHistory","useState","status","setStatus","isLoading","setIsLoading","defaultBilling","setDefaultBilling","defaultShipping","setDefaultShipping","useForm","form","personForm","operation","setOperation","vendor_id","setVendorId","isError","setIsError","contactPersons","setContactPersons","personModalOpen","setPersonModalOpen","personType","setPersonType","token","useSelector","state","auth","personCheckBox","setPersonCheckBox","steps","title","percent","current","setCurrent","next","validateFields","notValidate","billingAddresses","find","item","id","address1","country","city","zip_code","address2","setMessage","type","message","notValidate1","shippingAddresses","items","map","key","initialAddressData","Date","getTime","parent_id","isDefault","isNew","setBillingAddresses","setShippingAddresses","useEffect","newBillingAddress","states","rest","newShippingAddress","forEach","apolloClient","mutate","mutation","contactPersonsSchema","ADD_CONTACT_PERSON","variables","data","ref_id","contact_persons","name","email","phone","fax","context","headers","TENANTID","process","Authorization","then","res","createContactPerson","catch","err","vendorMutation","UPDATE_VENDOR_ADDRESS","addresses","updateVendorAddress","finally","setTimeout","push","handleContactPerson","values","getFieldsValue","newData","prev","resetFields","align","justify","style","margin","padding","width","marginBottom","showIcon","closable","gutter","sm","xs","headless","onFinish","CREATE_VENDOR","refetchQueries","query","vendorQuery","GET_ALL_VENDOR","fetchPolicy","createVendor","console","log","onFinishFailed","errorInfo","responsive","size","marginTop","className","Item","rules","required","max","label","placeholder","rows","checked","onChange","float","htmlType","onClick","setFieldsValue","md","lg","border","Paragraph","color","count","to","length","disabled","raised","top","open","onOk","onCancel","okText","preserve","layout","initialValue","BillingAdderess","countries","setCountries","loading","newInitialData","setNewInitialData","addressSchema","GET_COUNTRY_LIST","getCountryList","GET_STATE_LISTS","code","getStateList","filter","a","country_code","countryCode","column","dataIndex","render","_","record","onSelect","defaultValue","options","value","text","e","target","abbreviation","val","defaultChecked","columns","pagination","rowKey","dataSource","display","justifyContent","prevState","marginRight","icon","ShippingAddress"],"mappings":"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","file":"static/js/21.c1759cfd.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Row, Col, Form, Input, Switch, Steps, Modal, Typography, Badge, Card, Alert } from 'antd';\nimport { PageHeader } from '../../components/page-headers/page-headers';\nimport { Main } from '../styled';\nimport { Cards } from '../../components/cards/frame/cards-frame';\nimport { Button } from '../../components/buttons/buttons';\nimport { Link, useHistory } from 'react-router-dom';\nimport apolloClient, { vendorMutation, vendorQuery } from '../../utility/apollo';\nimport { viewPermission } from '../../utility/utility';\nimport BillingAdderess from './BillingAdderess';\nimport ShippingAddress from './ShippingAddress';\nimport { useSelector } from 'react-redux';\nimport { contactPersonsSchema } from '../../apollo/contactPerson';\nconst { TextArea } = Input;\n\nconst formItemLayout = {\n  labelCol: {\n    span: 4,\n  },\n  wrapperCol: {\n    span: 18,\n  },\n};\n\nconst AddVendor = () => {\n  viewPermission('vendor');\n  const history = useHistory();\n  const [status, setStatus] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n  const [defaultBilling, setDefaultBilling] = useState(null);\n  const [defaultShipping, setDefaultShipping] = useState(null);\n  const [form] = Form.useForm();\n  const [personForm] = Form.useForm();\n  const maxLength = 30;\n  const [operation, setOperation] = useState(false);\n  const [vendor_id, setVendorId] = useState(null);\n  const [isError, setIsError] = useState(false);\n  const [contactPersons, setContactPersons] = useState([]);\n  const [personModalOpen, setPersonModalOpen] = useState(false);\n  const [personType, setPersonType] = useState('Add');\n  const token = useSelector(state => state.auth.token);\n  const [personCheckBox, setPersonCheckBox] = useState(true);\n\n  /* -------------------------- Step From Data Start -------------------------- */\n  const steps = [\n    {\n      title: 'General',\n      percent: 40,\n    },\n    {\n      title: 'Billing Address',\n      percent: 60,\n    },\n    {\n      title: 'Shipping Address',\n      percent: 80,\n    },\n    {\n      title: 'Contact Persons',\n      percent: 100,\n    },\n  ];\n\n  const [current, setCurrent] = useState(0);\n  const next = async () => {\n    try {\n      if (current === 0) {\n        await form.validateFields(['company_name', 'contact_person', 'email']);\n      } else if (current === 1) {\n        // validate billingAddresses.\n        const notValidate = billingAddresses.find(item => {\n          const { id, address1, country, city, state, zip_code, address2 } = item;\n          const checkFalse = !(id && address1 && country && city && state && zip_code && address2);\n          return checkFalse;\n        });\n        if (notValidate?.id) return setMessage({ type: 'warning', message: 'Enter Billing Address Correctly.' });\n      } else if (current === 2) {\n        // validate shippingAddresses.\n        const notValidate1 = shippingAddresses.find(item => {\n          const { id, address1, country, city, state, zip_code, address2 } = item;\n          const checkFalse = !(id && address1 && country && city && state && zip_code && address2);\n          return checkFalse;\n        });\n        if (notValidate1?.id) return setMessage({ type: 'warning', message: 'Enter Shipping Address Correctly.' });\n      } else if (current === 3) {\n      }\n      setCurrent(current + 1);\n    } catch {}\n  };\n  const prev = () => {\n    setCurrent(current - 1);\n  };\n  const items = steps.map(item => ({\n    key: item.title,\n    title: item.title,\n    percent: item.percent,\n  }));\n  /* ---------------------------- tep Form Data end --------------------------- */\n\n  // ============+ for billing START +====================\n  const initialAddressData = {\n    id: new Date().getTime(),\n    parent_id: '',\n    address1: '',\n    address2: '',\n    country: '',\n    city: '',\n    state: '',\n    zip_code: '',\n    status: true,\n    isDefault: false,\n    isNew: true,\n  };\n  const [billingAddresses, setBillingAddresses] = useState([]);\n  // ============+ for billing END +====================\n\n  const [shippingAddresses, setShippingAddresses] = useState([]);\n  // ============+ for billing END +====================\n\n  // Message\n  const [message, setMessage] = useState(null);\n\n  const handleSubmit = () => {\n    const values = form.getFieldsValue(true);\n    const variables = { ...values, status };\n    // ADD NEW Vendor\n    setIsLoading(true);\n    apolloClient\n      .mutate({\n        mutation: vendorMutation.CREATE_VENDOR,\n        variables: { data: variables },\n        context: {\n          headers: {\n            TENANTID: process.env.REACT_APP_TENANTID,\n            Authorization: token,\n          },\n        },\n        refetchQueries: [\n          {\n            query: vendorQuery.GET_ALL_VENDOR,\n            context: {\n              headers: {\n                TENANTID: process.env.REACT_APP_TENANTID,\n                Authorization: token,\n              },\n            },\n            fetchPolicy: 'network-only',\n          },\n          ['getAllVendor'],\n        ],\n      })\n      .then(res => {\n        const data = res?.data?.createVendor;\n        if (!data.status) return setMessage({ type: 'error', message: data.message });\n        setVendorId(data.id);\n        setOperation(true);\n      })\n      .catch(err => {\n        setIsLoading(false);\n        console.log('got error on add vendor', err);\n        setIsError(true);\n      });\n  };\n\n  useEffect(() => {\n    if (operation && vendor_id) {\n      const newBillingAddress = billingAddresses.map(item => {\n        const { parent_id, isNew, states, id, isDefault, ...rest } = item;\n        return {\n          isDefault: defaultBilling === id,\n          parent_id: vendor_id,\n          isNew,\n          ...rest,\n          ...(!isNew && { id }),\n        };\n      });\n      const newShippingAddress = shippingAddresses.map(item => {\n        const { parent_id, isNew, states, isDefault, id, ...rest } = item;\n        return {\n          isDefault: defaultShipping === id,\n          parent_id: vendor_id,\n          isNew,\n          ...rest,\n          ...(!isNew && { id }),\n        };\n      });\n\n      ['person', 'billing', 'shipping'].forEach(type => {\n        setIsLoading(true);\n        if (type === 'person') {\n          apolloClient\n            .mutate({\n              mutation: contactPersonsSchema.ADD_CONTACT_PERSON,\n              variables: {\n                data: {\n                  ref_id: vendor_id,\n                  type: 'vendor',\n                  contact_persons: [\n                    ...contactPersons.map(item => ({\n                      name: item.name,\n                      email: item.email,\n                      phone: item.phone,\n                      fax: item.fax,\n                      status: item.status,\n                    })),\n                  ],\n                },\n              },\n              context: {\n                headers: {\n                  TENANTID: process.env.REACT_APP_TENANTID,\n                  Authorization: token,\n                },\n              },\n            })\n            .then(res => {\n              const data = res?.data?.createContactPerson;\n              if (!data?.status) return setIsError(true);\n            })\n            .catch(err => {\n              setIsError(true);\n            });\n        } else {\n          apolloClient\n            .mutate({\n              mutation: vendorMutation.UPDATE_VENDOR_ADDRESS,\n              variables: {\n                data: {\n                  ref_id: vendor_id,\n                  type,\n                  addresses: [...(type === 'billing' ? newBillingAddress : newShippingAddress)],\n                },\n              },\n              context: {\n                headers: {\n                  TENANTID: process.env.REACT_APP_TENANTID,\n                  Authorization: token,\n                },\n              },\n            })\n            .then(res => {\n              const data = res?.data?.updateVendorAddress;\n              if (!data?.status) return setIsError(true);\n            })\n            .catch(err => {\n              setIsError(true);\n            })\n            .finally(res => {\n              setIsLoading(false);\n              if (type === 'shipping') {\n                if (!isError) {\n                  setMessage({ type: 'success', message: 'Vendor Added Successfully.' });\n                  setTimeout(() => {\n                    history.push('/admin/vendor/list');\n                  }, [2000]);\n                }\n              }\n            });\n        }\n      });\n    }\n  }, [operation, vendor_id]);\n\n  const handleContactPerson = async () => {\n    await personForm.validateFields(['email', 'name', 'phone']);\n    const values = personForm.getFieldsValue();\n    const newData = { ...values, id: new Date().getTime(), isNew: true };\n    setContactPersons(prev => [...prev, newData]);\n    setPersonModalOpen(false);\n    personForm.resetFields();\n  };\n\n  const handleAddPerson = () => {\n    personForm.setFieldsValue({\n      name: '',\n      email: '',\n      status: true,\n      phone: '',\n      fax: '',\n    });\n    setPersonType('Add');\n    setPersonCheckBox(true);\n    setPersonModalOpen(true);\n  };\n\n  return (\n    <>\n      <PageHeader title=\"Add Vendor\" />\n      <Main>\n        <Row align=\"middle\" justify=\"center\" style={{ margin: 0, padding: 0 }}>\n          {message && (\n            <Alert\n              style={{ width: '50%', marginBottom: 10 }}\n              message={message?.message}\n              type={message?.type}\n              showIcon\n              closable\n            />\n          )}\n        </Row>\n        <Row gutter={25}>\n          <Col sm={24} xs={24}>\n            <Cards headless>\n              <Form\n                style={{ width: '100%' }}\n                form={form}\n                name=\"addVendor\"\n                onFinish={handleSubmit}\n                onFinishFailed={errorInfo => console.log('form error info:\\n', errorInfo)}\n                labelCol={{ span: 4 }}\n              >\n                <Row style={{ marginBottom: 20 }}>\n                  <Steps\n                    current={current}\n                    items={items}\n                    percent={items[current].percent}\n                    responsive={true}\n                    size=\"small\"\n                  />\n                </Row>\n                <Row style={{ marginTop: 40 }}>\n                  <Col span={24}>\n                    <div className=\"steps-content\">\n                      {current === 0 && (\n                        <Row gutter={25}>\n                          <Col sm={24}>\n                            <Form.Item\n                              rules={[{ required: true, max: maxLength, message: 'Please enter Vendor Company Name' }]}\n                              name=\"company_name\"\n                              label=\"Company Name\"\n                            >\n                              <Input style={{ width: '50%' }} placeholder=\"Company Name\" />\n                            </Form.Item>\n\n                            <Form.Item\n                              rules={[\n                                { required: true, max: maxLength, message: 'Please enter Vendor Contact Person' },\n                              ]}\n                              label=\"Contact Person\"\n                              name=\"contact_person\"\n                            >\n                              <Input style={{ width: '50%' }} placeholder=\"Contact Person\" />\n                            </Form.Item>\n\n                            <Form.Item\n                              rules={[{ required: true, max: maxLength, message: 'Please enter Email' }]}\n                              name=\"email\"\n                              label=\"Email\"\n                            >\n                              <Input style={{ width: '50%' }} placeholder=\"Email\" type=\"email\" />\n                            </Form.Item>\n\n                            <Form.Item name=\"phone_number\" label=\"Phone\">\n                              <Input style={{ width: '50%' }} placeholder=\"Phone Number\" />\n                            </Form.Item>\n                            <Form.Item name=\"FAX_no\" label=\"Fax\">\n                              <Input style={{ width: '50%' }} placeholder=\"Fax\" />\n                            </Form.Item>\n                            <Form.Item name=\"EIN_no\" label=\"EIN\">\n                              <Input style={{ width: '50%' }} placeholder=\"EIN Number\" />\n                            </Form.Item>\n                            <Form.Item name=\"TAX_ID\" label=\"Tax Id\">\n                              <Input style={{ width: '50%' }} placeholder=\"Tax Id\" />\n                            </Form.Item>\n                            <Form.Item name=\"description\" label=\"Description\">\n                              <TextArea style={{ width: '60%' }} rows={4} placeholder=\"Description\" />\n                            </Form.Item>\n                            <Form.Item label=\"Status\">\n                              <Switch checked={status} onChange={checked => setStatus(checked)} />\n                            </Form.Item>\n                          </Col>\n                        </Row>\n                      )}\n                      {current === 1 && (\n                        <Row gutter={25}>\n                          <Col sm={24}>\n                            <BillingAdderess\n                              {...{\n                                defaultBilling,\n                                initialAddressData,\n                                billingAddresses,\n                                setBillingAddresses,\n                                setDefaultBilling,\n                              }}\n                            />\n                          </Col>\n                        </Row>\n                      )}\n                      {current === 2 && (\n                        <Row gutter={25}>\n                          <Col sm={24}>\n                            <ShippingAddress\n                              {...{\n                                defaultShipping,\n                                initialAddressData,\n                                shippingAddresses,\n                                setShippingAddresses,\n                                setDefaultShipping,\n                              }}\n                            />\n                          </Col>\n                        </Row>\n                      )}\n                      {current === 3 && (\n                        <>\n                          <Row gutter={25}>\n                            <Col span={24}>\n                              <Button\n                                size=\"small\"\n                                style={{ float: 'right', marginTop: -20 }}\n                                title=\"Add Person\"\n                                htmlType=\"button\"\n                                type=\"primary\"\n                                onClick={handleAddPerson}\n                              >\n                                Add Person\n                              </Button>\n                            </Col>\n                          </Row>\n                          <Row gutter={25}>\n                            {contactPersons.map(item => (\n                              <Col key={item.id} sm={24} md={12} lg={8} style={{marginTop: 20}}>\n                                <Card style={{ border: '1px solid #ddd' }}>\n                                  <Typography.Paragraph>{item.name}</Typography.Paragraph>\n                                  <Typography.Paragraph>{item.email}</Typography.Paragraph>\n                                  <Typography.Paragraph>{item.phone}</Typography.Paragraph>\n                                  <Typography.Paragraph>{item.fax}</Typography.Paragraph>\n                                  <Typography.Paragraph>\n                                    {\n                                      <Badge\n                                        color={item.status ? 'cyan' : 'orange'}\n                                        count={item.status ? 'Active' : 'Inactive'}\n                                      />\n                                    }\n                                  </Typography.Paragraph>\n                                </Card>\n                              </Col>\n                            ))}\n                          </Row>\n                        </>\n                      )}\n                    </div>\n                  </Col>\n                </Row>\n                <Row style={{ marginTop: 20 }}>\n                  <Col span={24}>\n                    <div className=\"steps-action\" style={{ float: 'right' }}>\n                      <Link to=\"/admin/vendor/list\">\n                        <Button\n                          type=\"light\"\n                          style={{\n                            margin: '0 8px',\n                          }}\n                        >\n                          Cancel\n                        </Button>\n                      </Link>\n                      {current > 0 && (\n                        <Button\n                          type=\"light\"\n                          style={{\n                            margin: '0 8px',\n                          }}\n                          onClick={() => prev()}\n                        >\n                          Previous\n                        </Button>\n                      )}\n                      {current < steps.length - 1 && (\n                        <Button\n                          style={{\n                            margin: '0 8px',\n                          }}\n                          type=\"primary\"\n                          onClick={() => next()}\n                        >\n                          Next\n                        </Button>\n                      )}\n                      {current === steps.length - 1 && (\n                        <Button\n                          disabled={isLoading}\n                          raised\n                          htmlType=\"submit\"\n                          style={{\n                            margin: '0 8px',\n                          }}\n                          type=\"primary\"\n                        >\n                          {isLoading ? 'processing...' : 'Create Vendor'}\n                        </Button>\n                      )}\n                    </div>\n                  </Col>\n                </Row>\n              </Form>\n            </Cards>\n          </Col>\n        </Row>\n        <Modal\n          title={`${personType} Person`}\n          style={{ top: 20 }}\n          width={600}\n          open={personModalOpen}\n          onOk={handleContactPerson}\n          onCancel={() => setPersonModalOpen(false)}\n          okText=\"Save\"\n        >\n          <Form\n            preserve={false}\n            style={{ width: '100%' }}\n            form={personForm}\n            name=\"personForm\"\n            layout=\"horizontal\"\n            size=\"small\"\n          >\n            <Form.Item\n              {...formItemLayout}\n              rules={[{ required: true, message: 'Please Enter Name' }]}\n              name=\"name\"\n              label=\"Name\"\n            >\n              <Input placeholder=\"Name\" />\n            </Form.Item>\n            <Form.Item\n              {...formItemLayout}\n              rules={[{ required: true, message: 'Please Enter Email' }]}\n              name=\"email\"\n              label=\"Email\"\n            >\n              <Input placeholder=\"Email\" />\n            </Form.Item>\n            <Form.Item\n              rules={[{ required: true, message: 'Please Enter Phone' }]}\n              {...formItemLayout}\n              name=\"phone\"\n              label=\"Phone\"\n            >\n              <Input placeholder=\"Phone\" />\n            </Form.Item>\n            <Form.Item {...formItemLayout} name=\"fax\" label=\"Fax\">\n              <Input placeholder=\"Fax\" />\n            </Form.Item>\n            <Form.Item {...formItemLayout} name=\"status\" label=\"Status\" initialValue={personCheckBox}>\n              <Switch checked={personCheckBox} onChange={checked => setPersonCheckBox(checked)} />\n            </Form.Item>\n          </Form>\n        </Modal>\n      </Main>\n    </>\n  );\n};\n\nexport default AddVendor;\n","import { Button, Checkbox, Input, Switch, Select, Table } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport FeatherIcon from 'feather-icons-react';\nimport { addressSchema } from '../../apollo/address';\nimport apolloClient from '../../utility/apollo';\n\nconst BillingAdderess = ({\n  defaultBilling,\n  initialAddressData,\n  billingAddresses,\n  setBillingAddresses,\n  setDefaultBilling,\n}) => {\n  // Change State After Country Change\n  const [countries, setCountries] = useState([]);\n  const [newInitialData, setNewInitialData] = useState({ data: [], loading: true });\n  useEffect(() => {\n    // Get Country List\n    apolloClient\n      .query({\n        query: addressSchema.GET_COUNTRY_LIST,\n        context: {\n          headers: { TENANTID: process.env.REACT_APP_TENANTID },\n        },\n      })\n      .then(res => {\n        const data = res.data.getCountryList;\n        if (!data.status) return true;\n        setCountries(data?.data);\n      });\n\n    // Get State List\n    apolloClient\n      .query({\n        query: addressSchema.GET_STATE_LISTS,\n        variables: {\n          query: {\n            code: '',\n          },\n        },\n        context: {\n          headers: {\n            TENANTID: process.env.REACT_APP_TENANTID,\n          },\n        },\n      })\n      .then(res => {\n        const data = res?.data?.getStateList;\n        if (!data?.status) return;\n        setNewInitialData({ data: { ...initialAddressData, states: data?.data }, loading: false });\n        setBillingAddresses(\n          billingAddresses.map(item => {\n            return { ...item, states: data?.data?.filter(a => a.country_code === item?.countryCode?.code) };\n          }),\n        );\n      })\n      .finally(() => {\n        setNewInitialData(prev => ({ ...prev, loading: false }));\n      });\n  }, []);\n  const column = [\n    {\n      title: 'Country',\n      dataIndex: ['countryCode', 'name'],\n      key: 'name',\n      render: (_, record) => (\n        <Select\n          onSelect={country => {\n            setBillingAddresses(\n              billingAddresses.map(item => {\n                if (item.id === record.id) {\n                  return {\n                    ...item,\n                    country,\n                    states: newInitialData.data.states.filter(a => a.country_code === country),\n                  };\n                }\n                return item;\n              }),\n            );\n          }}\n          style={{ width: '100%' }}\n          placeholder=\"Country\"\n          defaultValue={record?.countryCode?.code}\n          options={countries?.map(item => ({\n            label: item?.name,\n            value: item?.code,\n          }))}\n        />\n      ),\n    },\n    {\n      title: 'Address 1',\n      dataIndex: 'address1',\n      key: 'address1',\n      width: 200,\n      render: (text, record) => (\n        <Input\n          defaultValue={text}\n          type=\"text\"\n          placeholder=\"Address 1\"\n          onChange={e => (record.address1 = e.target.value)}\n        />\n      ),\n    },\n    {\n      title: 'Address 2',\n      dataIndex: 'address2',\n      key: 'address2',\n      width: 200,\n      render: (text, record) => (\n        <Input\n          defaultValue={text}\n          type=\"text\"\n          placeholder=\"Address 2\"\n          onChange={e => (record.address2 = e.target.value)}\n        />\n      ),\n    },\n    {\n      title: 'City',\n      dataIndex: 'city',\n      key: 'city',\n      render: (text, record) => (\n        <Input defaultValue={text} type=\"text\" placeholder=\"City\" onChange={e => (record.city = e.target.value)} />\n      ),\n    },\n    {\n      title: 'State',\n      dataIndex: 'states',\n      key: 'states',\n      width: 150,\n      render: (states, record) => (\n        <Select\n          style={{ width: '100%' }}\n          placeholder=\"State\"\n          options={states?.map(item => ({\n            label: item.state,\n            value: item.abbreviation,\n          }))}\n          onSelect={val => (record.state = val)}\n          defaultValue={record.state}\n        />\n      ),\n    },\n    {\n      title: 'Zip Code',\n      dataIndex: 'zip_code',\n      key: 'zip_code',\n      render: (text, record) => (\n        <Input\n          defaultValue={text}\n          type=\"text\"\n          placeholder=\"Zip Code\"\n          onChange={e => (record.zip_code = e.target.value)}\n        />\n      ),\n    },\n    {\n      title: 'Status',\n      dataIndex: 'status',\n      key: 'status',\n      align: 'right',\n      // width: 90,\n      render: (text, record) => (\n        <Switch defaultChecked={text} title=\"Status\" onChange={checked => (record.status = checked)} />\n      ),\n    },\n    {\n      title: 'Default',\n      dataIndex: 'isDefault',\n      key: 'isDefault',\n      align: 'right',\n      // width: 90,\n      render: (val, record) => (\n        <Checkbox checked={defaultBilling === record.id ? true : false} onChange={e => setDefaultBilling(record.id)} />\n      ),\n    },\n    // {\n    //   title: 'Action',\n    //   dataIndex: 'action',\n    //   key: 'action',\n    //   render: (text, record) => (\n    //     <Button size=\"\" title=\"Remove\" type=\"danger\" onClick={() => removeRow(record.id)}>\n    //       <FeatherIcon icon=\"trash-2\" />\n    //     </Button>\n    //   ),\n    // },\n  ];\n\n  // Adding new row on table\n  const addNewRow = () => {\n    setBillingAddresses(prevState => {\n      return [...prevState, { ...newInitialData.data, id: new Date().getTime() }];\n    });\n  };\n\n  const removeRow = id => {\n    setBillingAddresses(prevState => {\n      return prevState.filter(item => item.id !== id);\n    });\n  };\n\n  return (\n    <div>\n      <Table\n        loading={newInitialData?.loading}\n        className=\"table-responsive\"\n        columns={column}\n        pagination={false}\n        rowKey={'id'}\n        size=\"small\"\n        dataSource={billingAddresses}\n      />\n      <div style={{ display: 'flex', justifyContent: 'flex-end', marginTop: '10px', marginBottom: '10px' }}>\n        <Button\n          disabled={newInitialData?.loading}\n          title=\"Add Address\"\n          htmlType=\"button\"\n          type=\"primary\"\n          onClick={addNewRow}\n          style={{ marginRight: '.5em' }}\n        >\n          <FeatherIcon icon=\"plus\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default BillingAdderess;\n","import { Button, Checkbox, Input, Switch, Table, Select } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport FeatherIcon from 'feather-icons-react';\nimport { addressSchema } from '../../apollo/address';\nimport apolloClient from '../../utility/apollo';\n\nconst ShippingAddress = ({\n  defaultShipping,\n  initialAddressData,\n  shippingAddresses,\n  setShippingAddresses,\n  setDefaultShipping,\n}) => {\n  // Change State After Country Change\n  const [countries, setCountries] = useState([]);\n  const [newInitialData, setNewInitialData] = useState({ data: [], loading: true });\n  useEffect(() => {\n    // Get Country List\n    apolloClient\n      .query({\n        query: addressSchema.GET_COUNTRY_LIST,\n        context: {\n          headers: { TENANTID: process.env.REACT_APP_TENANTID },\n        },\n      })\n      .then(res => {\n        const data = res.data.getCountryList;\n        if (!data.status) return true;\n        setCountries(data?.data);\n      });\n\n    // Get State List\n    apolloClient\n      .query({\n        query: addressSchema.GET_STATE_LISTS,\n        variables: {\n          query: {\n            code: '',\n          },\n        },\n        context: {\n          headers: {\n            TENANTID: process.env.REACT_APP_TENANTID,\n          },\n        },\n      })\n      .then(res => {\n        const data = res?.data?.getStateList;\n        if (!data?.status) return;\n        setNewInitialData({ data: { ...initialAddressData, states: data?.data }, loading: false });\n        setShippingAddresses(\n          shippingAddresses.map(item => {\n            return { ...item, states: data?.data?.filter(a => a.country_code === item?.countryCode?.code) };\n          }),\n        );\n      })\n      .finally(() => {\n        setNewInitialData(prev => ({ ...prev, loading: false }));\n      });\n  }, []);\n  const column = [\n    {\n      title: 'Country',\n      dataIndex: ['countryCode', 'name'],\n      key: 'name',\n      render: (_, record) => (\n        <Select\n          onSelect={country => {\n            setShippingAddresses(\n              shippingAddresses.map(item => {\n                if (item.id === record.id) {\n                  return {\n                    ...item,\n                    country,\n                    states: newInitialData.data.states.filter(a => a.country_code === country),\n                  };\n                }\n                return item;\n              }),\n            );\n          }}\n          style={{ width: '100%' }}\n          placeholder=\"Country\"\n          defaultValue={record?.countryCode?.code}\n          options={countries?.map(item => ({\n            label: item?.name,\n            value: item?.code,\n          }))}\n        />\n      ),\n    },\n    {\n      title: 'Address 1',\n      dataIndex: 'address1',\n      key: 'address1',\n      width: 200,\n      render: (text, record) => (\n        <Input\n          defaultValue={text}\n          type=\"text\"\n          placeholder=\"Address 1\"\n          onChange={e => (record.address1 = e.target.value)}\n        />\n      ),\n    },\n    {\n      title: 'Address 2',\n      dataIndex: 'address2',\n      key: 'address2',\n      width: 200,\n      render: (text, record) => (\n        <Input\n          defaultValue={text}\n          type=\"text\"\n          placeholder=\"Address 2\"\n          onChange={e => (record.address2 = e.target.value)}\n        />\n      ),\n    },\n    {\n      title: 'City',\n      dataIndex: 'city',\n      key: 'city',\n      render: (text, record) => (\n        <Input defaultValue={text} type=\"text\" placeholder=\"City\" onChange={e => (record.city = e.target.value)} />\n      ),\n    },\n    {\n      title: 'State',\n      dataIndex: 'states',\n      key: 'states',\n      width: 150,\n      render: (states, record) => (\n        <Select\n          style={{ width: '100%' }}\n          placeholder=\"State\"\n          options={states?.map(item => ({\n            label: item.state,\n            value: item.abbreviation,\n          }))}\n          onSelect={val => (record.state = val)}\n          defaultValue={record.state}\n        />\n      ),\n    },\n    {\n      title: 'Zip Code',\n      dataIndex: 'zip_code',\n      key: 'zip_code',\n      render: (text, record) => (\n        <Input\n          defaultValue={text}\n          type=\"text\"\n          placeholder=\"Zip Code\"\n          onChange={e => (record.zip_code = e.target.value)}\n        />\n      ),\n    },\n    {\n      title: 'Status',\n      dataIndex: 'status',\n      key: 'status',\n      align: 'right',\n      // width: 90,\n      render: (text, record) => (\n        <Switch defaultChecked={text} title=\"Status\" onChange={checked => (record.status = checked)} />\n      ),\n    },\n    {\n      title: 'Default',\n      dataIndex: 'isDefault',\n      key: 'isDefault',\n      align: 'right',\n      // width: 90,\n      render: (val, record) => (\n        <Checkbox\n          name=\"isDefault\"\n          checked={defaultShipping === record.id ? true : false}\n          onChange={e => setDefaultShipping(record.id)}\n        />\n      ),\n    },\n    // {\n    //   title: 'Action',\n    //   dataIndex: 'action',\n    //   key: 'action',\n    //   render: (text, record) => (\n    //     <Button size=\"\" title=\"Remove\" type=\"danger\" onClick={() => removeRow(record.id)}>\n    //       <FeatherIcon icon=\"trash-2\" />\n    //     </Button>\n    //   ),\n    // },\n  ];\n\n  // Adding new row on table\n  const addNewRow = () => {\n    setShippingAddresses(prevState => {\n      return [...prevState, { ...newInitialData.data, id: new Date().getTime() }];\n    });\n  };\n\n  const removeRow = id => {\n    setShippingAddresses(prevState => {\n      return prevState.filter(item => item.id !== id);\n    });\n  };\n\n  return (\n    <div>\n      <Table\n        className=\"table-responsive\"\n        columns={column}\n        pagination={false}\n        rowKey={'id'}\n        size=\"small\"\n        dataSource={shippingAddresses}\n        loading={newInitialData?.loading}\n      />\n      <div style={{ display: 'flex', justifyContent: 'flex-end', marginTop: '10px', marginBottom: '10px' }}>\n        <Button\n          disabled={newInitialData?.loading}\n          title=\"Add Address\"\n          htmlType=\"button\"\n          type=\"primary\"\n          onClick={addNewRow}\n          style={{ marginRight: '.5em' }}\n        >\n          <FeatherIcon icon=\"plus\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default ShippingAddress;\n"],"sourceRoot":""}