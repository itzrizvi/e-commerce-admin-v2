{"version":3,"sources":["container/roles/UpdateRole.js"],"names":["TextArea","UpdateRole","viewPermission","history","useHistory","search","useLocation","params","queryString","parse","useState","permissionList","setPermissionList","role_status","setRole_status","isLoading","setIsLoading","data","loading","error","singleRole","setSingleRole","useForm","form","columns","title","dataIndex","render","value","item","index","defaultChecked","onChange","e","id","edit_access","variables","permissionsData","role_id","parseInt","permission_id","read_access","target","checked","apolloClient","mutate","mutation","authMutation","UPDATE_ROLE_PERMISSIONS_ONCHANGE","context","headers","TENANTID","process","Authorization","Cookies","get","then","res","updateRolePermissions","status","toast","success","state","copyState","catch","err","finally","allPermissions","setAllPermissions","useEffect","query","authQuery","GET_SINGLE_ROLE","getSingleRole","console","log","GET_ALL_ROLES_PERMISSION","getAllRolesPermission","isAuth","s","map","pid1","findRes","permissions","find","permission","rolesPermission","copyItem","role","gutter","sm","xs","headless","className","style","width","name","onFinish","values","UPDATE_ROLE","updateRole","setTimeout","push","onFinishFailed","errorInfo","labelCol","span","Item","rules","required","max","message","label","initialValue","defaultValue","placeholder","role_description","rows","fontSize","fontWeight","pagination","rowKey","dataSource","display","justifyContent","marginTop","size","htmlType","type","raised","marginLeft","onClick"],"mappings":"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","file":"static/js/75.3d598437.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Row, Col, Form, Input, Switch, Table, Checkbox, Spin } from 'antd';\nimport { PageHeader } from '../../components/page-headers/page-headers';\nimport { Main } from '../styled';\nimport { Cards } from '../../components/cards/frame/cards-frame';\nimport { Button } from '../../components/buttons/buttons';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport queryString from 'query-string';\nimport apolloClient, { authMutation, authQuery } from '../../utility/apollo';\nimport Cookies from 'js-cookie';\nimport { toast } from 'react-toastify';\nimport { viewPermission } from '../../utility/utility';\nconst { TextArea } = Input;\n\nconst UpdateRole = () => {\n  viewPermission('role');\n  const history = useHistory();\n  const { search } = useLocation();\n  const params = queryString.parse(search);\n\n  const [permissionList, setPermissionList] = useState([]);\n  const [role_status, setRole_status] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [singleRole, setSingleRole] = useState({ data: {}, loading: true, error: '' });\n  const maxLength = 30;\n  const [form] = Form.useForm();\n\n  const columns = [\n    {\n      title: 'Permission Name',\n      dataIndex: 'roles_permission_name',\n    },\n    {\n      title: 'Access',\n      dataIndex: 'read_access',\n      render: (value, item, index) => (\n        <Checkbox\n          defaultChecked={value}\n          onChange={e => {\n            const { id, edit_access } = item;\n            const variables = {\n              data: {\n                permissionsData: {\n                  role_id: parseInt(singleRole?.data?.id),\n                  permission_id: parseInt(id),\n                  read_access: e.target.checked,\n                  edit_access,\n                },\n              },\n            };\n            setIsLoading(true);\n            apolloClient\n              .mutate({\n                mutation: authMutation.UPDATE_ROLE_PERMISSIONS_ONCHANGE,\n                variables,\n                context: {\n                  headers: {\n                    TENANTID: process.env.REACT_APP_TENANTID,\n                    Authorization: Cookies.get('psp_t'),\n                  },\n                },\n              })\n              .then(res => {\n                const data = res?.data?.updateRolePermissions;\n                if (!data.status) return toast.error('Something Went wrong !!');\n                toast.success(`Permission Updated Successfully`);\n                // update state\n                setPermissionList(state => {\n                  const copyState = [...state];\n                  copyState[index] = { ...copyState[index], read_access: e.target.checked };\n                  return copyState;\n                });\n              })\n              .catch(err => {\n                toast.error('Something Went wrong !!');\n              })\n              .finally(() => {\n                setIsLoading(false);\n              });\n          }}\n        />\n      ),\n    },\n    {\n      title: 'Modify',\n      dataIndex: 'edit_access',\n      render: (value, item, index) => (\n        <Checkbox\n          defaultChecked={value}\n          onChange={e => {\n            const { id, read_access } = item;\n            const variables = {\n              data: {\n                permissionsData: {\n                  role_id: parseInt(singleRole?.data?.id),\n                  permission_id: parseInt(id),\n                  read_access,\n                  edit_access: e.target.checked,\n                },\n              },\n            };\n            setIsLoading(true);\n            apolloClient\n              .mutate({\n                mutation: authMutation.UPDATE_ROLE_PERMISSIONS_ONCHANGE,\n                variables,\n                context: {\n                  headers: {\n                    TENANTID: process.env.REACT_APP_TENANTID,\n                    Authorization: Cookies.get('psp_t'),\n                  },\n                },\n              })\n              .then(res => {\n                const data = res?.data?.updateRolePermissions;\n                if (!data.status) return toast.error('Something Went wrong !!');\n                toast.success(`Permission Updated Successfully`);\n                // update state\n                setPermissionList(state => {\n                  const copyState = [...state];\n                  copyState[index] = { ...copyState[index], edit_access: e.target.checked };\n                  return copyState;\n                });\n              })\n              .catch(err => {\n                toast.error('Something Went wrong !!');\n              })\n              .finally(() => {\n                setIsLoading(false);\n              });\n          }}\n        />\n      ),\n    },\n  ];\n\n  const [allPermissions, setAllPermissions] = useState({ data: [], loading: true, error: '' });\n\n  useEffect(() => {\n    // Load single role & get all permission\n    if (!params.id) return;\n\n    // Load single role\n    apolloClient\n      .query({\n        query: authQuery.GET_SINGLE_ROLE,\n        variables: {\n          query: {\n            id: parseInt(params.id),\n          },\n        },\n        context: {\n          headers: {\n            TENANTID: process.env.REACT_APP_TENANTID,\n            Authorization: Cookies.get('psp_t'),\n          },\n        },\n      })\n      .then(res => {\n        const data = res?.data?.getSingleRole;\n        if (!data.status) return;\n        setSingleRole({ data: data?.data, loading: false, error: '' });\n        setRole_status(data?.data?.role_status);\n      })\n      .catch(err => {\n        console.log('got error loading single', err);\n        setSingleRole({ data: {}, loading: false, error: 'Something went worng' });\n      });\n\n    // Load all permission\n    apolloClient\n      .query({\n        query: authQuery.GET_ALL_ROLES_PERMISSION,\n        context: {\n          headers: {\n            TENANTID: process.env.REACT_APP_TENANTID,\n            Authorization: Cookies.get('psp_t'),\n          },\n        },\n      })\n      .then(res => {\n        const data = res?.data?.getAllRolesPermission;\n        if (!data?.isAuth) return setAllPermissions(s => ({ ...s, error: 'You Are not Authorized' }));\n        setAllPermissions(s => ({ data: data?.data, loading: false, error: '' }));\n      })\n      .catch(err => {\n        setAllPermissions(s => ({ ...s, error: 'Something went Wrong.!! ' }));\n      });\n  }, []);\n\n  // organize permission\n  useEffect(() => {\n    if (singleRole.loading || allPermissions.loading) return;\n\n    const data = allPermissions.data.map(item => {\n      const pid1 = item.id;\n      let findRes = singleRole?.data?.permissions?.find(permission => permission.rolesPermission.id === pid1);\n      const copyItem = { ...item, edit_access: false, read_access: false };\n\n      if (findRes) {\n        copyItem.read_access = findRes.read_access;\n        copyItem.edit_access = findRes.edit_access;\n      }\n\n      return copyItem;\n    });\n    setPermissionList(data);\n  }, [singleRole, allPermissions]);\n\n  const handleSubmit = values => {\n    setIsLoading(true);\n    const variables = { data: { ...values, role_status, id: singleRole.data.id } };\n\n    apolloClient\n      .mutate({\n        mutation: authMutation.UPDATE_ROLE,\n        variables,\n        context: {\n          headers: {\n            TENANTID: process.env.REACT_APP_TENANTID,\n            Authorization: Cookies.get('psp_t'),\n          },\n        },\n      })\n      .then(res => {\n        const data = res?.data?.updateRole;\n        if (!data?.status) return toast.error('Something Went wrong !!');\n        setTimeout(() => {\n          history.push('/admin/roles/list');\n        }, 1000);\n        toast.success(`${singleRole.data.role} updated successfully.`);\n      })\n      .catch(err => {\n        console.log('Error on update role: ', err);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  };\n\n  return (\n    <>\n      <PageHeader title={`Manage Role | Edit Role ${singleRole.loading ? '' : `(${singleRole.data.role})`}`} />\n      <Main>\n        <Row gutter={25}>\n          <Col sm={24} xs={24}>\n            <Cards headless>\n              {singleRole.loading || allPermissions.loading ? (\n                <div className=\"spin\">\n                  <Spin />\n                </div>\n              ) : (\n                <>\n                  <Form\n                    style={{ width: '100%' }}\n                    form={form}\n                    name=\"addRole\"\n                    onFinish={handleSubmit}\n                    onFinishFailed={errorInfo => console.log('form error info:\\n', errorInfo)}\n                    labelCol={{ span: 4 }}\n                  >\n                    <Row gutter={25}>\n                      <Col span={10}>\n                        <Form.Item\n                          rules={[{ required: true, max: maxLength, message: 'Please enter Role Name' }]}\n                          name=\"role\"\n                          label=\"Name\"\n                          initialValue={singleRole.data.role}\n                          labelCol={{ style: { width: \"40%\" } }}\n                        >\n                          <Row>\n                            <Col span={22}>\n                              <Input defaultValue={singleRole?.data?.role} placeholder=\"Enter Role Name\" />\n                            </Col>\n                          </Row>\n                        </Form.Item>\n                      </Col>\n                    </Row>\n\n                    <Row gutter={25}>\n                      <Col span={18}>\n                        <Form.Item\n                          rules={[{ required: true, message: 'Please enter Role Description' }]}\n                          name=\"roleDescription\"\n                          label=\"Description\"\n                          initialValue={singleRole.data.role_description}\n                          labelCol={{ style: { width: \"21.5%\" } }}\n                        >\n                          <Row>\n                            <Col span={18}>\n                              <TextArea rows={4} defaultValue={singleRole?.data?.role_description} placeholder=\"Enter Role Description\" />\n                            </Col>\n                          </Row>\n                        </Form.Item>\n                      </Col>\n                    </Row>\n\n\n                    <Form.Item name=\"role_status\" label=\"Status\">\n                      <Switch checked={role_status} onChange={checked => setRole_status(checked)} />\n                    </Form.Item>\n                    <Row gutter={25}>\n                      <Col span={24} >\n                        <h2 style={{ fontSize: \"15px\", fontWeight: \"600\" }}>Select Or Update Permissions For This Role:</h2>\n                        <Form.Item name=\"permissionsData\">\n                          <Table pagination={false} columns={columns} rowKey={'id'} dataSource={permissionList} />\n                        </Form.Item>\n                      </Col>\n                    </Row>\n\n                    <div\n                      style={{\n                        display: 'flex',\n                        justifyContent: 'flex-end',\n                        marginTop: '3em',\n                      }}\n                    >\n                      <Form.Item>\n                        <Button loading={isLoading} size=\"default\" htmlType=\"submit\" type=\"primary\" raised>\n                          {isLoading ? 'Processing' : 'Save'}\n                        </Button>\n                        <Button\n                          style={{ marginLeft: 10 }}\n                          type=\"light\"\n                          size=\"default\"\n                          onClick={() => {\n                            history.push('/admin/roles/list');\n                          }}\n                        >\n                          Cancel\n                        </Button>\n                      </Form.Item>\n                    </div>\n                  </Form>\n                </>\n              )}\n            </Cards>\n          </Col>\n        </Row>\n      </Main>\n    </>\n  );\n};\n\nexport default UpdateRole;\n"],"sourceRoot":""}