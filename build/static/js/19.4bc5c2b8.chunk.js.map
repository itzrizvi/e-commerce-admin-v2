{"version":3,"sources":["container/vendors/UpdateVendor.js","apollo/contactPerson/index.js","container/vendors/BillingAdderess.js","container/vendors/ShippingAddress.js"],"names":["i","TextArea","formItemLayout","labelCol","span","wrapperCol","UpdateVendor","viewPermission","params","useParams","history","useHistory","useState","data","isLoading","singleVendor","setSingleVendor","status","setStatus","setIsLoading","defaultBilling","setDefaultBilling","defaultShipping","setDefaultShipping","useForm","form","personForm","operation","setOperation","vendor_id","setVendorId","isError","setIsError","contactPersons","setContactPersons","personModalOpen","setPersonModalOpen","personType","setPersonType","token","useSelector","state","auth","personCheckBox","setPersonCheckBox","selectedPersonID","setSelectedPersonID","message","setMessage","initialAddressData","id","Date","getTime","parent_id","address1","address2","country","city","zip_code","isDefault","isNew","billingAddresses","setBillingAddresses","shippingAddresses","setShippingAddresses","useEffect","apolloClient","query","vendorQuery","GET_SINGLE_VENDOR","variables","parseInt","context","headers","TENANTID","process","Authorization","fetchPolicy","then","res","getSingleVendor","s","error","billings","shippings","contact_person","addresses","forEach","address","updatedAt","createdAt","__typename","type","rest","email","phone","fax","item","push","person","catch","err","finally","newBillingAddress","map","states","countryCode","newShippingAddress","mutate","mutation","contactPersonsSchema","UPDATE_CONTACT_PERSON","ADD_CONTACT_PERSON","ref_id","contact_persons","name","updateContactPerson","createContactPerson","vendorMutation","UPDATE_VENDOR_ADDRESS","updateVendorAddress","setTimeout","handleContactPerson","validateFields","values","getFieldsValue","prev","resetFields","title","company_name","align","justify","style","margin","padding","width","marginBottom","showIcon","closable","gutter","sm","xs","headless","div","className","onFinish","UPDATE_VENDOR","refetchQueries","GET_ALL_VENDOR","updateVendor","console","log","onFinishFailed","errorInfo","initialValues","description","phone_number","EIN_no","TAX_ID","FAX_no","marginTop","TabPane","tab","key","Item","rules","required","max","label","placeholder","rows","checked","onChange","size","float","htmlType","onClick","setFieldsValue","md","lg","position","right","zIndex","filter","handleEditPerson","border","Paragraph","color","count","display","justifyContent","loading","raised","to","marginLeft","top","open","onOk","onCancel","okText","preserve","layout","initialValue","gql","BillingAdderess","countries","setCountries","newInitialData","setNewInitialData","addressSchema","GET_COUNTRY_LIST","getCountryList","GET_STATE_LISTS","code","getStateList","a","country_code","column","dataIndex","render","_","record","onSelect","defaultValue","options","value","text","e","target","abbreviation","val","defaultChecked","columns","pagination","rowKey","dataSource","disabled","prevState","marginRight","icon","ShippingAddress"],"mappings":"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","file":"static/js/19.4bc5c2b8.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Row, Col, Form, Input, Switch, Spin, Modal, Typography, Badge, Card, Tabs, Alert } from 'antd';\nimport { PageHeader } from '../../components/page-headers/page-headers';\nimport { Main } from '../styled';\nimport FeatherIcon from 'feather-icons-react';\nimport { Cards } from '../../components/cards/frame/cards-frame';\nimport { Button } from '../../components/buttons/buttons';\nimport { Link, useHistory, useParams } from 'react-router-dom';\nimport apolloClient, { vendorMutation, vendorQuery } from '../../utility/apollo';\nimport { viewPermission } from '../../utility/utility';\nimport BillingAdderess from './BillingAdderess';\nimport ShippingAddress from './ShippingAddress';\nimport { useSelector } from 'react-redux';\nimport { contactPersonsSchema } from '../../apollo/contactPerson';\nconst { TextArea } = Input;\n\nconst formItemLayout = {\n  labelCol: {\n    span: 4,\n  },\n  wrapperCol: {\n    span: 18,\n  },\n};\n\nconst UpdateVendor = () => {\n  viewPermission('vendor');\n  const params = useParams();\n  const history = useHistory();\n\n  const [singleVendor, setSingleVendor] = useState({ data: [], isLoading: true });\n  const [status, setStatus] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n  const [defaultBilling, setDefaultBilling] = useState(null);\n  const [defaultShipping, setDefaultShipping] = useState(null);\n  const [form] = Form.useForm();\n  const [personForm] = Form.useForm();\n  const maxLength = 30;\n  const [operation, setOperation] = useState(false);\n  const [vendor_id, setVendorId] = useState(null);\n  const [isError, setIsError] = useState(false);\n  const [contactPersons, setContactPersons] = useState([]);\n  const [personModalOpen, setPersonModalOpen] = useState(false);\n  const [personType, setPersonType] = useState('Add');\n  const token = useSelector(state => state.auth.token);\n  const [personCheckBox, setPersonCheckBox] = useState(true);\n  const [selectedPersonID, setSelectedPersonID] = useState(null);\n  // Message\n  const [message, setMessage] = useState(null);\n\n  /* -------------------------- Step From Data Start -------------------------- */\n  const steps = [\n    {\n      title: 'General',\n      percent: 40,\n    },\n    {\n      title: 'Billing Address',\n      percent: 60,\n    },\n    {\n      title: 'Shipping Address',\n      percent: 80,\n    },\n    {\n      title: 'Contact Persons',\n      percent: 100,\n    },\n  ];\n\n  /* ---------------------------- tep Form Data end --------------------------- */\n\n  // ============+ for billing START +====================\n  const initialAddressData = {\n    id: new Date().getTime(),\n    parent_id: '',\n    address1: '',\n    address2: '',\n    country: '',\n    city: '',\n    state: '',\n    zip_code: '',\n    status: true,\n    isDefault: false,\n    isNew: true,\n  };\n  const [billingAddresses, setBillingAddresses] = useState([]);\n  // ============+ for billing END +====================\n\n  const [shippingAddresses, setShippingAddresses] = useState([]);\n  // ============+ for billing END +====================\n\n  // LOAD SINGLE Vendor\n  useEffect(() => {\n    if (!params?.id) return;\n\n    apolloClient\n      .query({\n        query: vendorQuery.GET_SINGLE_VENDOR,\n        variables: { query: { id: parseInt(params.id) } },\n        context: {\n          headers: {\n            TENANTID: process.env.REACT_APP_TENANTID,\n            Authorization: token,\n          },\n        },\n        fetchPolicy: 'network-only',\n      })\n      .then(res => {\n        const data = res?.data?.getSingleVendor;\n        if (!data?.status) return;\n        initialAddressData.parent_id = data?.data?.id;\n        setSingleVendor(s => ({ ...s, data: data?.data, error: '' }));\n        setStatus(data?.data?.status);\n        let billings = [];\n        let shippings = [];\n        let contact_person = [];\n        data?.data.addresses.forEach(address => {\n          const { updatedAt, createdAt, __typename, type, isDefault, email, phone, fax, ...rest } = address;\n          const item = {\n            isDefault: false,\n            isNew: false,\n            parent_id: data?.data?.id,\n            ...rest,\n          };\n          if (address.type === 'billing') {\n            if (isDefault) setDefaultBilling(address.id);\n            return billings.push(item);\n          } else if (address.type === 'shipping') {\n            if (isDefault) setDefaultShipping(address.id);\n            return shippings.push(item);\n          }\n          return;\n        });\n        data?.data?.contactPersons.forEach(person => {\n          contact_person.push({ ...person, isNew: false });\n        });\n        setContactPersons(contact_person);\n        setBillingAddresses(billings);\n        setShippingAddresses(shippings);\n      })\n      .catch(err => {\n        setSingleVendor(s => ({ ...s, error: 'Something went Wrong.!! ' }));\n      })\n      .finally(() => {\n        setSingleVendor(s => ({ ...s, isLoading: false }));\n      });\n  }, [params?.id]);\n\n  const handleSubmit = () => {\n    const values = form.getFieldsValue(true);\n    delete values?.countryCode;\n    const variables = { ...values, status };\n    apolloClient\n      .mutate({\n        mutation: vendorMutation.UPDATE_VENDOR,\n        variables: { data: { ...variables, id: parseInt(params.id) } },\n        context: {\n          headers: {\n            TENANTID: process.env.REACT_APP_TENANTID,\n            Authorization: token,\n          },\n        },\n        refetchQueries: [\n          {\n            query: vendorQuery.GET_ALL_VENDOR,\n            context: {\n              headers: {\n                TENANTID: process.env.REACT_APP_TENANTID,\n                Authorization: token,\n              },\n            },\n            fetchPolicy: 'network-only',\n          },\n          ['getAllVendor'],\n        ],\n      })\n      .then(res => {\n        const data = res?.data?.updateVendor;\n        if (!data.status) return setMessage({ type: 'error', message: data.message });\n        setVendorId(parseInt(params?.id));\n        setOperation(true);\n      })\n      .catch(err => {\n        console.log('got error on update vendor', err);\n        setIsError(true);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  };\n\n  useEffect(() => {\n    if (operation && vendor_id) {\n      const newBillingAddress = billingAddresses.map(item => {\n        const { parent_id, isNew, states, id, isDefault, countryCode, ...rest } = item;\n        return {\n          isDefault: defaultBilling === id,\n          parent_id: vendor_id,\n          isNew,\n          ...rest,\n          ...(!isNew && { id }),\n        };\n      });\n      const newShippingAddress = shippingAddresses.map(item => {\n        const { parent_id, isNew, states, isDefault, id, countryCode, ...rest } = item;\n        return {\n          isDefault: defaultShipping === id,\n          parent_id: vendor_id,\n          isNew,\n          ...rest,\n          ...(!isNew && { id }),\n        };\n      });\n\n      ['person', 'billing', 'shipping'].forEach(type => {\n        setIsLoading(true);\n        if (type === 'person') {\n          apolloClient\n            .mutate({\n              mutation: !params?.id\n                ? contactPersonsSchema.ADD_CONTACT_PERSON\n                : contactPersonsSchema.UPDATE_CONTACT_PERSON,\n              variables: {\n                data: {\n                  ref_id: vendor_id,\n                  type: 'vendor',\n                  contact_persons: contactPersons.map(item => ({\n                    ...(!item.isNew && { id: item.id }),\n                    name: item.name,\n                    email: item.email,\n                    phone: item.phone,\n                    fax: item.fax,\n                    status: item.status,\n                    isNew: item.isNew,\n                  })),\n                },\n              },\n              context: {\n                headers: {\n                  TENANTID: process.env.REACT_APP_TENANTID,\n                  Authorization: token,\n                },\n              },\n            })\n            .then(res => {\n              const data = !params?.id ? res?.data?.createContactPerson : res?.data?.updateContactPerson;\n              if (!data?.status) return setIsError(true);\n            })\n            .catch(err => {\n              setIsError(true);\n            });\n        } else {\n          apolloClient\n            .mutate({\n              mutation: vendorMutation.UPDATE_VENDOR_ADDRESS,\n              variables: {\n                data: {\n                  ref_id: vendor_id,\n                  type,\n                  addresses: [...(type === 'billing' ? newBillingAddress : newShippingAddress)],\n                },\n              },\n              context: {\n                headers: {\n                  TENANTID: process.env.REACT_APP_TENANTID,\n                  Authorization: token,\n                },\n              },\n            })\n            .then(res => {\n              const data = res?.data?.updateVendorAddress;\n              if (!data?.status) return setIsError(true);\n            })\n            .catch(err => {\n              setIsError(true);\n            })\n            .finally(res => {\n              setIsLoading(false);\n              if (type === 'shipping') {\n                if (!isError) {\n                  setMessage({ type: 'success', message: `Vendor ${params?.id ? 'Updated' : 'Added'} Successfully.` });\n                  setTimeout(() => {\n                    history.push('/admin/vendor/list');\n                  }, [2000]);\n                }\n              }\n            });\n        }\n      });\n    }\n  }, [operation, vendor_id]);\n\n  const handleContactPerson = async () => {\n    await personForm.validateFields(['email', 'name', 'phone']);\n    const values = personForm.getFieldsValue();\n    if (!selectedPersonID) {\n      setContactPersons(prev => [...prev, { ...values, id: new Date().getTime(), isNew: true }]);\n    } else {\n      setContactPersons(prev =>\n        prev.map(item => {\n          if (item.id === selectedPersonID) {\n            return { ...values, id: selectedPersonID, isNew: false };\n          }\n          return item;\n        }),\n      );\n    }\n    setPersonModalOpen(false);\n    personForm.resetFields();\n  };\n\n  const handleAddPerson = () => {\n    personForm.setFieldsValue({\n      name: '',\n      email: '',\n      status: true,\n      phone: '',\n      fax: '',\n    });\n    setPersonType('Add');\n    setPersonCheckBox(true);\n    setPersonModalOpen(true);\n  };\n\n  const handleEditPerson = id => {\n    setSelectedPersonID(id);\n    const person = contactPersons.filter(item => item.id === id);\n    if (person) {\n      personForm.setFieldsValue({\n        name: person[0].name,\n        email: person[0].email,\n        status: person[0].status,\n        phone: person[0].phone,\n        fax: person[0].fax,\n      });\n    }\n    setPersonType('Update');\n    setPersonCheckBox(person[0].status);\n    setPersonModalOpen(true);\n  };\n\n  const handleRemovePerson = id => {\n    setContactPersons(prev => prev.filter(item => item.id !== id));\n  };\n\n  return (\n    <>\n      <PageHeader\n        title={`Manage Vendor | Edit ${singleVendor.data.company_name ? `(${singleVendor.data.company_name})` : ''}`}\n      />\n      <Main>\n        <Row align=\"middle\" justify=\"center\" style={{ margin: 0, padding: 0 }}>\n          {message && (\n            <Alert\n              style={{ width: '50%', marginBottom: 10 }}\n              message={message?.message}\n              type={message?.type}\n              showIcon\n              closable\n            />\n          )}\n        </Row>\n        <Row gutter={25}>\n          <Col sm={24} xs={24}>\n            <Cards headless>\n              {singleVendor.isLoading ? (\n                <div div className=\"spin\">\n                  <Spin />\n                </div>\n              ) : (\n                <Form\n                  style={{ width: '100%' }}\n                  form={form}\n                  name=\"addVendor\"\n                  onFinish={handleSubmit}\n                  onFinishFailed={errorInfo => console.log('form error info:\\n', errorInfo)}\n                  labelCol={{ span: 4 }}\n                  initialValues={\n                    params.id\n                      ? {\n                          company_name: singleVendor.data.company_name,\n                          contact_person: singleVendor.data.contact_person,\n                          email: singleVendor.data.email,\n                          description: singleVendor.data.description,\n                          phone_number: singleVendor.data.phone_number,\n                          EIN_no: singleVendor.data.EIN_no,\n                          TAX_ID: singleVendor.data.TAX_ID,\n                          FAX_no: singleVendor.data.FAX_no,\n                        }\n                      : null\n                  }\n                >\n                  <Row style={{ marginTop: 40 }}>\n                    <Col span={24}>\n                      <Tabs>\n                        <Tabs.TabPane tab=\"General\" key=\"general\">\n                          <Row gutter={25}>\n                            <Col sm={24}>\n                              <Form.Item\n                                rules={[\n                                  { required: true, max: maxLength, message: 'Please enter Vendor Company Name' },\n                                ]}\n                                name=\"company_name\"\n                                label=\"Company Name\"\n                              >\n                                <Input style={{ width: '50%' }} placeholder=\"Company Name\" />\n                              </Form.Item>\n\n                              <Form.Item\n                                rules={[\n                                  { required: true, max: maxLength, message: 'Please enter Vendor Contact Person' },\n                                ]}\n                                label=\"Contact Person\"\n                                name=\"contact_person\"\n                              >\n                                <Input style={{ width: '50%' }} placeholder=\"Contact Person\" />\n                              </Form.Item>\n\n                              <Form.Item\n                                rules={[{ required: true, max: maxLength, message: 'Please enter Email' }]}\n                                name=\"email\"\n                                label=\"Email\"\n                              >\n                                <Input style={{ width: '50%' }} placeholder=\"Email\" type=\"email\" />\n                              </Form.Item>\n\n                              <Form.Item name=\"phone_number\" label=\"Phone\">\n                                <Input style={{ width: '50%' }} placeholder=\"Phone Number\" />\n                              </Form.Item>\n                              <Form.Item name=\"FAX_no\" label=\"Fax\">\n                                <Input style={{ width: '50%' }} placeholder=\"Fax\" />\n                              </Form.Item>\n                              <Form.Item name=\"EIN_no\" label=\"EIN\">\n                                <Input style={{ width: '50%' }} placeholder=\"EIN Number\" />\n                              </Form.Item>\n                              <Form.Item name=\"TAX_ID\" label=\"Tax Id\">\n                                <Input style={{ width: '50%' }} placeholder=\"Tax Id\" />\n                              </Form.Item>\n                              <Form.Item name=\"description\" label=\"Description\">\n                                <TextArea style={{ width: '60%' }} rows={4} placeholder=\"Description\" />\n                              </Form.Item>\n                              <Form.Item label=\"Status\">\n                                <Switch checked={status} onChange={checked => setStatus(checked)} />\n                              </Form.Item>\n                            </Col>\n                          </Row>\n                        </Tabs.TabPane>\n                        <Tabs.TabPane tab=\"Billing Address\" key=\"billing_address\">\n                          <Row gutter={25}>\n                            <Col sm={24}>\n                              <BillingAdderess\n                                {...{\n                                  defaultBilling,\n                                  initialAddressData,\n                                  billingAddresses,\n                                  setBillingAddresses,\n                                  setDefaultBilling,\n                                }}\n                              />\n                            </Col>\n                          </Row>\n                        </Tabs.TabPane>\n                        <Tabs.TabPane tab=\"Shipping Address\" key=\"shipping_address\">\n                          <Row gutter={25}>\n                            <Col sm={24}>\n                              <ShippingAddress\n                                {...{\n                                  defaultShipping,\n                                  initialAddressData,\n                                  shippingAddresses,\n                                  setShippingAddresses,\n                                  setDefaultShipping,\n                                }}\n                              />\n                            </Col>\n                          </Row>\n                        </Tabs.TabPane>\n                        <Tabs.TabPane tab=\"Contact Person\" key=\"contact_person\">\n                          <Row gutter={25}>\n                            <Col span={24}>\n                              <Button\n                                size=\"small\"\n                                style={{ float: 'right', marginBottom: 20, marginTop: -20 }}\n                                title=\"Add Person\"\n                                htmlType=\"button\"\n                                type=\"primary\"\n                                onClick={handleAddPerson}\n                              >\n                                Add Person\n                              </Button>\n                            </Col>\n                          </Row>\n                          <Row gutter={25}>\n                            {contactPersons.map(item => (\n                              <Col key={item.id} sm={24} md={12} lg={8}>\n                                {params?.id && (\n                                  <>\n                                    <Button\n                                      size=\"small\"\n                                      style={{ position: 'absolute', right: 14, zIndex: 1000 }}\n                                      title=\"Edit Person\"\n                                      htmlType=\"button\"\n                                      type=\"info\"\n                                      onClick={() => handleEditPerson(item.id)}\n                                    >\n                                      Edit\n                                    </Button>\n                                    {/* <Button\n                                      size=\"small\"\n                                      style={{ position: 'absolute', right: 14, top: 40, zIndex: 1000 }}\n                                      title=\"Remove Person\"\n                                      htmlType=\"button\"\n                                      type=\"danger\"\n                                      onClick={() => handleRemovePerson(item.id)}\n                                    >\n                                      <FeatherIcon icon=\"trash-2\" />\n                                    </Button> */}\n                                  </>\n                                )}\n\n                                <Card style={{ border: '1px solid #ddd' }}>\n                                  <Typography.Paragraph>{item.name}</Typography.Paragraph>\n                                  <Typography.Paragraph>{item.email}</Typography.Paragraph>\n                                  <Typography.Paragraph>{item.phone}</Typography.Paragraph>\n                                  <Typography.Paragraph>{item.fax}</Typography.Paragraph>\n                                  <Typography.Paragraph>\n                                    {\n                                      <Badge\n                                        color={item.status ? 'cyan' : 'orange'}\n                                        count={item.status ? 'Active' : 'Inactive'}\n                                      />\n                                    }\n                                  </Typography.Paragraph>\n                                </Card>\n                              </Col>\n                            ))}\n                          </Row>\n                        </Tabs.TabPane>\n                      </Tabs>\n                    </Col>\n                  </Row>\n                  <Row style={{ marginTop: 20 }}>\n                    <Col span={24}>\n                      <div\n                        style={{\n                          display: 'flex',\n                          justifyContent: 'flex-end',\n                          marginTop: '3em',\n                        }}\n                      >\n                        <Form.Item>\n                          <Button loading={isLoading} size=\"default\" htmlType=\"submit\" type=\"primary\" raised>\n                            {isLoading ? 'Processing' : 'Update Vendor'}\n                          </Button>\n                          <Link to=\"/admin/vendor/list\">\n                            <Button style={{ marginLeft: 10 }} type=\"light\" size=\"default\">\n                              Cancel\n                            </Button>\n                          </Link>\n                        </Form.Item>\n                      </div>\n                    </Col>\n                  </Row>\n                </Form>\n              )}\n            </Cards>\n          </Col>\n        </Row>\n        <Modal\n          title={`${personType} Person`}\n          style={{ top: 20 }}\n          width={600}\n          open={personModalOpen}\n          onOk={handleContactPerson}\n          onCancel={() => setPersonModalOpen(false)}\n          okText=\"Save\"\n        >\n          <Form\n            preserve={false}\n            style={{ width: '100%' }}\n            form={personForm}\n            name=\"personForm\"\n            layout=\"horizontal\"\n            size=\"small\"\n          >\n            <Form.Item\n              {...formItemLayout}\n              rules={[{ required: true, message: 'Please Enter Name' }]}\n              name=\"name\"\n              label=\"Name\"\n            >\n              <Input placeholder=\"Name\" />\n            </Form.Item>\n            <Form.Item\n              {...formItemLayout}\n              rules={[{ required: true, message: 'Please Enter Email' }]}\n              name=\"email\"\n              label=\"Email\"\n            >\n              <Input placeholder=\"Email\" />\n            </Form.Item>\n            <Form.Item\n              rules={[{ required: true, message: 'Please Enter Phone' }]}\n              {...formItemLayout}\n              name=\"phone\"\n              label=\"Phone\"\n            >\n              <Input placeholder=\"Phone\" />\n            </Form.Item>\n            <Form.Item {...formItemLayout} name=\"fax\" label=\"Fax\">\n              <Input placeholder=\"Fax\" />\n            </Form.Item>\n            <Form.Item {...formItemLayout} name=\"status\" label=\"Status\" initialValue={personCheckBox}>\n              <Switch checked={personCheckBox} onChange={checked => setPersonCheckBox(checked)} />\n            </Form.Item>\n          </Form>\n        </Modal>\n      </Main>\n    </>\n  );\n};\n\nexport default UpdateVendor;\n","import { gql } from '@apollo/client';\n\nexport const contactPersonsSchema = {\n  ADD_CONTACT_PERSON: gql`\n    mutation createContactPerson($data: CreateContactPersonInput) {\n      createContactPerson(data: $data) {\n        message\n        status\n        tenant_id\n      }\n    }\n  `,\n  UPDATE_CONTACT_PERSON: gql`\n    mutation updateContactPerson($data: UpdateContactPersonInput) {\n      updateContactPerson(data: $data) {\n        message\n        status\n        tenant_id\n      }\n    }\n  `,\n};\n ","import { Button, Checkbox, Input, Switch, Select, Table } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport FeatherIcon from 'feather-icons-react';\nimport { addressSchema } from '../../apollo/address';\nimport apolloClient from '../../utility/apollo';\n\nconst BillingAdderess = ({\n  defaultBilling,\n  initialAddressData,\n  billingAddresses,\n  setBillingAddresses,\n  setDefaultBilling,\n}) => {\n  // Change State After Country Change\n  const [countries, setCountries] = useState([]);\n  const [newInitialData, setNewInitialData] = useState({ data: [], loading: true });\n  useEffect(() => {\n    // Get Country List\n    apolloClient\n      .query({\n        query: addressSchema.GET_COUNTRY_LIST,\n        context: {\n          headers: { TENANTID: process.env.REACT_APP_TENANTID },\n        },\n      })\n      .then(res => {\n        const data = res.data.getCountryList;\n        if (!data.status) return true;\n        setCountries(data?.data);\n      });\n\n    // Get State List\n    apolloClient\n      .query({\n        query: addressSchema.GET_STATE_LISTS,\n        variables: {\n          query: {\n            code: '',\n          },\n        },\n        context: {\n          headers: {\n            TENANTID: process.env.REACT_APP_TENANTID,\n          },\n        },\n      })\n      .then(res => {\n        const data = res?.data?.getStateList;\n        if (!data?.status) return;\n        setNewInitialData({ data: { ...initialAddressData, states: data?.data }, loading: false });\n        setBillingAddresses(\n          billingAddresses.map(item => {\n            return { ...item, states: data?.data?.filter(a => a.country_code === item?.countryCode?.code) };\n          }),\n        );\n      })\n      .finally(() => {\n        setNewInitialData(prev => ({ ...prev, loading: false }));\n      });\n  }, []);\n  const column = [\n    {\n      title: 'Country',\n      dataIndex: ['countryCode', 'name'],\n      key: 'name',\n      render: (_, record) => (\n        <Select\n          onSelect={country => {\n            setBillingAddresses(\n              billingAddresses.map(item => {\n                if (item.id === record.id) {\n                  return {\n                    ...item,\n                    country,\n                    states: newInitialData.data.states.filter(a => a.country_code === country),\n                  };\n                }\n                return item;\n              }),\n            );\n          }}\n          style={{ width: '100%' }}\n          placeholder=\"Country\"\n          defaultValue={record?.countryCode?.code}\n          options={countries?.map(item => ({\n            label: item?.name,\n            value: item?.code,\n          }))}\n        />\n      ),\n    },\n    {\n      title: 'Address 1',\n      dataIndex: 'address1',\n      key: 'address1',\n      width: 200,\n      render: (text, record) => (\n        <Input\n          defaultValue={text}\n          type=\"text\"\n          placeholder=\"Address 1\"\n          onChange={e => (record.address1 = e.target.value)}\n        />\n      ),\n    },\n    {\n      title: 'Address 2',\n      dataIndex: 'address2',\n      key: 'address2',\n      width: 200,\n      render: (text, record) => (\n        <Input\n          defaultValue={text}\n          type=\"text\"\n          placeholder=\"Address 2\"\n          onChange={e => (record.address2 = e.target.value)}\n        />\n      ),\n    },\n    {\n      title: 'City',\n      dataIndex: 'city',\n      key: 'city',\n      render: (text, record) => (\n        <Input defaultValue={text} type=\"text\" placeholder=\"City\" onChange={e => (record.city = e.target.value)} />\n      ),\n    },\n    {\n      title: 'State',\n      dataIndex: 'states',\n      key: 'states',\n      width: 150,\n      render: (states, record) => (\n        <Select\n          style={{ width: '100%' }}\n          placeholder=\"State\"\n          options={states?.map(item => ({\n            label: item.state,\n            value: item.abbreviation,\n          }))}\n          onSelect={val => (record.state = val)}\n          defaultValue={record.state}\n        />\n      ),\n    },\n    {\n      title: 'Zip Code',\n      dataIndex: 'zip_code',\n      key: 'zip_code',\n      render: (text, record) => (\n        <Input\n          defaultValue={text}\n          type=\"text\"\n          placeholder=\"Zip Code\"\n          onChange={e => (record.zip_code = e.target.value)}\n        />\n      ),\n    },\n    {\n      title: 'Country',\n      dataIndex: 'country ',\n      key: 'country ',\n      render: (text, record) => (\n        <Input\n          defaultValue={record.country}\n          type=\"text\"\n          placeholder=\"Country\"\n          onChange={e => (record.country = e.target.value)}\n        />\n      ),\n    },\n    {\n      title: 'Status',\n      dataIndex: 'status',\n      key: 'status',\n      align: 'right',\n      // width: 90,\n      render: (text, record) => (\n        <Switch defaultChecked={text} title=\"Status\" onChange={checked => (record.status = checked)} />\n      ),\n    },\n    {\n      title: 'Default',\n      dataIndex: 'isDefault',\n      key: 'isDefault',\n      align: 'right',\n      // width: 90,\n      render: (val, record) => (\n        <Checkbox checked={defaultBilling === record.id ? true : false} onChange={e => setDefaultBilling(record.id)} />\n      ),\n    },\n    // {\n    //   title: 'Action',\n    //   dataIndex: 'action',\n    //   key: 'action',\n    //   render: (text, record) => (\n    //     <Button size=\"\" title=\"Remove\" type=\"danger\" onClick={() => removeRow(record.id)}>\n    //       <FeatherIcon icon=\"trash-2\" />\n    //     </Button>\n    //   ),\n    // },\n  ];\n\n  // Adding new row on table\n  const addNewRow = () => {\n    setBillingAddresses(prevState => {\n      return [...prevState, { ...newInitialData.data, id: new Date().getTime() }];\n    });\n  };\n\n  const removeRow = id => {\n    setBillingAddresses(prevState => {\n      return prevState.filter(item => item.id !== id);\n    });\n  };\n\n  return (\n    <div>\n      <Table\n        loading={newInitialData?.loading}\n        className=\"table-responsive\"\n        columns={column}\n        pagination={false}\n        rowKey={'id'}\n        size=\"small\"\n        dataSource={billingAddresses}\n      />\n      <div style={{ display: 'flex', justifyContent: 'flex-end', marginTop: '10px', marginBottom: '10px' }}>\n        <Button\n          disabled={newInitialData?.loading}\n          title=\"Add Address\"\n          htmlType=\"button\"\n          type=\"primary\"\n          onClick={addNewRow}\n          style={{ marginRight: '.5em' }}\n        >\n          <FeatherIcon icon=\"plus\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default BillingAdderess;\n","import { Button, Checkbox, Input, Switch, Table, Select } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport FeatherIcon from 'feather-icons-react';\nimport { addressSchema } from '../../apollo/address';\nimport apolloClient from '../../utility/apollo';\n\nconst ShippingAddress = ({\n  defaultShipping,\n  initialAddressData,\n  shippingAddresses,\n  setShippingAddresses,\n  setDefaultShipping,\n}) => {\n  // Change State After Country Change\n  const [countries, setCountries] = useState([]);\n  const [newInitialData, setNewInitialData] = useState({ data: [], loading: true });\n  useEffect(() => {\n    // Get Country List\n    apolloClient\n      .query({\n        query: addressSchema.GET_COUNTRY_LIST,\n        context: {\n          headers: { TENANTID: process.env.REACT_APP_TENANTID },\n        },\n      })\n      .then(res => {\n        const data = res.data.getCountryList;\n        if (!data.status) return true;\n        setCountries(data?.data);\n      });\n\n    // Get State List\n    apolloClient\n      .query({\n        query: addressSchema.GET_STATE_LISTS,\n        variables: {\n          query: {\n            code: '',\n          },\n        },\n        context: {\n          headers: {\n            TENANTID: process.env.REACT_APP_TENANTID,\n          },\n        },\n      })\n      .then(res => {\n        const data = res?.data?.getStateList;\n        if (!data?.status) return;\n        setNewInitialData({ data: { ...initialAddressData, states: data?.data }, loading: false });\n        setShippingAddresses(\n          shippingAddresses.map(item => {\n            return { ...item, states: data?.data?.filter(a => a.country_code === item?.countryCode?.code) };\n          }),\n        );\n      })\n      .finally(() => {\n        setNewInitialData(prev => ({ ...prev, loading: false }));\n      });\n  }, []);\n  const column = [\n    {\n      title: 'Country',\n      dataIndex: ['countryCode', 'name'],\n      key: 'name',\n      render: (_, record) => (\n        <Select\n          onSelect={country => {\n            setShippingAddresses(\n              shippingAddresses.map(item => {\n                if (item.id === record.id) {\n                  return {\n                    ...item,\n                    country,\n                    states: newInitialData.data.states.filter(a => a.country_code === country),\n                  };\n                }\n                return item;\n              }),\n            );\n          }}\n          style={{ width: '100%' }}\n          placeholder=\"Country\"\n          defaultValue={record?.countryCode?.code}\n          options={countries?.map(item => ({\n            label: item?.name,\n            value: item?.code,\n          }))}\n        />\n      ),\n    },\n    {\n      title: 'Address 1',\n      dataIndex: 'address1',\n      key: 'address1',\n      width: 200,\n      render: (text, record) => (\n        <Input\n          defaultValue={text}\n          type=\"text\"\n          placeholder=\"Address 1\"\n          onChange={e => (record.address1 = e.target.value)}\n        />\n      ),\n    },\n    {\n      title: 'Address 2',\n      dataIndex: 'address2',\n      key: 'address2',\n      width: 200,\n      render: (text, record) => (\n        <Input\n          defaultValue={text}\n          type=\"text\"\n          placeholder=\"Address 2\"\n          onChange={e => (record.address2 = e.target.value)}\n        />\n      ),\n    },\n    {\n      title: 'City',\n      dataIndex: 'city',\n      key: 'city',\n      render: (text, record) => (\n        <Input defaultValue={text} type=\"text\" placeholder=\"City\" onChange={e => (record.city = e.target.value)} />\n      ),\n    },\n    {\n      title: 'State',\n      dataIndex: 'states',\n      key: 'states',\n      width: 150,\n      render: (states, record) => (\n        <Select\n          style={{ width: '100%' }}\n          placeholder=\"State\"\n          options={states?.map(item => ({\n            label: item.state,\n            value: item.abbreviation,\n          }))}\n          onSelect={val => (record.state = val)}\n          defaultValue={record.state}\n        />\n      ),\n    },\n    {\n      title: 'Zip Code',\n      dataIndex: 'zip_code',\n      key: 'zip_code',\n      render: (text, record) => (\n        <Input\n          defaultValue={text}\n          type=\"text\"\n          placeholder=\"Zip Code\"\n          onChange={e => (record.zip_code = e.target.value)}\n        />\n      ),\n    },\n    {\n      title: 'Status',\n      dataIndex: 'status',\n      key: 'status',\n      align: 'right',\n      // width: 90,\n      render: (text, record) => (\n        <Switch defaultChecked={text} title=\"Status\" onChange={checked => (record.status = checked)} />\n      ),\n    },\n    {\n      title: 'Default',\n      dataIndex: 'isDefault',\n      key: 'isDefault',\n      align: 'right',\n      // width: 90,\n      render: (val, record) => (\n        <Checkbox\n          name=\"isDefault\"\n          checked={defaultShipping === record.id ? true : false}\n          onChange={e => setDefaultShipping(record.id)}\n        />\n      ),\n    },\n    // {\n    //   title: 'Action',\n    //   dataIndex: 'action',\n    //   key: 'action',\n    //   render: (text, record) => (\n    //     <Button size=\"\" title=\"Remove\" type=\"danger\" onClick={() => removeRow(record.id)}>\n    //       <FeatherIcon icon=\"trash-2\" />\n    //     </Button>\n    //   ),\n    // },\n  ];\n\n  // Adding new row on table\n  const addNewRow = () => {\n    setShippingAddresses(prevState => {\n      return [...prevState, { ...newInitialData.data, id: new Date().getTime() }];\n    });\n  };\n\n  const removeRow = id => {\n    setShippingAddresses(prevState => {\n      return prevState.filter(item => item.id !== id);\n    });\n  };\n\n  return (\n    <div>\n      <Table\n        className=\"table-responsive\"\n        columns={column}\n        pagination={false}\n        rowKey={'id'}\n        size=\"small\"\n        dataSource={shippingAddresses}\n        loading={newInitialData?.loading}\n      />\n      <div style={{ display: 'flex', justifyContent: 'flex-end', marginTop: '10px', marginBottom: '10px' }}>\n        <Button\n          disabled={newInitialData?.loading}\n          title=\"Add Address\"\n          htmlType=\"button\"\n          type=\"primary\"\n          onClick={addNewRow}\n          style={{ marginRight: '.5em' }}\n        >\n          <FeatherIcon icon=\"plus\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default ShippingAddress;\n"],"sourceRoot":""}