{"version":3,"sources":["container/products/AddCoupon.js"],"names":["TextArea","AddCoupon","viewPermission","search","useLocation","params","queryString","parse","history","useHistory","useState","data","isLoading","singleCoupon","setSingleCoupon","coupon_type","setCoupon_type","coupon_status","setCoupon_status","setIsLoading","useForm","form","useEffect","id","apolloClient","query","couponQuery","GET_SINGLE_COUPON","variables","coupon_id","parseInt","context","headers","TENANTID","process","Authorization","Cookies","get","then","res","getSingleCoupon","status","s","error","catch","err","finally","title","coupon_name","gutter","sm","xs","headless","div","className","style","width","name","onFinish","values","coupon_startdate","coupon_enddate","coupon_maxamount","coupon_minamount","coupon_amount","coupon_sortorder","rest","Date","toGMTString","console","log","mutate","mutation","couponMutation","UPDATE_COUPON","updateCoupon","toast","message","setTimeout","push","success","customer_group_name","CREATE_COUPON","createCoupon","onFinishFailed","errorInfo","labelCol","span","initialValues","coupon_description","coupon_code","moment","Item","rules","required","max","label","placeholder","rows","value","onChange","Option","key","type","checked","display","justifyContent","marginTop","loading","size","htmlType","raised","to"],"mappings":"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","file":"static/js/64.5a930397.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Row, Col, Form, Input, Switch, Spin, Select, DatePicker } from 'antd';\nimport { PageHeader } from '../../components/page-headers/page-headers';\nimport { Main } from '../styled';\nimport { Cards } from '../../components/cards/frame/cards-frame';\nimport { Button } from '../../components/buttons/buttons';\nimport { Link, useHistory, useLocation } from 'react-router-dom';\nimport queryString from 'query-string';\nimport apolloClient, { couponMutation, couponQuery } from '../../utility/apollo';\nimport Cookies from 'js-cookie';\nimport { toast } from 'react-toastify';\nimport moment from 'moment';\nimport { viewPermission } from '../../utility/utility';\nconst { TextArea } = Input;\n\nconst AddCoupon = () => {\n  viewPermission('coupon');\n  const { search } = useLocation();\n  const params = queryString.parse(search);\n  const history = useHistory();\n\n  const [singleCoupon, setSingleCoupon] = useState({ data: [], isLoading: true });\n  const [coupon_type, setCoupon_type] = useState('');\n  const [coupon_status, setCoupon_status] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n  const [form] = Form.useForm();\n  const maxLength = 30;\n\n  useEffect(() => {\n    // Load single coupon\n    if (!params.id) return;\n\n    apolloClient\n      .query({\n        query: couponQuery.GET_SINGLE_COUPON,\n        variables: { query: { coupon_id: parseInt(params.id) } },\n        context: {\n          headers: {\n            TENANTID: process.env.REACT_APP_TENANTID,\n            Authorization: Cookies.get('psp_t'),\n          },\n        },\n      })\n      .then(res => {\n        const data = res?.data?.getSingleCoupon;\n        if (!data?.status) return;\n        setSingleCoupon(s => ({ ...s, data: data?.data, error: '' }));\n        setCoupon_type(data.data.coupon_type);\n      })\n      .catch(err => {\n        setSingleCoupon(s => ({ ...s, error: 'Something went Wrong.!! ' }));\n      })\n      .finally(() => {\n        setSingleCoupon(s => ({ ...s, isLoading: false }));\n      });\n  }, []);\n\n  const handleSubmit = values => {\n    const {\n      coupon_startdate,\n      coupon_enddate,\n      coupon_maxamount,\n      coupon_minamount,\n      coupon_amount,\n      coupon_sortorder,\n      ...rest\n    } = values;\n    const data = {\n      ...rest,\n      coupon_startdate: new Date(coupon_startdate).toGMTString(),\n      coupon_enddate: new Date(coupon_enddate).toGMTString(),\n      coupon_status,\n      coupon_type,\n      coupon_maxamount: parseInt(coupon_maxamount),\n      coupon_minamount: parseInt(coupon_minamount),\n      coupon_amount: parseInt(coupon_amount),\n      coupon_sortorder: parseInt(coupon_sortorder),\n    };\n\n    setIsLoading(true);\n    // return;\n    // ADD NEW Coupon\n    if (!params.id) {\n      const variables = { data };\n\n      console.log(variables);\n      apolloClient\n        .mutate({\n          mutation: couponMutation.CREATE_COUPON,\n          variables,\n          context: {\n            headers: {\n              TENANTID: process.env.REACT_APP_TENANTID,\n              Authorization: Cookies.get('psp_t'),\n            },\n          },\n        })\n        .then(res => {\n          const data = res?.data?.createCoupon;\n          if (!data.status) return toast.error(data.message);\n          setTimeout(() => {\n            history.push('/admin/products/coupon');\n          }, 1000);\n          toast.success(`${values.coupon_name} coupon added successfully`);\n        })\n        .catch(err => {\n          console.log('Error on add coupon', err);\n          return toast.error('Something Went wrong !!');\n        })\n        .finally(() => {\n          setIsLoading(false);\n        });\n    }\n    // UPDATE Coupon\n    else {\n      const variables = {\n        data: { coupon_id: parseInt(params.id), ...data },\n      };\n      console.log(variables);\n      apolloClient\n        .mutate({\n          mutation: couponMutation.UPDATE_COUPON,\n          variables,\n          context: {\n            headers: {\n              TENANTID: process.env.REACT_APP_TENANTID,\n              Authorization: Cookies.get('psp_t'),\n            },\n          },\n        })\n        .then(res => {\n          const data = res?.data?.updateCoupon;\n          if (!data.status) return toast.error(data.message);\n          setTimeout(() => {\n            history.push('/admin/products/coupon');\n          }, 1000);\n          toast.success(`${values.customer_group_name} Group Updated successfully`);\n        })\n        .catch(err => {\n          console.log('got error on addCustomerGroup', err);\n          return toast.error('Something Went wrong !!');\n        })\n        .finally(() => {\n          setIsLoading(false);\n        });\n    }\n  };\n\n  return (\n    <>\n      <PageHeader\n        title={\n          params.id\n            ? `Manage Coupon | Edit ${singleCoupon.isLoading ? '' : `(${singleCoupon.data.coupon_name})`}`\n            : 'Add Coupon'\n        }\n      />\n      <Main>\n        <Row gutter={25}>\n          <Col sm={24} xs={24}>\n            <Cards headless>\n              {params.id && singleCoupon.isLoading ? (\n                <div div className=\"spin\">\n                  <Spin />\n                </div>\n              ) : (\n                <Form\n                  style={{ width: '100%' }}\n                  form={form}\n                  name=\"addRole\"\n                  onFinish={handleSubmit}\n                  onFinishFailed={errorInfo => console.log('form error info:\\n', errorInfo)}\n                  labelCol={{ span: 4 }}\n                  initialValues={\n                    params.id\n                      ? {\n                          coupon_name: singleCoupon.data.coupon_name,\n                          coupon_description: singleCoupon.data.coupon_description,\n                          coupon_code: singleCoupon.data.coupon_code,\n                          coupon_amount: singleCoupon.data.coupon_amount,\n                          coupon_minamount: singleCoupon.data.coupon_minamount,\n                          coupon_maxamount: singleCoupon.data.coupon_maxamount,\n                          coupon_startdate: moment(parseInt(singleCoupon.data.coupon_startdate)),\n                          coupon_enddate: moment(parseInt(singleCoupon.data.coupon_enddate)),\n                          coupon_sortorder: singleCoupon.data.coupon_sortorder,\n                        }\n                      : null\n                  }\n                >\n                  <Form.Item\n                    rules={[{ required: true, max: maxLength, message: 'Please enter Coupon Name' }]}\n                    name=\"coupon_name\"\n                    label=\"Coupon Name\"\n                  >\n                    <Input placeholder=\"Enter Coupon Name\" />\n                  </Form.Item>\n\n                  <Form.Item\n                    rules={[{ required: true, message: 'Please enter Coupon Description' }]}\n                    name=\"coupon_description\"\n                    label=\"Description\"\n                  >\n                    <TextArea rows={4} placeholder=\"Enter Coupon Description\" />\n                  </Form.Item>\n                  <Form.Item\n                    rules={[{ required: true, max: maxLength, message: 'Please enter Coupon CODE' }]}\n                    name=\"coupon_code\"\n                    label=\"CODE\"\n                  >\n                    <Input placeholder=\"Enter Coupon CODE\" />\n                  </Form.Item>\n                  <Form.Item\n                    rules={[{ required: true, max: maxLength, message: 'Please enter Coupon Type' }]}\n                    label=\"Type\"\n                  >\n                    <Select\n                      value={coupon_type}\n                      onChange={value => setCoupon_type(value)}\n                      placeholder=\"Select Coupon type\"\n                    >\n                      <Select.Option key={1} value={'percentage'}>\n                        Percentage\n                      </Select.Option>\n                      <Select.Option key={2} value={'flat'}>\n                        Flat\n                      </Select.Option>\n                    </Select>\n                  </Form.Item>\n\n                  <Form.Item\n                    rules={[{ required: true, message: 'Please enter Coupon Amount' }]}\n                    name=\"coupon_amount\"\n                    label=\"Amount\"\n                  >\n                    <Input type=\"number\" placeholder=\"Enter Coupon Amount\" />\n                  </Form.Item>\n                  <Form.Item\n                    rules={[{ required: true, message: 'Please enter Minimum Amount' }]}\n                    name=\"coupon_minamount\"\n                    label=\"Minimum Amount\"\n                  >\n                    <Input type=\"number\" placeholder=\"Enter Minimum Amount\" />\n                  </Form.Item>\n                  <Form.Item\n                    rules={[{ required: true, message: 'Please enter Maximum Amount' }]}\n                    name=\"coupon_maxamount\"\n                    label=\"Maximum Amount\"\n                  >\n                    <Input type=\"number\" placeholder=\"Enter Maximum Amount\" />\n                  </Form.Item>\n\n                  <Form.Item\n                    rules={[{ required: true, message: 'Please enter Start Date' }]}\n                    name=\"coupon_startdate\"\n                    label=\"Start Date\"\n                  >\n                    <DatePicker />\n                  </Form.Item>\n                  <Form.Item\n                    rules={[{ required: true, message: 'Please enter End Date' }]}\n                    name=\"coupon_enddate\"\n                    label=\"End Date\"\n                  >\n                    <DatePicker />\n                  </Form.Item>\n\n                  <Form.Item\n                    rules={[{ required: true, message: 'Please enter Sort order' }]}\n                    name=\"coupon_sortorder\"\n                    label=\"Sort order\"\n                  >\n                    <Input type=\"number\" placeholder=\"Enter sort order\" />\n                  </Form.Item>\n\n                  <Form.Item label=\"Coupon Status\">\n                    <Switch checked={coupon_status} onChange={checked => setCoupon_status(checked)} />\n                  </Form.Item>\n\n                  <div\n                    style={{\n                      display: 'flex',\n                      justifyContent: 'flex-end',\n                      marginTop: '3em',\n                    }}\n                  >\n                    <Form.Item>\n                      <Button loading={isLoading} size=\"default\" htmlType=\"submit\" type=\"primary\" raised>\n                        {isLoading ? 'Processing' : 'Save'}\n                      </Button>\n                      <Link to=\"/admin/customers/group\">\n                        <Button type=\"white\" size=\"large\">\n                          Cancel\n                        </Button>\n                      </Link>\n                    </Form.Item>\n                  </div>\n                </Form>\n              )}\n            </Cards>\n          </Col>\n        </Row>\n      </Main>\n    </>\n  );\n};\n\nexport default AddCoupon;\n"],"sourceRoot":""}