{"version":3,"sources":["container/supports/Messages.js","apollo/contactUs/index.js"],"names":["Messages","viewPermission","useState","data","isLoading","messages","setMessages","filteredMessages","setFilteredMessages","searchText","setSearchText","columns","title","dataIndex","key","sorter","a","b","id","name","toUpperCase","render","val","href","email","phone","ellipsis","subject","style","maxWidth","whiteSpace","message","width","align","record","to","margin","useEffect","apolloClient","query","contactUsQueries","GET_CONTACT_US_MSG_LIST","context","headers","TENANTID","process","Authorization","Cookies","get","then","res","getContactUsMsgList","status","s","error","catch","err","finally","gutter","sm","xs","headless","className","placeholder","prefix","onChange","e","value","target","filter","mess","toLowerCase","includes","scroll","x","rowKey","size","dataSource","rowClassName","index","pagination","defaultPageSize","config","CONTACT_US_MESSAGE_PER_PAGE","total","length","showTotal","range","gql","GET_SINGLE_CONTACT_US_MSG","GET_CONTACT_US_UNREAD_MSG_LIST"],"mappings":"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","file":"static/js/27.36f90f1b.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Row, Col, Spin, Input, Table, Switch } from 'antd';\nimport FeatherIcon from 'feather-icons-react';\nimport { PageHeader } from '../../components/page-headers/page-headers';\nimport { Main } from '../styled';\nimport { Cards } from '../../components/cards/frame/cards-frame';\nimport { Button } from '../../components/buttons/buttons';\nimport { Link } from 'react-router-dom';\nimport FontAwesome from 'react-fontawesome';\nimport { SearchOutlined } from '@ant-design/icons';\nimport config from '../../config/config';\nimport apolloClient, { customerMutation, customerQuery } from '../../utility/apollo';\nimport Cookies from 'js-cookie';\nimport { toast } from 'react-toastify';\nimport { viewPermission } from '../../utility/utility';\nimport { contactUsQueries } from '../../apollo/contactUs';\n\n\nconst Messages = () => {\n    viewPermission('customer-group');\n\n    const [messages, setMessages] = useState({ data: [], isLoading: true })\n\n    const [filteredMessages, setFilteredMessages] = useState([])\n    const [searchText, setSearchText] = useState('')\n\n\n    const columns = [\n        {\n            title: 'ID',\n            dataIndex: 'id',\n            key: 'id',\n            sorter: (a, b) => (a.id > b.id) ? 1 : -1,\n\n        },\n        {\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n            // render: val => <b>{val}</b>,\n            sorter: (a, b) => a.name.toUpperCase() > b.name.toUpperCase() ? 1 : -1,\n        },\n        {\n            title: 'Email',\n            dataIndex: 'email',\n            key: 'email',\n            render: val => <a href={`tel:${val}`} >{val}</a>,\n            sorter: (a, b) => a.email.toUpperCase() > b.email.toUpperCase() ? 1 : -1,\n        },\n        {\n            title: 'Phone',\n            dataIndex: 'phone',\n            key: 'phone',\n            sorter: (a, b) => a.phone.toUpperCase() > b.phone.toUpperCase() ? 1 : -1,\n        },\n        {\n            title: 'Subject',\n            dataIndex: 'subject',\n            key: 'subject',\n            // width: 200,\n            ellipsis: true,\n            sorter: (a, b) => a.subject.toUpperCase() > b.subject.toUpperCase() ? 1 : -1,\n        },\n        {\n            title: 'Message',\n            dataIndex: 'message',\n            key: 'message',\n            // width: 300,\n            ellipsis: true,\n            render: val => <p\n                style={{\n                    maxWidth: \"250px\",\n                    whiteSpace: \"normal\"\n                }}\n            >{val}</p>,\n            sorter: (a, b) => a.message.toUpperCase() > b.message.toUpperCase() ? 1 : -1,\n        },\n        {\n            title: 'View',\n            dataIndex: 'id',\n            width: 70,\n            align: 'right',\n            render: (val, record) => (\n                <>\n                    <Link to={`/admin/supports/message?id=${val}`}>\n                        <FontAwesome name=\"eye\" style={{ margin: \".5em 1em\" }} />\n                    </Link>\n                </>\n            ),\n            key: 'id',\n        },\n    ]\n\n\n    // LOAD Messages\n    useEffect(() => {\n        apolloClient.query({\n            query: contactUsQueries.GET_CONTACT_US_MSG_LIST,\n            context: {\n                headers: {\n                    TENANTID: process.env.REACT_APP_TENANTID,\n                    Authorization: Cookies.get('psp_t')\n                }\n            }\n        }).then(res => {\n            const data = res?.data?.getContactUsMsgList\n            if (!data?.status) return\n            setMessages(s => ({ ...s, data: data?.data, error: '' }))\n        }).catch(err => {\n            setMessages(s => ({ ...s, error: 'Something went Wrong.!! ' }))\n        }).finally(() => {\n            setMessages(s => ({ ...s, isLoading: false }))\n        })\n\n    }, []);\n\n\n\n\n    const onChangeSearch = e => {\n        const value = e.target.value\n        setSearchText(value)\n        setFilteredMessages(messages.data.filter(mess => (mess?.email + mess?.message + mess?.name + mess?.phone + mess?.subject).toLowerCase().includes(value.toLowerCase())))\n    }\n\n\n    return (\n        <>\n            <PageHeader\n                title=\"Messages\"\n            />\n            <Main>\n                <Row gutter={25}>\n                    <Col sm={24} xs={24}>\n                        <Cards headless>\n\n                            {messages.isLoading ?\n                                <div className=\"spin\">\n                                    <Spin />\n                                </div>\n                                :\n                                <>\n                                    <Input placeholder=\"Search Message...\" prefix={<SearchOutlined />} onChange={onChangeSearch} />\n                                    <br /><br />\n\n                                    <span className={\"psp_list\"} >\n                                        <Table\n                                            scroll={{ x: \"max-content\" }}\n                                            className=\"table-responsive\"\n                                            columns={columns}\n                                            rowKey={'id'}\n                                            size=\"small\"\n                                            dataSource={searchText ? filteredMessages : messages.data}\n                                            rowClassName={(record, index) => (index % 2 === 0 ? \"\" : \"altTableClass\")}\n                                            // pagination={false}\n                                            pagination={{\n                                                defaultPageSize: config.CONTACT_US_MESSAGE_PER_PAGE,\n                                                total: searchText ? filteredMessages.length : messages.data.length,\n                                                showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} items`,\n                                            }}\n                                        />\n                                    </span>\n\n\n\n                                </>\n\n                            }\n\n\n\n                        </Cards>\n                    </Col>\n                </Row>\n            </Main>\n        </>\n    );\n};\n\nexport default Messages;\n","import { gql } from \"@apollo/client\";\n\nexport const contactUsQueries = {\n  GET_CONTACT_US_MSG_LIST: gql`\n    query getContactUsMsgList {\n        getContactUsMsgList{\n          message\n          status\n          tenant_id\n          data {\n            id\n            name\n            email\n            phone\n            subject\n            message\n            tenant_id\n            images {\n              id\n              image\n              tenant_id\n            }\n          }\n        }\n      }\n    `,\n  GET_SINGLE_CONTACT_US_MSG: gql`\n    query getSingleContactUsMsg($query: GetSingleContactMessageInput) {\n      getSingleContactUsMsg(query: $query) {\n        message\n        status\n        data {\n          id\n          name\n          email\n          phone\n          subject\n          message\n          images {\n            id\n            image\n          }\n        }\n      }\n    }\n    `,\n  GET_CONTACT_US_UNREAD_MSG_LIST: gql`\n    query getContactUsUnreadMsgList {\n      getContactUsUnreadMsgList{\n        message\n        status\n        data {\n          id\n          name\n          email\n          phone\n          subject\n          message\n          isRead\n          images {\n            id\n            image\n          }\n        }\n      }\n    }\n    \n    `,\n}"],"sourceRoot":""}