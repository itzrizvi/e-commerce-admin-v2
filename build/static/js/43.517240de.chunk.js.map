{"version":3,"sources":["container/productAvailabilityStatus/ListProductAvailabilityStatus.js","apollo/productAvailabilityStatus/index.js"],"names":["ListProductAvailabilityStatus","viewPermission","useState","data","isLoading","availability","setAvailability","token","useSelector","state","auth","filteredAvailability","setFilteredAvailability","searchText","setSearchText","columns","title","dataIndex","key","sorter","a","b","name","toUpperCase","slug","width","align","render","text","record","className","format","parseInt","to","id","style","margin","useEffect","apolloClient","query","productAvailabilityStatusQuery","GET_ALL_AVAILABILITY_STATUS","context","headers","TENANTID","process","Authorization","then","res","getAllProductAvailabilityStatus","status","s","error","catch","err","finally","buttons","size","type","icon","gutter","sm","xs","headless","placeholder","prefix","onChange","e","value","target","filter","con","toLowerCase","includes","rowKey","dataSource","rowClassName","index","pagination","defaultPageSize","config","PRODUCT_AVAILABILITY_STATUS_PER_PAGE","total","length","showTotal","range","AVAILABILITY_STATUS_ADD","gql","AVAILABILITY_STATUS_UPDATE","GET_SINGLE_AVAILABILITY_STATUS"],"mappings":"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","file":"static/js/43.517240de.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Row, Col, Spin, Input, Table, Switch } from 'antd';\nimport FeatherIcon from 'feather-icons-react';\nimport { PageHeader } from '../../components/page-headers/page-headers';\nimport { Main } from '../styled';\nimport { Cards } from '../../components/cards/frame/cards-frame';\nimport { Button } from '../../components/buttons/buttons';\nimport { Link } from 'react-router-dom';\nimport FontAwesome from 'react-fontawesome';\nimport { SearchOutlined } from '@ant-design/icons';\nimport config from '../../config/config';\nimport { viewPermission } from '../../utility/utility';\nimport Moment from 'react-moment';\nimport apolloClient from '../../apollo';\nimport { useSelector } from 'react-redux';\nimport { productAvailabilityStatusQuery } from '../../apollo/productAvailabilityStatus';\n\n\nconst ListProductAvailabilityStatus = () => {\n    viewPermission('product-availability-status');\n    const [availability, setAvailability] = useState({ data: [], isLoading: true })\n    const token = useSelector(state => state.auth.token);\n    const [filteredAvailability, setFilteredAvailability] = useState([])\n    const [searchText, setSearchText] = useState('')\n\n    const columns = [\n        {\n            title: 'Name',\n            dataIndex: 'name',\n            key: 'name',\n            sorter: (a, b) => a.name.toUpperCase() > b.name.toUpperCase() ? 1 : -1,\n        },\n        {\n            title: 'Alias',\n            dataIndex: 'slug',\n            key: 'slug',\n            sorter: (a, b) => a.slug.toUpperCase() > b.slug.toUpperCase() ? 1 : -1,\n        },\n        {\n            title: 'Date',\n            dataIndex: 'createdAt',\n            key: 'createdAt',\n            width: 120,\n            align: 'center',\n            render: (text, record) => (\n                <span className={\"status-text\"}>{<Moment format=\"DD MMMM YYYY\">{parseInt(text)}</Moment>}</span>\n            )\n        },\n        {\n            title: 'Action',\n            dataIndex: 'action',\n            width: 70,\n            align: 'right',\n            render: (text, record) => (\n                <>\n                    <Link to={`/admin/product-availability-status/update?id=${record.id}`}>\n                        <FontAwesome name=\"edit\" style={{ margin: \".5em 1em\" }} />\n                    </Link>\n                </>\n            ),\n            key: 'slug',\n        },\n    ]\n\n\n    // LOAD CUSTOMER GROUPS\n    useEffect(() => {\n        apolloClient.query({\n            query: productAvailabilityStatusQuery.GET_ALL_AVAILABILITY_STATUS,\n            context: {\n                headers: {\n                    TENANTID: process.env.REACT_APP_TENANTID,\n                    Authorization: token\n                }\n            }\n        }).then(res => {\n            const data = res?.data?.getAllProductAvailabilityStatus\n            if (!data?.status) return\n            setAvailability(s => ({ ...s, data: data?.data, error: '' }))\n        }).catch(err => {\n            setAvailability(s => ({ ...s, error: 'Something went Wrong.!! ' }))\n        }).finally(() => {\n            setAvailability(s => ({ ...s, isLoading: false }))\n        })\n\n    }, []);\n\n\n\n\n    const onChangeSearch = e => {\n        const value = e.target.value\n        setSearchText(value)\n        setFilteredAvailability(availability.data.filter(con => (con?.name + con?.slug).toLowerCase().includes(value.toLowerCase())))\n    }\n\n\n    return (\n        <>\n            <PageHeader\n                title=\"Product Availability Status\"\n                buttons={[\n                    <div key=\"1\" className=\"page-header-actions\">\n                        <Link to=\"/admin/product-availability-status/add\">\n                            <Button size=\"small\" title=\"Add Product Availability Status\" type=\"primary\">\n                                <FeatherIcon icon=\"user-plus\" />\n                            </Button>\n                        </Link>\n                    </div>\n                ]}\n            />\n            <Main>\n                <Row gutter={25}>\n                    <Col sm={24} xs={24}>\n                        <Cards headless>\n\n                            {availability.isLoading ?\n                                <div className=\"spin\">\n                                    <Spin />\n                                </div>\n                                :\n                                <>\n                                    <Input placeholder=\"Search Product Availability Status...\" prefix={<SearchOutlined />} onChange={onChangeSearch} />\n                                    <br /><br />\n\n                                    <span className={\"psp_list\"} >\n                                        <Table\n                                            className=\"table-responsive\"\n                                            columns={columns}\n                                            rowKey={'id'}\n                                            size=\"small\"\n                                            dataSource={searchText ? filteredAvailability : availability.data}\n                                            rowClassName={(record, index) => (index % 2 === 0 ? \"\" : \"altTableClass\")}\n                                            // pagination={false}\n                                            pagination={{\n                                                defaultPageSize: config.PRODUCT_AVAILABILITY_STATUS_PER_PAGE,\n                                                total: searchText ? filteredAvailability.length : availability.data.length,\n                                                showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} items`,\n                                            }}\n                                        />\n                                    </span>\n                                </>\n                            }\n                        </Cards>\n                    </Col>\n                </Row>\n            </Main>\n        </>\n    );\n};\n\nexport default ListProductAvailabilityStatus;\n","import { gql } from \"@apollo/client\";\n\nexport const productAvailabilityStatusQuery = {\n\nAVAILABILITY_STATUS_ADD: gql`\n    mutation addProductAvailabilityStatus($name: String!){\n        addProductAvailabilityStatus(data: { name: $name }) {\n            message\n            status\n            tenant_id\n        }\n    }`,\n  AVAILABILITY_STATUS_UPDATE: gql`\n    mutation updateProductAvailabilityStatus($data: UpdateProductAvailabilityStatusInput){\n        updateProductAvailabilityStatus(data: $data) {\n            message\n            status\n            tenant_id\n        }\n    }`,\n  GET_ALL_AVAILABILITY_STATUS: gql`\n    query getAllProductAvailabilityStatus{\n        getAllProductAvailabilityStatus {\n            message\n            status\n            data {\n                id\n                name\n                slug\n                createdAt\n                updatedAt\n            }\n        }\n    }`,\n  GET_SINGLE_AVAILABILITY_STATUS: gql`\n    query getSingleProductAvailabilityStatus($query : GetSingleProductAvailabilityStatusInput){\n        getSingleProductAvailabilityStatus(query: $query) {\n            message\n            status\n            data {\n                id\n                name\n                slug\n                createdAt\n                updatedAt\n            }\n        }\n  }`\n}\n"],"sourceRoot":""}