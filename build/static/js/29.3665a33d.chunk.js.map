{"version":3,"sources":["container/supports/ViewSingleMessage.js","apollo/contactUs/index.js"],"names":["ViewSingleMessage","search","useLocation","params","queryString","parse","useState","data","isLoading","singleMessage","setSingleMessage","useEffect","apolloClient","query","contactUsQueries","GET_SINGLE_CONTACT_US_MSG","context","headers","TENANTID","process","Authorization","Cookies","get","variables","id","parseInt","then","res","getSingleContactUsMsg","status","toast","error","message","catch","err","console","log","finally","title","email","gutter","sm","xs","headless","className","style","width","name","href","phone","subject","verticalAlign","padding","paddingBottom","border","borderRadius","background","images","map","item","renderImage","image","key","src","alt","GET_CONTACT_US_MSG_LIST","gql","GET_CONTACT_US_UNREAD_MSG_LIST"],"mappings":"wTAoIeA,UAvHW,WAAO,IAAD,kBACpBC,EAAWC,wBAAXD,OACFE,EAASC,IAAYC,MAAMJ,GAEjC,EAA0CK,mBAAS,CAAEC,KAAM,GAAIC,WAAW,IAAO,mBAA1EC,EAAa,KAAEC,EAAgB,KA8BtC,OA7BAC,qBAAU,WACNC,IACKC,MAAM,CACHA,MAAOC,IAAiBC,0BACxBC,QAAS,CACLC,QAAS,CACLC,SAAUC,SACVC,cAAeC,IAAQC,IAAI,WAGnCC,UAAW,CAAEV,MAAO,CAAEW,GAAIC,SAAStB,EAAOqB,QAE7CE,MAAK,SAAAC,GAAQ,IAAD,EACHpB,EAAU,OAAHoB,QAAG,IAAHA,GAAS,QAAN,EAAHA,EAAKpB,YAAI,WAAN,EAAH,EAAWqB,sBACnBrB,EAAKsB,QAAQC,IAAMC,MAAMxB,EAAKyB,SACnCtB,EAAiB,CAAEH,KAAMA,EAAKA,KAAMC,WAAW,OAGlDyB,OAAM,SAAAC,GACHC,QAAQC,IAAI,8BAA+BF,GAC3CxB,EAAiB,CAAEH,KAAM,GAAIC,WAAW,OAE3C6B,SAAQ,iBAId,IAIC,oCACI,kBAAC,IAAU,CACPC,MAAK,qBAAgB7B,EAAcD,UAAY,OAAM,WAAOC,EAAcF,KAAKgC,MAAK,QAExF,kBAAC,IAAI,KACD,uBAAKC,OAAQ,IACT,uBAAKC,GAAI,GAAIC,GAAI,IACb,kBAAC,IAAK,CAACC,UAAQ,GACVlC,EAAcD,UACX,yBAAKoC,UAAU,QACX,6BAGJ,oCAEI,2BAAOC,MAAO,CAAEC,MAAO,SACnB,+BAEI,4BACI,wBAAID,MAAO,CAAEC,MAAO,UAAW,sCAC/B,4BAAkB,OAAbrC,QAAa,IAAbA,GAAmB,QAAN,EAAbA,EAAeF,YAAI,WAAN,EAAb,EAAqBwC,OAE9B,4BACI,4BAAI,uCACJ,4BAAI,uBAAGC,KAAI,iBAAyB,OAAbvC,QAAa,IAAbA,GAAmB,QAAN,EAAbA,EAAeF,YAAI,WAAN,EAAb,EAAqBgC,QAAwB,OAAb9B,QAAa,IAAbA,GAAmB,QAAN,EAAbA,EAAeF,YAAI,WAAN,EAAb,EAAqBgC,SAEhF,4BACI,4BAAI,uCACJ,4BAAI,uBAAGS,KAAI,cAAsB,OAAbvC,QAAa,IAAbA,GAAmB,QAAN,EAAbA,EAAeF,YAAI,WAAN,EAAb,EAAqB0C,QAAwB,OAAbxC,QAAa,IAAbA,GAAmB,QAAN,EAAbA,EAAeF,YAAI,WAAN,EAAb,EAAqB0C,SAE7E,6BACA,4BACI,4BAAI,yCACJ,4BAAkB,OAAbxC,QAAa,IAAbA,GAAmB,QAAN,EAAbA,EAAeF,YAAI,WAAN,EAAb,EAAqB2C,UAE9B,6BACA,4BACI,wBAAIL,MAAO,CAAEM,cAAe,aAC3B,yCACD,4BAAI,uBACAN,MAAO,CACHO,QAAS,MACTC,cAAe,MACfC,OAAQ,oBACRC,aAAc,MACdC,WAAY,YAEL,OAAb/C,QAAa,IAAbA,GAAmB,QAAN,EAAbA,EAAeF,YAAI,WAAN,EAAb,EAAqByB,aAInC,6BAaA,6BACkB,OAAbvB,QAAa,IAAbA,GAAmB,QAAN,EAAbA,EAAeF,YAAI,OAAQ,QAAR,EAAnB,EAAqBkD,cAAM,WAAd,EAAb,EAA6BC,KAAI,SAAAC,GAE9B,OADAxB,QAAQC,IAAI,aAAcwB,sBAAYD,EAAKnC,GAAImC,EAAKE,MAAO,aAAc,IAAI,IAEzE,yBAAKC,IAAKH,EAAKnC,GAAIuC,IAAKH,sBAAYD,EAAKnC,GAAImC,EAAKE,MAAO,aAAc,IAAI,GAAOG,IAAI,iB,4FClHzHlD,EAAmB,CAC9BmD,wBAAyBC,YAAG,0bAuB5BnD,0BAA2BmD,YAAG,6YAoB9BC,+BAAgCD,YAAG","file":"static/js/29.3665a33d.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Row, Col, Spin } from 'antd';\nimport { PageHeader } from '../../components/page-headers/page-headers';\nimport { Main } from '../styled';\nimport { Cards } from '../../components/cards/frame/cards-frame';\nimport apolloClient from '../../apollo';\nimport { contactUsQueries } from '../../apollo/contactUs';\nimport Cookies from 'js-cookie';\nimport { toast } from 'react-toastify';\nimport { useLocation } from 'react-router-dom';\nimport queryString from 'query-string'\nimport { renderImage } from '../../utility/images';\n\nconst ViewSingleMessage = () => {\n    const { search } = useLocation();\n    const params = queryString.parse(search)\n\n    const [singleMessage, setSingleMessage] = useState({ data: {}, isLoading: true })\n    useEffect(() => {\n        apolloClient\n            .query({\n                query: contactUsQueries.GET_SINGLE_CONTACT_US_MSG,\n                context: {\n                    headers: {\n                        TENANTID: process.env.REACT_APP_TENANTID,\n                        Authorization: Cookies.get('psp_t'),\n                    },\n                },\n                variables: { query: { id: parseInt(params.id) } }\n            })\n            .then(res => {\n                const data = res?.data?.getSingleContactUsMsg;\n                if (!data.status) toast.error(data.message)\n                setSingleMessage({ data: data.data, isLoading: false })\n\n            })\n            .catch(err => {\n                console.log('Error on get single message', err);\n                setSingleMessage({ data: {}, isLoading: false })\n            })\n            .finally(() => {\n\n            });\n\n    }, []);\n\n\n    return (\n        <>\n            <PageHeader\n                title={`Messege by ${singleMessage.isLoading ? '....' : `(${singleMessage.data.email})`}`}\n            />\n            <Main>\n                <Row gutter={25}>\n                    <Col sm={24} xs={24}>\n                        <Cards headless>\n                            {singleMessage.isLoading ?\n                                <div className=\"spin\">\n                                    <Spin />\n                                </div>\n                                :\n                                <>\n\n                                    <table style={{ width: \"100%\" }}>\n                                        <tbody>\n\n                                            <tr>\n                                                <td style={{ width: \"100px\" }}><b>Name :</b></td>\n                                                <td>{singleMessage?.data?.name}</td>\n                                            </tr>\n                                            <tr>\n                                                <td><b>Email :</b></td>\n                                                <td><a href={`mailto:${singleMessage?.data?.email}`} >{singleMessage?.data?.email}</a></td>\n                                            </tr>\n                                            <tr>\n                                                <td><b>Phone :</b></td>\n                                                <td><a href={`tel:${singleMessage?.data?.phone}`} >{singleMessage?.data?.phone}</a></td>\n                                            </tr>\n                                            <br />\n                                            <tr>\n                                                <td><b>Subject :</b></td>\n                                                <td>{singleMessage?.data?.subject}</td>\n                                            </tr>\n                                            <br />\n                                            <tr>\n                                                <td style={{ verticalAlign: \"baseline\" }}\n                                                ><b>Message :</b></td>\n                                                <td><p\n                                                    style={{\n                                                        padding: \"1em\",\n                                                        paddingBottom: \"6em\",\n                                                        border: \"1px solid #dedede\",\n                                                        borderRadius: \"7px\",\n                                                        background: \"#f4f5f7\",\n                                                    }}\n                                                >{singleMessage?.data?.message}</p></td>\n                                            </tr>\n                                        </tbody>\n                                    </table>\n                                    <br />\n                                    {/* <p><b>Message :</b></p>\n                                    <p\n                                        style={{\n                                            padding: \"1em\",\n                                            paddingBottom: \"6em\",\n                                            border: \"1px solid #dedede\",\n                                            borderRadius: \"7px\",\n                                            background: \"#f4f5f7\",\n                                        }}\n                                    >{singleMessage?.data?.message}</p>\n                                    <br /> */}\n\n                                    <div>\n                                        {singleMessage?.data?.images?.map(item => {\n                                            console.log(\"test img: \", renderImage(item.id, item.image, \"contact-us\", '', true))\n                                            return (\n                                                <img key={item.id} src={renderImage(item.id, item.image, \"contact-us\", '', true)} alt=\"\" />\n                                            )\n                                        })}\n                                    </div>\n\n                                </>\n                            }\n\n                        </Cards>\n                    </Col>\n                </Row>\n            </Main>\n        </>\n    );\n};\n\nexport default ViewSingleMessage;\n","import { gql } from \"@apollo/client\";\n\nexport const contactUsQueries = {\n  GET_CONTACT_US_MSG_LIST: gql`\n    query getContactUsMsgList {\n        getContactUsMsgList{\n          message\n          status\n          tenant_id\n          data {\n            id\n            name\n            email\n            phone\n            subject\n            message\n            tenant_id\n            images {\n              id\n              image\n              tenant_id\n            }\n          }\n        }\n      }\n    `,\n  GET_SINGLE_CONTACT_US_MSG: gql`\n    query getSingleContactUsMsg($query: GetSingleContactMessageInput) {\n      getSingleContactUsMsg(query: $query) {\n        message\n        status\n        data {\n          id\n          name\n          email\n          phone\n          subject\n          message\n          images {\n            id\n            image\n          }\n        }\n      }\n    }\n    `,\n  GET_CONTACT_US_UNREAD_MSG_LIST: gql`\n    query getContactUsUnreadMsgList {\n      getContactUsUnreadMsgList{\n        message\n        status\n        data {\n          id\n          name\n          email\n          phone\n          subject\n          message\n          isRead\n          images {\n            id\n            image\n          }\n        }\n      }\n    }\n    \n    `,\n}"],"sourceRoot":""}