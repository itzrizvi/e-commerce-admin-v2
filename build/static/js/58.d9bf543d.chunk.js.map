{"version":3,"sources":["redux/roles/actionCreator.js","container/pages/overview/RoleListTable.js"],"names":["i","rolesReadBegin","actions","rolesReadSuccess","rolesReadErr","roleAddBegin","roleAddSuccess","roleAddError","RoleListTable","dispatch","useDispatch","rolesData","useSelector","state","roles","data","rolesTableData","useState","filteredRoles","setFilteredRoles","map","id","role","createdAt","role_description","permissions","role_status","push","key","name","dateTime","className","format","parseInt","action","type","to","shape","icon","size","useEffect","apolloClient","query","authQuery","GET_ALL_ROLES","context","headers","TENANTID","process","Authorization","Cookies","get","then","res","getAllRoles","status","logOut","catch","err","rolesTableColumns","title","dataIndex","sorter","a","b","toUpperCase","ellipsis","length","render","filter","item","read_access","edit_access","elem","rolesPermission","roles_permission_name","join","width","align","filters","text","value","onFilter","record","defaultChecked","onChange","checked","variables","mutate","mutation","authMutation","UPDATE_ROLE","updateRole","toast","error","message","success","console","log","handleStatusChange","style","cursor","margin","color","searchText","setSearchText","headless","prefix","placeholder","e","target","toLowerCase","includes","marginBottom","dataSource","columns","rowClassName","index","rowKey","pagination","defaultPageSize","config","ROLES_PER_PAGE","total","showTotal","range"],"mappings":"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","file":"static/js/58.d9bf543d.chunk.js","sourcesContent":["import Cookies from 'js-cookie';\nimport { toast } from 'react-toastify';\nimport apolloClient, { authQuery, rolesMutation } from '../../utility/apollo';\nimport { logOut } from '../authentication/actionCreator';\nimport actions from './actions';\n\nconst {\n  rolesReadBegin,\n  rolesReadSuccess,\n  rolesReadErr,\n  roleAddBegin,\n  roleAddSuccess,\n  roleAddError\n} = actions;\n\nconst rolesDataRead = () => {\n  return async dispatch => {\n    await dispatch(rolesReadBegin());\n    apolloClient.query({\n      query: authQuery.GET_ALL_ROLES,\n      context: {\n        headers: {\n          TENANTID: process.env.REACT_APP_TENANTID,\n          Authorization: Cookies.get('psp_t')\n        }\n      }\n    }).then(res => {\n      if (!res?.data?.getAllRoles?.status) {\n        dispatch(logOut())\n      }\n      dispatch(rolesReadSuccess(res.data.getAllRoles.data));\n    }).catch(err => {\n      dispatch(rolesReadErr(err));\n    })\n\n  }\n};\n\nexport {\n  rolesDataRead\n};\n","import React, { useEffect, useState } from 'react';\nimport { Input, Spin, Switch, Table } from 'antd';\nimport FeatherIcon from 'feather-icons-react';\nimport { Button } from '../../../components/buttons/buttons';\nimport { Cards } from '../../../components/cards/frame/cards-frame';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { rolesDataRead } from '../../../redux/roles/actionCreator';\nimport Moment from 'react-moment';\nimport { Link } from 'react-router-dom';\nimport FontAwesome from 'react-fontawesome';\nimport apolloClient, { authMutation } from '../../../utility/apollo';\nimport Cookies from 'js-cookie';\nimport { toast } from 'react-toastify';\nimport config from '../../../config/config';\n\n\nconst RoleListTable = () => {\n  const dispatch = useDispatch();\n  const { rolesData } = useSelector(state => {\n    return {\n      rolesData: state.roles.data ?? []\n    };\n  });\n\n\n  let rolesTableData = [];\n  const [filteredRoles, setFilteredRoles] = useState([]);\n\n  rolesData.map(roles => {\n    const { id, role, createdAt, role_description, permissions, role_status, } = roles;\n    return rolesTableData.push({\n      key: id,\n      name: role,\n      role_description,\n      permissions,\n      role_status,\n      createdAt: createdAt,\n      dateTime: <span className={\"status-text\"}>{<Moment format=\"DD MMMM  YYYY \">{parseInt(createdAt)}</Moment>}</span>,\n      action: (\n        <div className=\"table-actions\">\n          <>\n            <Button className=\"btn-icon\" type=\"info\" to=\"#\" shape=\"circle\">\n              <FeatherIcon icon=\"edit\" size={16} />\n            </Button>\n          </>\n        </div>\n      ),\n    });\n  });\n\n  useEffect(() => {\n    dispatch(rolesDataRead());\n  }, [dispatch])\n\n\n  const handleStatusChange = (record, checked) => {\n\n    const variables = { data: { id: record.key, role_status: checked } }\n\n\n    apolloClient.mutate({\n      mutation: authMutation.UPDATE_ROLE,\n      variables,\n      context: {\n        headers: {\n          TENANTID: process.env.REACT_APP_TENANTID,\n          Authorization: Cookies.get('psp_t')\n        }\n      }\n    }).then(res => {\n      const data = res?.data?.updateRole\n      if (!data?.status) return toast.error(data.message)\n      toast.success(`${record.name} Role Status updated successfully.`)\n    }).catch(err => {\n      toast.error('Something went wrong.!')\n      console.log(\"Error on role status change: \", err);\n    })\n\n  }\n\n\n\n  const rolesTableColumns = [\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      key: 'name',\n      sorter: (a, b) => a.name.toUpperCase() > b.name.toUpperCase() ? 1 : -1,\n    },\n    {\n      title: 'Description',\n      dataIndex: 'role_description',\n      key: 'role_description',\n      sorter: (a, b) => a.role_description.toUpperCase() > b.role_description.toUpperCase() ? 1 : -1,\n    },\n    {\n      title: 'Permissions',\n      dataIndex: 'permissions',\n      key: 'permissions',\n      // width: 150,\n      ellipsis: true,\n      sorter: (a, b) => a.permissions.length > b.permissions.length ? -1 : 1,\n      render: (permissions) => {\n        const data = permissions.filter(item => item.read_access || item.edit_access).map(elem => elem.rolesPermission.roles_permission_name).join(\", \")\n\n        return (<p>{data}</p>)\n      }\n\n    },\n    {\n      title: 'Status',\n      dataIndex: 'role_status',\n      key: 'role_status',\n      width: 100,\n      align: 'center',\n      filters: [\n        {\n          text: 'Active',\n          value: true,\n        },\n        {\n          text: 'Inactive',\n          value: false,\n        }\n      ],\n      onFilter: (value, record) => record.role_status === value,\n      sorter: (a, b) => (a.role_status === b.role_status) ? 0 : a.role_status ? -1 : 1,\n      render: (role_status, record) => (\n        <Switch defaultChecked={role_status} title='Status' onChange={checked => handleStatusChange(record, checked)} />\n      )\n    },\n    {\n      title: 'Action',\n      dataIndex: 'key',\n      key: 'action',\n      width: 90,\n      align: \"center\",\n      render: (text, record) => (\n        <Link to={`/admin/roles/update?id=${record.key}`} style={{ cursor: 'pointer' }} >\n          <FontAwesome name=\"edit\" style={{ margin: \".5em 1em\", color: '#5F63F2' }} />\n        </Link>\n      ),\n    },\n  ];\n\n  const [searchText, setSearchText] = useState('');\n  const onChangeSearch = e => {\n    const value = e.target.value\n    setSearchText(value)\n    setFilteredRoles(rolesTableData.filter(role => (role.name + role.role_description).toLowerCase().includes(value.toLowerCase())))\n  }\n\n\n\n  return (\n    <Cards headless>\n      {!rolesTableData.length ?\n        <div className=\"spin\">\n          <Spin />\n        </div>\n        : <>\n          <Input\n            prefix={<FeatherIcon icon=\"search\" size={14} />}\n            placeholder=\"Search Roles..\"\n            onChange={onChangeSearch}\n            style={{ marginBottom: '1em' }}\n          />\n\n          <span className={\"psp_list\"} >\n\n            <Table\n              dataSource={searchText ? filteredRoles : rolesTableData}\n              columns={rolesTableColumns}\n              size=\"small\"\n              rowClassName={(record, index) => (index % 2 === 0 ? \"\" : \"altTableClass\")}\n              rowKey={'key'}\n              pagination={{\n                defaultPageSize: config.ROLES_PER_PAGE,\n                total: searchText ? filteredRoles.length : rolesTableData.length,\n                showTotal: (total, range) => `${range[0]}-${range[1]} of ${total} items`,\n              }}\n            />\n          </span>\n        </>}\n    </Cards>\n  );\n};\n\nexport default RoleListTable;\n"],"sourceRoot":""}